{
  "hash": "690acbacf2bf8b77279e9eac1e8602ca",
  "result": {
    "markdown": "---\ntitle: \"speeding up GPX ingest: profiling, Rcpp and furrr\"\nsubtitle:\n  profiling your way to happiness, or possibly bikeshedding\ndate: \"2018-06-15\"\nexecute: \n  error: true\n---\n\nThis post is a casual case study in speeding up R code. I work through several iterations of a function to read and process GPS running data from Strava stored in the GPX format. Along the way I describe how to visualize code bottlenecks with `profvis` and briefly touch on fast compiled code with `Rcpp` and parallelization with `furrr`.\n\n## The problem: tidying trajectories in GPX files\n\nI record my runs on my phone using Strava. Strava stores the GPS recordings in GPX files, which are XML files that follow some additional conventions. They start with some metadata and then contain a list of GPS readings taken at one second intervals with longitude, latitude, elevation and timestap information. I wanted to approximate my speed at each time point in the GPS record, as well as my distance traveled since the previous GPS recordings.\n\nBelow I have an example of a GPX file that contains three GPS readings. First I create a vector that contains the names off my GPX files, and then I subset to the files that contain running data. I choose to work with the third run as a canonical example, and show a subset of the recording with three GPS readings.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ────────────────────────────────── tidyverse 1.3.1.9000 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ ggplot2 3.3.5.9000     ✔ purrr   0.3.4.9000\n✔ tibble  3.1.7.9000     ✔ dplyr   1.0.8.9000\n✔ tidyr   1.2.0.9000     ✔ stringr 1.4.0.9000\n✔ readr   2.1.2.9000     ✔ forcats 0.5.1.9000\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nhere() starts at /dabox/hayes/quarto-blog\n```\n:::\n\n```{.r .cell-code}\n# file contain run data\nact_files <- dir(here::here(\"posts/2018-06-15_speeding-up-gpx-ingest-profiling-rcpp-and-furrr/2018-04-17-activities-alex\"),\n                 full.names = TRUE)\nrun_files <- act_files[str_detect(act_files, \"Run\")]\n\n# example file we'll work with\nfname <- run_files[3]\n\n# subset of example\nall <- read_lines(fname)\nmini_idx <- c(1:20, 5897:5899)\ncat(all[mini_idx], sep = \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<gpx creator=\"StravaGPX Android\" version=\"1.1\" xmlns=\"http://www.topografix.com/GPX/1/1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd\">\n <metadata>\n  <time>2017-10-31T17:58:22Z</time>\n </metadata>\n <trk>\n  <name>analytically slow</name>\n  <trkseg>\n   <trkpt lat=\"29.7169490\" lon=\"-95.3978210\">\n    <ele>14.1</ele>\n    <time>2017-10-31T17:58:22Z</time>\n   </trkpt>\n   <trkpt lat=\"29.7168040\" lon=\"-95.3977180\">\n    <ele>14.4</ele>\n    <time>2017-10-31T17:58:29Z</time>\n   </trkpt>\n   <trkpt lat=\"29.7167480\" lon=\"-95.3976890\">\n    <ele>14.5</ele>\n    <time>2017-10-31T17:58:30Z</time>\n   </trkpt>\n  </trkseg>\n </trk>\n</gpx>\n```\n:::\n:::\n\nThe part we want is in the `<trkseg>` tags. We'd like to turn this into a tidy dataframe where each row represents one GPS reading and the columns contain information like speed, distance, traveled, elevation gained, etc.\n\n## GPX reader version 0: using plotKML::readGPX\n\nUsing `plotKML::readGPX` we can read the representative file into R:\n\n::: {.cell}\n\n```{.r .cell-code}\ntrajectory <- gpx::read_gpx(fname)$tracks |> \n  as_tibble() |> \n  unnest() |> \n  janitor::clean_names() |> \n  select(-extensions, segment_id)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `cols` is now required when using unnest().\nPlease use `cols = c(`analytically slow`)`\n```\n:::\n\n```{.r .cell-code}\ntrajectory\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,472 × 5\n   elevation time                latitude longitude segment_id\n       <dbl> <dttm>                 <dbl>     <dbl>      <int>\n 1      14.1 2017-10-31 17:58:22     29.7     -95.4          1\n 2      14.4 2017-10-31 17:58:29     29.7     -95.4          1\n 3      14.5 2017-10-31 17:58:30     29.7     -95.4          1\n 4      14.6 2017-10-31 17:58:31     29.7     -95.4          1\n 5      14.6 2017-10-31 17:58:32     29.7     -95.4          1\n 6      14.7 2017-10-31 17:58:33     29.7     -95.4          1\n 7      14.7 2017-10-31 17:58:34     29.7     -95.4          1\n 8      14.7 2017-10-31 17:58:36     29.7     -95.4          1\n 9      14.7 2017-10-31 17:58:37     29.7     -95.4          1\n10      14.7 2017-10-31 17:58:38     29.7     -95.4          1\n# … with 1,462 more rows\n```\n:::\n:::\n\nWe want to compare location at $t$ and $t - 1$, so we create a lagged column of longitudes and latitudes. We put longitude and latitude together into a vector to play well with `raster::pointDistance`, which we'll use to compute the great circle distance between two points.\n\n::: {.cell}\n\n```{.r .cell-code}\nlagged <- trajectory |> \n    mutate(x = map2(longitude, latitude, c),  # create lagged position, this means the \n           x_old = lag(x),         # first row isn't complete\n           t_old = lag(time)) |> \n    slice(-1)                      # remove incomplete first row\n\nlagged\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,471 × 8\n   eleva…¹ time                lat…² lon…³ seg…⁴ x     x_old t_old              \n     <dbl> <dttm>              <dbl> <dbl> <int> <lis> <lis> <dttm>             \n 1    14.4 2017-10-31 17:58:29  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:22\n 2    14.5 2017-10-31 17:58:30  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:29\n 3    14.6 2017-10-31 17:58:31  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:30\n 4    14.6 2017-10-31 17:58:32  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:31\n 5    14.7 2017-10-31 17:58:33  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:32\n 6    14.7 2017-10-31 17:58:34  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:33\n 7    14.7 2017-10-31 17:58:36  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:34\n 8    14.7 2017-10-31 17:58:37  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:36\n 9    14.7 2017-10-31 17:58:38  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:37\n10    14.7 2017-10-31 17:58:39  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:38\n# … with 1,461 more rows, and abbreviated variable names ¹​elevation, ²​latitude,\n#   ³​longitude, ⁴​segment_id\n```\n:::\n:::\n\nIt turns out this data is not contiguous. Strava has a feature called autopause which detects pauses in runs (for example, at a stoplight), and GPS readings during paused periods are not include in the GPX files[^1]. GPS readings typically happen once every second. I plotted the time gaps between readings and realized that time gaps greater than three seconds between two GPS recordings indicated a pause. This lets me break the run down into a series of contigous segments:\n\n[^1]: It took me a two months to realize this, mostly because I didn't plot enough of the data. If you're curous how Strava detects paused movement, you can read more [here](https://medium.com/strava-engineering/improving-auto-pause-for-everyone-13f253c66f9e). It seems to involve more if-statements than fun models.\n\n::: {.cell}\n\n```{.r .cell-code}\nsegmented <- lagged |> \n  mutate(rest = as.numeric(time - t_old),     # seconds\n         new_segment = as.numeric(rest > 3),  \n         segment = cumsum(new_segment)) |>\n  \n  # don't want t_old to be from previous segment\n  group_by(segment) |> \n  slice(-1)  \n    \nsegmented\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,464 × 11\n# Groups:   segment [5]\n   eleva…¹ time                lat…² lon…³ seg…⁴ x     x_old t_old              \n     <dbl> <dttm>              <dbl> <dbl> <int> <lis> <lis> <dttm>             \n 1    14.5 2017-10-31 17:58:30  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:29\n 2    14.6 2017-10-31 17:58:31  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:30\n 3    14.6 2017-10-31 17:58:32  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:31\n 4    14.7 2017-10-31 17:58:33  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:32\n 5    14.7 2017-10-31 17:58:34  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:33\n 6    14.7 2017-10-31 17:58:36  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:34\n 7    14.7 2017-10-31 17:58:37  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:36\n 8    14.7 2017-10-31 17:58:38  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:37\n 9    14.7 2017-10-31 17:58:39  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:38\n10    14.6 2017-10-31 17:58:40  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:39\n# … with 1,454 more rows, abbreviated variable names ¹​elevation, ²​latitude,\n#   ³​longitude, ⁴​segment_id, and 3 more variables: rest <dbl>,\n#   new_segment <dbl>, segment <dbl>\n```\n:::\n:::\n\nNow I calculate some information about each time point and segment that I'll use in downstream analyses:\n\n::: {.cell}\n\n```{.r .cell-code}\nlonlat_dist <- partial(raster::pointDistance, lonlat = TRUE)\n\nuseful <- segmented |> \n  mutate(\n    seg_length = max(time) - min(t_old),    # seconds\n    dx = map2_dbl(x, x_old, lonlat_dist),   # meters\n    dx = 0.000621371 * dx,                  # miles\n    dt = rest / 60^2,                       # hours\n    speed = dx / dt,                        # mph\n    pace = 60 * dt / dx,                    # min / mile\n    elevation = elevation                   # feet\n  ) |> \n  dplyr::select(-elevation, -x, -x_old, -t_old, -new_segment) |> \n  ungroup()\n\nuseful\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,464 × 11\n   time                lat…¹ lon…² seg…³  rest seg…⁴ seg…⁵      dx      dt speed\n   <dttm>              <dbl> <dbl> <int> <dbl> <dbl> <drt>   <dbl>   <dbl> <dbl>\n 1 2017-10-31 17:58:30  29.7 -95.4     1     1     1 510 … 0.00423 2.78e-4 15.2 \n 2 2017-10-31 17:58:31  29.7 -95.4     1     1     1 510 … 0.00367 2.78e-4 13.2 \n 3 2017-10-31 17:58:32  29.7 -95.4     1     1     1 510 … 0.00197 2.78e-4  7.11\n 4 2017-10-31 17:58:33  29.7 -95.4     1     1     1 510 … 0.00483 2.78e-4 17.4 \n 5 2017-10-31 17:58:34  29.7 -95.4     1     1     1 510 … 0.00230 2.78e-4  8.28\n 6 2017-10-31 17:58:36  29.7 -95.4     1     2     1 510 … 0.00410 5.56e-4  7.38\n 7 2017-10-31 17:58:37  29.7 -95.4     1     1     1 510 … 0.00243 2.78e-4  8.75\n 8 2017-10-31 17:58:38  29.7 -95.4     1     1     1 510 … 0.00316 2.78e-4 11.4 \n 9 2017-10-31 17:58:39  29.7 -95.4     1     1     1 510 … 0.00415 2.78e-4 15.0 \n10 2017-10-31 17:58:40  29.7 -95.4     1     1     1 510 … 0.00363 2.78e-4 13.1 \n# … with 1,454 more rows, abbreviated variable names ¹​latitude, ²​longitude,\n#   ³​segment_id, ⁴​segment, ⁵​seg_length, and 1 more variable: pace <dbl>\n```\n:::\n:::\n\nWe can quickly visualize instantaneous speed throughout the run:\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(useful, aes(time, speed, group = segment)) +\n  geom_point() +\n  geom_line(alpha = 0.5) +\n  labs(title = \"Speed throughout example run\",\n       y = \"Speed (mph)\") +\n  theme(axis.title.x = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\nWe can see two short pauses present in the run at around 18:08 and 18:17.\n\nWe're going to use the code above a whole bunch, so we wrap it up into a helper function. I'm not sure that `raster::pointDistance` is the best option for calculating the distance between two points, so we use a `dist_func` argument to make it easy to switch out.\n\n::: {.cell}\n\n```{.r .cell-code}\nget_metrics <- function(gps_df, dist_func = lonlat_dist)  {\n  gps_df |> \n    mutate(x = map2(longitude, latitude, c),\n           x_old = lag(x),\n           t_old = lag(time)) |> \n    slice(-1) |> \n    mutate(rest = as.numeric(time - t_old),\n           new_segment = as.numeric(rest > 3),\n           segment = cumsum(new_segment) + 1) |>\n    group_by(segment) |> \n    slice(-1) |>\n    mutate(seg_length = max(time) - min(t_old),\n           dx = map2_dbl(x, x_old, dist_func),\n           dx = 0.000621371 * dx, \n           dt = rest / 60^2,    \n           speed = dx / dt,       \n           pace = 60 * dt / dx) |>\n    dplyr::select(-x, -x_old, -t_old, -new_segment, -rest) |> \n    ungroup()\n}\n```\n:::\n\nThis means our initial `read_gpx` function is just two lines:\n\n::: {.cell}\n\n```{.r .cell-code}\nread_gpx0 <- function(fname) {\n  gps_df <- gpx::read_gpx(fname)$tracks |> \n    as_tibble() |> \n    unnest() |> \n    janitor::clean_names() |> \n    select(-extensions, -segment_id)\n  \n  get_metrics(gps_df)\n}\n```\n:::\n\nWe can use `profvis::profvis` to create an interactive visualization of how long it takes to read the example file.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(profvis)\n\nprofvis(read_gpx0(fname))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `cols` is now required when using unnest().\nPlease use `cols = c(`analytically slow`)`\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-feb03db856c49600c8b9\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-feb03db856c49600c8b9\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,2,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,7,7,7,7,7,8,9,9,10,10,10,11,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,27,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,30,31,32],\"depth\":[4,3,2,1,1,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,5,4,3,2,1,1,2,1,3,2,1,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,1,1,1],\"label\":[\"doWithOneRestart\",\"withOneRestart\",\"withRestarts\",\".signalSimpleWarning\",\"list\",\"withRestarts\",\".signalSimpleWarning\",\"lapply\",\"docall\",\"withOneRestart\",\"withRestarts\",\".signalSimpleWarning\",\"structure\",\"makeRestart\",\"makeRestartList\",\"withRestarts\",\".signalSimpleWarning\",\"$\",\"withOneRestart\",\"withRestarts\",\".signalSimpleWarning\",\"do.call\",\"docall\",\"withOneRestart\",\"withRestarts\",\".signalSimpleWarning\",\"is.na\",\"withRestarts\",\".signalSimpleWarning\",\"<GC>\",\"withRestarts\",\".signalSimpleWarning\",\"names\",\"match.fun\",\"lapply\",\"docall\",\"withOneRestart\",\"withRestarts\",\".signalSimpleWarning\",\"xml_attrs.xml_node\",\"lapply\",\"xml_attrs.xml_nodeset\",\"rvest::html_attrs\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"xml_find_first.xml_node\",\"FUN\",\"lapply\",\"xml_find_first.xml_nodeset\",\"html_element.default\",\"rvest::html_node\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"xml_text.xml_node\",\"vapply\",\"xml_text.xml_nodeset\",\"rvest::html_text\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"FUN\",\"vapply\",\"xml_attr.xml_nodeset\",\"rvest::html_attr\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"xml_find_first.xml_node\",\"FUN\",\"lapply\",\"xml_find_first.xml_nodeset\",\"html_element.default\",\"rvest::html_node\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"vapply\",\"xml_text.xml_nodeset\",\"rvest::html_text\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"xml_attr.xml_node\",\"vapply\",\"xml_attr.xml_nodeset\",\"rvest::html_attr\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"xml_find_first.xml_node\",\"FUN\",\"lapply\",\"xml_find_first.xml_nodeset\",\"html_element.default\",\"rvest::html_node\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"FUN\",\"vapply\",\"xml_text.xml_nodeset\",\"rvest::html_text\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"xml_find_first.xml_node\",\"FUN\",\"lapply\",\"xml_find_first.xml_nodeset\",\"html_element.default\",\"rvest::html_node\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"[[\",\"lapply\",\"xml_find_first.xml_nodeset\",\"html_element.default\",\"rvest::html_node\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"xml_ns.xml_document\",\"xml_ns.xml_node\",\"xml_ns.xml_nodeset\",\"xml_find_all.xml_nodeset\",\"html_elements.default\",\"rvest::html_nodes\",\"extract_extensions\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"%in%\",\"is_symbolic\",\"vars_select_eval\",\"eval_select_impl\",\"tidyselect::eval_select\",\"unnest.data.frame\",\"unnest\",\"read_gpx0\",\"get_handlers\",\"add_handler\",\"defer\",\"local_bindings\",\"walk_data_tree\",\"reduce_sels\",\"eval_c\",\"walk_data_tree\",\"vars_select_eval\",\"eval_select_impl\",\"tidyselect::eval_select\",\"select.data.frame\",\"read_gpx0\",\"map2\",\"as_string\",\"as_label\",\"caller_arg\",\"arg_match0\",\"endots\",\"enquos\",\"dplyr_quosures\",\"mutate.data.frame\",\"get_metrics\",\"read_gpx0\",\"matrix\",\".pointsToMatrix\",\".fn\",\".f\",\"map2_dbl\",\"standardGeneric\",\"...elt\",\"...elt\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[32.8872909545898,32.8872909545898,32.8872909545898,32.8872909545898,33.132682800293,33.5055389404297,33.5055389404297,33.7550048828125,33.7550048828125,33.7550048828125,33.7550048828125,33.7550048828125,34.1238021850586,34.1238021850586,34.1238021850586,34.1238021850586,34.1238021850586,34.3712005615234,34.3712005615234,34.3712005615234,34.3712005615234,34.7304763793945,34.7304763793945,34.7304763793945,34.7304763793945,34.7304763793945,34.9739837646484,35.339225769043,35.339225769043,35.5010223388672,35.5010223388672,35.5010223388672,32.7673416137695,33.0170364379883,33.0170364379883,33.0170364379883,33.0170364379883,33.0170364379883,33.0170364379883,33.3966674804688,33.3966674804688,33.3966674804688,33.3966674804688,33.3966674804688,33.3966674804688,33.3966674804688,33.3966674804688,33.3966674804688,33.5359878540039,33.5359878540039,33.5359878540039,33.5359878540039,33.5359878540039,33.5359878540039,33.5359878540039,33.5359878540039,33.5359878540039,33.5359878540039,33.5359878540039,33.5359878540039,33.7063522338867,33.7063522338867,33.7063522338867,33.7063522338867,33.7063522338867,33.7063522338867,33.7063522338867,33.7063522338867,33.7063522338867,33.7063522338867,33.8565139770508,33.8565139770508,33.8565139770508,33.8565139770508,33.8565139770508,33.8565139770508,33.8565139770508,33.8565139770508,33.8565139770508,33.8565139770508,33.9931106567383,33.9931106567383,33.9931106567383,33.9931106567383,33.9931106567383,33.9931106567383,33.9931106567383,33.9931106567383,33.9931106567383,33.9931106567383,33.9931106567383,33.9931106567383,34.1533813476562,34.1533813476562,34.1533813476562,34.1533813476562,34.1533813476562,34.1533813476562,34.1533813476562,34.1533813476562,34.1533813476562,37.1330032348633,37.1330032348633,37.1330032348633,37.1330032348633,37.1330032348633,37.1330032348633,37.1330032348633,37.1330032348633,37.1330032348633,37.1330032348633,37.2002716064453,37.2002716064453,37.2002716064453,37.2002716064453,37.2002716064453,37.2002716064453,37.2002716064453,37.2002716064453,37.2002716064453,37.2002716064453,37.2002716064453,37.2002716064453,37.3122863769531,37.3122863769531,37.3122863769531,37.3122863769531,37.3122863769531,37.3122863769531,37.3122863769531,37.3122863769531,37.3122863769531,37.3122863769531,37.4152603149414,37.4152603149414,37.4152603149414,37.4152603149414,37.4152603149414,37.4152603149414,37.4152603149414,37.4152603149414,37.4152603149414,37.4152603149414,37.4152603149414,37.4152603149414,32.8094787597656,32.8094787597656,32.8094787597656,32.8094787597656,32.8094787597656,32.8094787597656,32.8094787597656,32.8094787597656,32.8094787597656,32.8094787597656,32.8094787597656,32.9373550415039,32.9373550415039,32.9373550415039,32.9373550415039,32.9373550415039,32.9373550415039,32.9373550415039,32.9373550415039,32.9373550415039,32.9373550415039,32.9373550415039,32.9373550415039,33.0295562744141,33.0295562744141,33.0295562744141,33.0295562744141,33.0295562744141,33.0295562744141,33.0295562744141,33.0295562744141,33.3588333129883,33.3588333129883,33.3588333129883,33.3588333129883,33.3588333129883,33.3588333129883,33.3588333129883,33.3588333129883,33.3588333129883,33.3588333129883,33.3588333129883,33.3588333129883,33.3588333129883,33.7369079589844,34.4333953857422,34.4333953857422,34.4333953857422,34.4333953857422,34.4333953857422,34.4333953857422,34.4333953857422,34.4333953857422,34.4333953857422,34.4333953857422,35.9052963256836,35.9052963256836,35.9052963256836,35.9052963256836,35.9052963256836,36.8554382324219,38.2840042114258,39.233268737793],\"meminc\":[0,0,0,0,0.245391845703125,0.372856140136719,0,0.249465942382812,0,0,0,0,0.368797302246094,0,0,0,0,0.247398376464844,0,0,0,0.359275817871094,0,0,0,0,0.243507385253906,0.365242004394531,0,0.161796569824219,0,0,-2.73368072509766,0.24969482421875,0,0,0,0,0,0.379631042480469,0,0,0,0,0,0,0,0,0.139320373535156,0,0,0,0,0,0,0,0,0,0,0,0.170364379882812,0,0,0,0,0,0,0,0,0,0.150161743164062,0,0,0,0,0,0,0,0,0,0.1365966796875,0,0,0,0,0,0,0,0,0,0,0,0.160270690917969,0,0,0,0,0,0,0,0,2.97962188720703,0,0,0,0,0,0,0,0,0,0.0672683715820312,0,0,0,0,0,0,0,0,0,0,0,0.112014770507812,0,0,0,0,0,0,0,0,0,0.102973937988281,0,0,0,0,0,0,0,0,0,0,0,-4.60578155517578,0,0,0,0,0,0,0,0,0,0,0.127876281738281,0,0,0,0,0,0,0,0,0,0,0,0.0922012329101562,0,0,0,0,0,0,0,0.329277038574219,0,0,0,0,0,0,0,0,0,0,0,0,0.378074645996094,0.696487426757812,0,0,0,0,0,0,0,0,0,1.47190093994141,0,0,0,0,0.950141906738281,1.42856597900391,0.949264526367188],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/RtmpKrO9Vr/file116331225b630.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nIn the default view, the horizontal axis represents time and the box represents the call stack. All the boxes above `plotKML::readGPX` are functions called by `plotKML::readGPX`. Here it seems like `plotKML::readGPX` takes about 400 milliseconds to run. So about half the time is spent reading in the file, and half calculating metrics. Most of the time calculating metrics is in `raster::pointDistance`, which is fairly up the call stack - you may have to click and drag the plot to see it.\n\n## GPX reader version 1: no more plotKML::GPX\n\nThen I broke my R library and couldn't use `plotKML::readGPX` for a little while. Since GPX files are XML files, I used the `xml2` package as a replacement. `xml2` has a function `as_list` that let me treat the XML as an R list. We extract the relevant portion of the list and `purrr::map_dfr` each GPS recording into a row of a `tibble`.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xml2)\n\nrun_xml <- read_xml(fname)\nrun_list <- as_list(run_xml)\ngps_pts <- run_list$gpx$trk$trkseg\n\nextract_gps_point <- function(point) {\n  tibble(\n    longitude = attr(point, \"lon\"),\n    latitude = attr(point, \"lat\"),\n    ele = point$ele[[1]],\n    time = point$time[[1]]\n  )\n}\n\nmap_dfr(gps_pts, extract_gps_point)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,472 × 4\n   longitude   latitude   ele   time                \n   <chr>       <chr>      <chr> <chr>               \n 1 -95.3978210 29.7169490 14.1  2017-10-31T17:58:22Z\n 2 -95.3977180 29.7168040 14.4  2017-10-31T17:58:29Z\n 3 -95.3976890 29.7167480 14.5  2017-10-31T17:58:30Z\n 4 -95.3976530 29.7167050 14.6  2017-10-31T17:58:31Z\n 5 -95.3976600 29.7166770 14.6  2017-10-31T17:58:32Z\n 6 -95.3976330 29.7166110 14.7  2017-10-31T17:58:33Z\n 7 -95.3976090 29.7165850 14.7  2017-10-31T17:58:34Z\n 8 -95.3975830 29.7165300 14.7  2017-10-31T17:58:36Z\n 9 -95.3975780 29.7164950 14.7  2017-10-31T17:58:37Z\n10 -95.3975630 29.7164510 14.7  2017-10-31T17:58:38Z\n# … with 1,462 more rows\n```\n:::\n:::\n\nThen we wrap this in a function.\n\n::: {.cell}\n\n```{.r .cell-code}\nread_gpx1 <- function(fname) {\n  run_xml <- read_xml(fname)\n  run_list <- as_list(run_xml)\n  \n  extract_gps_point <- function(point) {\n    tibble(\n      longitude = attr(point, \"lon\"),\n      latitude = attr(point, \"lat\"),\n      ele = point$ele[[1]],\n      time = point$time[[1]]\n    )\n  }\n  \n  gps_df <- map_dfr(run_list$gpx$trk$trkseg, extract_gps_point)\n  get_metrics(gps_df)\n}\n```\n:::\n\nThe next part is critical when trying to speed up code: **test that the new code does the same thing as the old code**.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(testthat)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'testthat'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    matches\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:purrr':\n\n    is_null\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:readr':\n\n    edition_get, local_edition\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:tidyr':\n\n    matches\n```\n:::\n\n```{.r .cell-code}\nexpected <- read_gpx0(fname)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `cols` is now required when using unnest().\nPlease use `cols = c(`analytically slow`)`\n```\n:::\n\n```{.r .cell-code}\nresult_1 <- read_gpx1(fname)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `mutate()`:\n! Problem while computing `rest = as.numeric(time - t_old)`.\nCaused by error in `time - t_old`:\n! non-numeric argument to binary operator\n```\n:::\n\n```{.r .cell-code}\n# silence means everything went well\nexpect_equal(expected, result_1)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval_bare(expr, quo_get_env(quo)): object 'result_1' not found\n```\n:::\n:::\n\nThis turned out to be too slow, so we profile and see which lines are taking the most amount of time.\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis(read_gpx1(fname))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nprofvis: code exited with error:\nProblem while computing `rest = as.numeric(time - t_old)`.\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-0cb6b6e23fe547d30d0a\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-0cb6b6e23fe547d30d0a\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,38,39,39,39,39,39,39,39,39,39,39,39,39,39,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,43,43,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,50,50,51,52,52,52,52,52,52,52,52,52,52,52,52,52,53,54,54,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,60,60,60,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,61,61,61,62,62,62,62,62,63,63,63,63,63,63,63,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,72,73,74,74,74,74,74,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,85,85,85,85,87,87,87,87,87,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,95,95,95,95,96,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,100,101,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,106,106,106,106,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,108,108,108,108,108,108,108,108,109,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,112,112,112,112,112,113,113,113,113,113,113,113,113,113,114,114,114,114,114,114,114,114,114,114,114,114,114,114,115,115,115,115,115,115,115,115,116,116,116,116,116,116,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,117,117,117,117,118,118,118,118,118,118,118,118,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,122,123,123,123,123,123,123,123,123,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124],\"depth\":[12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,1,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,1,13,12,11,10,9,8,7,6,5,4,3,2,1,1,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,1,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,1,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,1,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,1,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1],\"label\":[\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"FUN\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"structure\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"as_list\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"is.na\",\"[[\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_type\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"structure\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"%in%\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"isTRUE\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"[[\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"as_list\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"$\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"FUN\",\"vapply\",\"xml_name.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"structure\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"as.list\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"c\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_attrs\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_attrs\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"as_list\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"trim\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"names2\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"new.env\",\"new_environment\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"map2\",\"imap\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"eval_tidy\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"is.list\",\"isTRUE\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"new_tibble\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"lapply\",\"map\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"match.fun\",\"vapply\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".External\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"list\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"as.list\",\"alist\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"NextMethod\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vec_is_vector\",\"vec_is\",\"FUN\",\"vapply\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"<Anonymous>\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"new_tibble\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"eval\",\"eval\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"%||%\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"trim\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"lapply\",\"map\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"paste0\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"environment\",\"vec_size\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".External2\",\"any\",\"integer\",\"recycle_columns\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"as.symbol\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"eval\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"set_names\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"map2\",\"imap\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"integer\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"NextMethod\",\"[.quosures\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"match.fun\",\"vapply\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"<Anonymous>\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"arg_match0\",\"exprs_auto_name\",\"quos_auto_name\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"%||%\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"eval\",\"eval\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"isTRUE\",\"which\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"eval\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"[[\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".External2\",\"expr_type_of\",\"switch_expr\",\"quo_squash_impl\",\"quo_squash\",\"as_label\",\"caller_arg\",\"arg_match0\",\"exprs_auto_name\",\"quos_auto_name\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".Call\",\".External2\",\"replace\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"recycle_columns\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"as.list\",\"alist\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"is.factor\",\"grepl\",\"has_newline\",\"trim\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"names2\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"length\",\"<GC>\",\"eval_tidy\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"as_glue\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"quo_squash\",\"as_label\",\"caller_arg\",\"arg_match0\",\"exprs_auto_name\",\"quos_auto_name\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"is_integerish\",\"new_tibble\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"set_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"add_to_env\",\"add_to_env2\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"as.list\",\"alist\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"is.data.frame\",\"FUN\",\"vapply\",\".rlang_purrr_map_mold\",\"map_lgl\",\"dplyr::bind_rows\",\"map_dfr\",\"read_gpx1\",\".External2\",\"ns_env_name\",\"<Anonymous>\",\"mapply\",\"map2\",\"trace_back\",\"abort\",\"h\",\".handleSimpleError\",\"$\",\"clii__container_start\",\"clii_div\",\"<Anonymous>\",\"cli__fmt\",\"fmt\",\"cli::format_message\",\".rlang_cli_format_inline\",\"format_code\",\"format_error_call\",\"cnd_message_format_prefixed\",\"cnd_message\",\"conditionMessage.rlang_error\",\"signalCondition\",\"signal_abort\",\"abort\",\"h\",\".handleSimpleError\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[34.7836303710938,34.7836303710938,34.7836303710938,34.7836303710938,34.7836303710938,34.7836303710938,34.7836303710938,34.7836303710938,34.7836303710938,34.7836303710938,34.7836303710938,34.7836303710938,34.9549407958984,34.9549407958984,34.9549407958984,34.9549407958984,34.9549407958984,34.9549407958984,34.9549407958984,34.9549407958984,34.9549407958984,34.9549407958984,34.9549407958984,34.9549407958984,34.9549407958984,34.9549407958984,34.9549407958984,34.9549407958984,34.9549407958984,35.2159576416016,35.2159576416016,35.2159576416016,35.2159576416016,35.2159576416016,35.2159576416016,35.2159576416016,35.2159576416016,35.2159576416016,35.2159576416016,35.2159576416016,35.2159576416016,35.2159576416016,35.2159576416016,35.2159576416016,35.2159576416016,35.2159576416016,35.2159576416016,35.2159576416016,35.2159576416016,35.2159576416016,35.3886795043945,35.3886795043945,35.3886795043945,35.3886795043945,35.3886795043945,35.3886795043945,35.3886795043945,35.3886795043945,35.3886795043945,35.3886795043945,35.3886795043945,35.6490325927734,35.8234329223633,35.8234329223633,35.8234329223633,35.8234329223633,35.8234329223633,35.8234329223633,35.8234329223633,35.8234329223633,35.8234329223633,35.8234329223633,35.8234329223633,35.8234329223633,35.8234329223633,35.8234329223633,36.0845108032227,36.0845108032227,36.0845108032227,36.0845108032227,36.0845108032227,36.0845108032227,36.0845108032227,36.0845108032227,36.0845108032227,36.0845108032227,36.0845108032227,36.0845108032227,36.0845108032227,36.0845108032227,36.0845108032227,36.0845108032227,36.2581329345703,36.2581329345703,36.2581329345703,36.2581329345703,36.2581329345703,36.2581329345703,36.2581329345703,36.2581329345703,36.2581329345703,36.2581329345703,36.2581329345703,36.2581329345703,36.2581329345703,36.2581329345703,36.2581329345703,36.2581329345703,36.2581329345703,36.5100784301758,36.5100784301758,36.5100784301758,36.5100784301758,36.5100784301758,36.5100784301758,36.5100784301758,36.5100784301758,36.5100784301758,36.5100784301758,36.5100784301758,36.5100784301758,36.674446105957,36.674446105957,36.674446105957,36.674446105957,36.674446105957,36.674446105957,36.674446105957,36.674446105957,36.674446105957,36.674446105957,36.674446105957,36.674446105957,36.674446105957,36.674446105957,36.674446105957,36.925407409668,36.925407409668,36.925407409668,36.925407409668,36.925407409668,36.925407409668,36.925407409668,36.925407409668,36.925407409668,36.925407409668,36.925407409668,36.925407409668,36.925407409668,36.925407409668,36.925407409668,36.925407409668,37.0822448730469,37.0822448730469,37.0822448730469,37.0822448730469,37.0822448730469,37.0822448730469,37.0822448730469,37.0822448730469,37.0822448730469,37.0822448730469,37.0822448730469,37.0822448730469,37.0822448730469,37.0822448730469,37.0822448730469,37.0822448730469,37.0822448730469,37.0822448730469,37.2997894287109,37.2997894287109,37.2997894287109,37.2997894287109,37.2997894287109,37.2997894287109,37.2997894287109,37.2997894287109,37.2997894287109,37.2997894287109,37.2997894287109,37.2997894287109,37.2997894287109,37.2997894287109,37.2997894287109,37.2997894287109,37.2997894287109,37.2997894287109,37.2997894287109,37.2997894287109,37.2997894287109,37.4437408447266,37.4437408447266,37.4437408447266,37.4437408447266,37.4437408447266,37.4437408447266,37.4437408447266,37.4437408447266,37.4437408447266,37.4437408447266,37.4437408447266,37.6655883789062,37.6655883789062,37.6655883789062,37.6655883789062,37.6655883789062,37.6655883789062,37.6655883789062,37.6655883789062,37.6655883789062,37.6655883789062,37.6655883789062,37.6655883789062,37.6655883789062,37.6655883789062,37.8139495849609,37.8139495849609,37.8139495849609,37.8139495849609,37.8139495849609,37.8139495849609,37.8139495849609,37.8139495849609,37.8139495849609,37.8139495849609,37.8139495849609,37.8139495849609,37.8139495849609,37.8139495849609,38.0362777709961,38.0362777709961,38.0362777709961,38.0362777709961,38.0362777709961,38.0362777709961,38.0362777709961,38.0362777709961,38.0362777709961,38.0362777709961,38.0362777709961,38.0362777709961,38.0362777709961,38.0362777709961,38.0362777709961,38.0362777709961,38.0362777709961,38.0362777709961,38.0362777709961,38.0362777709961,38.1836242675781,38.1836242675781,38.1836242675781,38.1836242675781,38.1836242675781,38.1836242675781,38.1836242675781,38.1836242675781,38.1836242675781,38.1836242675781,38.1836242675781,38.1836242675781,38.1836242675781,38.1836242675781,38.4073028564453,38.4073028564453,38.4073028564453,38.4073028564453,38.4073028564453,38.4073028564453,38.4073028564453,38.4073028564453,38.4073028564453,38.4073028564453,38.4073028564453,38.4073028564453,38.4073028564453,38.4073028564453,38.4073028564453,38.5546569824219,38.5546569824219,38.5546569824219,38.5546569824219,38.5546569824219,38.5546569824219,38.5546569824219,38.5546569824219,38.5546569824219,38.5546569824219,38.5546569824219,38.5546569824219,38.5546569824219,38.5546569824219,38.5546569824219,38.5546569824219,38.5546569824219,38.5546569824219,38.5546569824219,34.3423156738281,34.3423156738281,34.3423156738281,34.3423156738281,34.3423156738281,34.3423156738281,34.3423156738281,34.3423156738281,34.3423156738281,34.3423156738281,34.3423156738281,34.3423156738281,34.3423156738281,34.3423156738281,34.5173263549805,34.7773590087891,34.7773590087891,34.7773590087891,34.7773590087891,34.7773590087891,34.7773590087891,34.7773590087891,34.7773590087891,34.7773590087891,34.7773590087891,34.7773590087891,34.7773590087891,34.7773590087891,34.7773590087891,34.7773590087891,34.7773590087891,34.7773590087891,34.7773590087891,34.7773590087891,34.7773590087891,34.9506301879883,34.9506301879883,34.9506301879883,34.9506301879883,34.9506301879883,34.9506301879883,34.9506301879883,34.9506301879883,34.9506301879883,34.9506301879883,34.9506301879883,34.9506301879883,34.9506301879883,34.9506301879883,34.9506301879883,34.9506301879883,34.9506301879883,35.2122650146484,35.2122650146484,35.2122650146484,35.2122650146484,35.2122650146484,35.2122650146484,35.2122650146484,35.2122650146484,35.2122650146484,35.2122650146484,35.2122650146484,35.2122650146484,35.2122650146484,35.2122650146484,35.2122650146484,35.3855361938477,35.3855361938477,35.3855361938477,35.3855361938477,35.3855361938477,35.3855361938477,35.3855361938477,35.3855361938477,35.3855361938477,35.3855361938477,35.3855361938477,35.3855361938477,35.3855361938477,35.3855361938477,35.3855361938477,35.3855361938477,35.3855361938477,35.3855361938477,35.6455001831055,35.6455001831055,35.6455001831055,35.6455001831055,35.6455001831055,35.6455001831055,35.6455001831055,35.6455001831055,35.6455001831055,35.6455001831055,35.6455001831055,35.6455001831055,35.8191604614258,35.8191604614258,35.8191604614258,35.8191604614258,35.8191604614258,35.8191604614258,35.8191604614258,35.8191604614258,35.8191604614258,35.8191604614258,35.8191604614258,35.8191604614258,35.8191604614258,35.8191604614258,36.0789184570312,36.0789184570312,36.0789184570312,36.0789184570312,36.0789184570312,36.0789184570312,36.0789184570312,36.0789184570312,36.0789184570312,36.0789184570312,36.0789184570312,36.0789184570312,36.0789184570312,36.0789184570312,36.0789184570312,36.0789184570312,36.0789184570312,36.2536544799805,36.2536544799805,36.2536544799805,36.2536544799805,36.2536544799805,36.2536544799805,36.2536544799805,36.2536544799805,36.2536544799805,36.2536544799805,36.5038757324219,36.5038757324219,36.5038757324219,36.5038757324219,36.5038757324219,36.5038757324219,36.5038757324219,36.5038757324219,36.5038757324219,36.5038757324219,36.5038757324219,36.5038757324219,36.5038757324219,36.6374053955078,36.6374053955078,36.6374053955078,36.6374053955078,36.6374053955078,36.6374053955078,36.6374053955078,36.6374053955078,36.6374053955078,36.6374053955078,36.6374053955078,36.6374053955078,36.6374053955078,36.6374053955078,36.8383407592773,36.8383407592773,36.8383407592773,36.8383407592773,36.8383407592773,36.8383407592773,36.8383407592773,36.8383407592773,36.8383407592773,36.8383407592773,36.8383407592773,36.8383407592773,36.8383407592773,36.9725112915039,36.9725112915039,36.9725112915039,36.9725112915039,36.9725112915039,36.9725112915039,36.9725112915039,37.174690246582,37.174690246582,37.174690246582,37.174690246582,37.174690246582,37.174690246582,37.174690246582,37.174690246582,37.3080291748047,37.3080291748047,37.3080291748047,37.3080291748047,37.3080291748047,37.3080291748047,37.3080291748047,37.3080291748047,37.3080291748047,37.5089569091797,37.5089569091797,37.5089569091797,37.5089569091797,37.5089569091797,37.5089569091797,37.5089569091797,37.6425399780273,37.8432769775391,37.8432769775391,37.8432769775391,37.8432769775391,37.8432769775391,37.8432769775391,37.8432769775391,37.8432769775391,37.8432769775391,37.8432769775391,37.8432769775391,37.8432769775391,37.8432769775391,38.1777725219727,38.1777725219727,38.1777725219727,38.1777725219727,38.1777725219727,38.1777725219727,38.1777725219727,38.1777725219727,38.1777725219727,38.1777725219727,38.1777725219727,38.1777725219727,38.1777725219727,38.1777725219727,38.3011779785156,38.3011779785156,38.3011779785156,38.3011779785156,38.3011779785156,38.3011779785156,38.3011779785156,34.5271911621094,34.5271911621094,34.5271911621094,34.5271911621094,34.5271911621094,34.5271911621094,34.5271911621094,34.5271911621094,34.5271911621094,34.5271911621094,34.5271911621094,34.5271911621094,34.663215637207,34.663215637207,34.663215637207,34.663215637207,34.663215637207,34.8674697875977,34.8674697875977,34.8674697875977,34.8674697875977,34.8674697875977,34.8674697875977,34.8674697875977,34.8674697875977,34.8674697875977,34.8674697875977,35.0035629272461,35.0035629272461,35.0035629272461,35.0035629272461,35.0035629272461,35.0035629272461,35.0035629272461,35.0035629272461,35.0035629272461,35.0035629272461,35.0035629272461,35.0035629272461,35.0035629272461,35.2097473144531,35.2097473144531,35.2097473144531,35.2097473144531,35.2097473144531,35.2097473144531,35.2097473144531,35.2097473144531,35.2097473144531,35.2097473144531,35.2097473144531,35.3464965820312,35.3464965820312,35.3464965820312,35.3464965820312,35.3464965820312,35.3464965820312,35.3464965820312,35.3464965820312,35.3464965820312,35.3464965820312,35.3464965820312,35.3464965820312,35.3464965820312,35.3464965820312,35.3464965820312,35.5521469116211,35.5521469116211,35.5521469116211,35.5521469116211,35.5521469116211,35.5521469116211,35.5521469116211,35.5521469116211,35.5521469116211,35.5521469116211,35.5521469116211,35.6878051757812,35.6878051757812,35.6878051757812,35.6878051757812,35.6878051757812,35.6878051757812,35.6878051757812,35.6878051757812,35.6878051757812,35.6878051757812,35.6878051757812,35.6878051757812,35.8923416137695,36.0287094116211,36.0287094116211,36.0287094116211,36.0287094116211,36.0287094116211,36.0287094116211,36.0287094116211,36.0287094116211,36.0287094116211,36.0287094116211,36.0287094116211,36.0287094116211,36.0287094116211,36.2265853881836,36.360710144043,36.360710144043,36.360710144043,36.360710144043,36.360710144043,36.360710144043,36.360710144043,36.360710144043,36.360710144043,36.360710144043,36.360710144043,36.360710144043,36.5632476806641,36.5632476806641,36.5632476806641,36.5632476806641,36.5632476806641,36.5632476806641,36.5632476806641,36.5632476806641,36.5632476806641,36.5632476806641,36.5632476806641,36.5632476806641,36.5632476806641,36.5632476806641,36.6980361938477,36.6980361938477,36.6980361938477,36.6980361938477,36.6980361938477,36.6980361938477,36.6980361938477,36.9011306762695,36.9011306762695,36.9011306762695,36.9011306762695,36.9011306762695,36.9011306762695,36.9011306762695,36.9011306762695,36.9011306762695,36.9011306762695,36.9011306762695,36.9011306762695,36.9011306762695,36.9011306762695,37.0349197387695,37.369987487793,37.369987487793,37.369987487793,37.369987487793,37.369987487793,37.369987487793,37.369987487793,37.369987487793,37.369987487793,37.369987487793,37.369987487793,37.369987487793,37.5704727172852,37.5704727172852,37.5704727172852,37.5704727172852,37.5704727172852,37.5704727172852,37.5704727172852,37.5704727172852,37.5704727172852,37.5704727172852,37.5704727172852,37.5704727172852,37.7045974731445,37.7045974731445,37.7045974731445,37.7045974731445,37.7045974731445,37.9057159423828,37.9057159423828,37.9057159423828,37.9057159423828,37.9057159423828,37.9057159423828,37.9057159423828,38.0398864746094,38.0398864746094,38.0398864746094,38.0398864746094,38.0398864746094,38.0398864746094,34.4600219726562,34.4600219726562,34.4600219726562,34.4600219726562,34.4600219726562,34.4600219726562,34.4600219726562,34.4600219726562,34.4600219726562,34.4600219726562,34.4600219726562,34.4600219726562,34.5934295654297,34.5934295654297,34.5934295654297,34.5934295654297,34.5934295654297,34.5934295654297,34.5934295654297,34.5934295654297,34.5934295654297,34.5934295654297,34.5934295654297,34.5934295654297,34.5934295654297,34.5934295654297,34.5934295654297,34.5934295654297,34.7964019775391,34.7964019775391,34.7964019775391,34.7964019775391,34.7964019775391,34.7964019775391,34.7964019775391,34.9338226318359,34.9338226318359,34.9338226318359,34.9338226318359,34.9338226318359,34.9338226318359,34.9338226318359,34.9338226318359,34.9338226318359,34.9338226318359,34.9338226318359,34.9338226318359,34.9338226318359,35.1415252685547,35.1415252685547,35.1415252685547,35.1415252685547,35.1415252685547,35.1415252685547,35.1415252685547,35.1415252685547,35.1415252685547,35.1415252685547,35.2783966064453,35.2783966064453,35.2783966064453,35.2783966064453,35.2783966064453,35.2783966064453,35.2783966064453,35.2783966064453,35.2783966064453,35.2783966064453,35.2783966064453,35.2783966064453,35.2783966064453,35.4842147827148,35.4842147827148,35.4842147827148,35.4842147827148,35.4842147827148,35.4842147827148,35.4842147827148,35.4842147827148,35.6203384399414,35.8246765136719,35.9615097045898,35.9615097045898,35.9615097045898,35.9615097045898,35.9615097045898,35.9615097045898,35.9615097045898,35.9615097045898,35.9615097045898,35.9615097045898,35.9615097045898,35.9615097045898,35.9615097045898,35.9615097045898,36.1633224487305,36.1633224487305,36.1633224487305,36.1633224487305,36.1633224487305,36.1633224487305,36.1633224487305,36.1633224487305,36.1633224487305,36.1633224487305,36.1633224487305,36.1633224487305,36.1633224487305,36.1633224487305,36.1633224487305,36.2951049804688,36.2951049804688,36.2951049804688,36.2951049804688,36.2951049804688,36.2951049804688,36.2951049804688,36.2951049804688,36.2951049804688,36.2951049804688,36.2951049804688,36.2951049804688,36.2951049804688,36.4973297119141,36.4973297119141,36.4973297119141,36.4973297119141,36.4973297119141,36.4973297119141,36.4973297119141,36.4973297119141,36.4973297119141,36.4973297119141,36.4973297119141,36.4973297119141,36.4973297119141,36.4973297119141,36.6326904296875,36.6326904296875,36.6326904296875,36.6326904296875,36.6326904296875,36.6326904296875,36.6326904296875,36.6326904296875,36.8349609375,36.8349609375,36.8349609375,36.8349609375,36.8349609375,36.8349609375,36.8349609375,36.8349609375,36.8349609375,36.9698486328125,36.9698486328125,36.9698486328125,36.9698486328125,36.9698486328125,36.9698486328125,36.9698486328125,36.9698486328125,36.9698486328125,36.9698486328125,37.1709899902344,37.1709899902344,37.1709899902344,37.1709899902344,37.1709899902344,37.1709899902344,37.1709899902344,37.1709899902344,37.1709899902344,37.1709899902344,37.1709899902344,37.1709899902344,37.1709899902344,37.1709899902344,37.3049697875977,37.3049697875977,37.3049697875977,37.3049697875977,37.3049697875977,37.3049697875977,37.3049697875977,37.3049697875977,37.5080184936523,37.5080184936523,37.5080184936523,37.5080184936523,37.5080184936523,37.5080184936523,37.5080184936523,37.5080184936523,37.5080184936523,37.5080184936523,37.5080184936523,37.5080184936523,37.6420745849609,37.6420745849609,37.6420745849609,37.6420745849609,37.6420745849609,37.6420745849609,37.6420745849609,37.6420745849609,37.6420745849609,37.6420745849609,37.6420745849609,37.6420745849609,37.6420745849609,37.6420745849609,37.8437118530273,37.8437118530273,37.8437118530273,37.8437118530273,37.8437118530273,37.8437118530273,37.8437118530273,37.8437118530273,37.8437118530273,37.8437118530273,37.8437118530273,37.8437118530273,37.8437118530273,38.1791687011719,38.1791687011719,38.1791687011719,38.1791687011719,38.1791687011719,38.1791687011719,38.1791687011719,38.1791687011719,38.1791687011719,38.1791687011719,38.1791687011719,38.1791687011719,38.1791687011719,38.1791687011719,34.5422897338867,34.5422897338867,34.5422897338867,34.5422897338867,34.5422897338867,34.5422897338867,34.5422897338867,34.5422897338867,34.5422897338867,34.7479705810547,34.7479705810547,34.7479705810547,34.7479705810547,34.7479705810547,34.7479705810547,34.7479705810547,34.7479705810547,34.7479705810547,34.7479705810547,34.7479705810547,34.7479705810547,34.7479705810547,34.7479705810547,34.7479705810547,34.8822174072266,34.8822174072266,34.8822174072266,34.8822174072266,34.8822174072266,34.8822174072266,34.8822174072266,34.8822174072266,34.8822174072266,34.8822174072266,34.8822174072266,34.8822174072266,34.8822174072266,34.8822174072266,34.8822174072266,34.8822174072266,35.0881118774414,35.0881118774414,35.0881118774414,35.0881118774414,35.0881118774414,35.0881118774414,35.0881118774414,35.0881118774414,35.0881118774414,35.0881118774414,35.2243347167969,35.2243347167969,35.2243347167969,35.2243347167969,35.2243347167969,35.2243347167969,35.2243347167969,35.2243347167969,35.2243347167969,35.2243347167969,35.2243347167969,35.2243347167969,35.2243347167969,35.4309539794922,35.4309539794922,35.4309539794922,35.4309539794922,35.4309539794922,35.4309539794922,35.4309539794922,35.5676574707031,35.5676574707031,35.5676574707031,35.5676574707031,35.5676574707031,35.5676574707031,35.5676574707031,35.5676574707031,35.5676574707031,35.5676574707031,35.5676574707031,35.5676574707031,35.7731399536133,35.7731399536133,35.7731399536133,35.7731399536133,35.7731399536133,35.7731399536133,35.7731399536133,35.7731399536133,35.7731399536133,35.7731399536133,35.7731399536133,35.9091262817383,36.1132354736328,36.1132354736328,36.1132354736328,36.1132354736328,36.1132354736328,36.1132354736328,36.1132354736328,36.1132354736328,36.1132354736328,36.1132354736328,36.1132354736328,36.1132354736328,36.1132354736328,36.1132354736328,36.1132354736328,36.2461700439453,36.2461700439453,36.2461700439453,36.2461700439453,36.2461700439453,36.2461700439453,36.2461700439453,36.2461700439453,36.2461700439453,36.2461700439453,36.2461700439453,36.4451751708984,36.4451751708984,36.4451751708984,36.4451751708984,36.4451751708984,36.4451751708984,36.579719543457,36.781982421875,36.9149322509766,36.9149322509766,36.9149322509766,36.9149322509766,36.9149322509766,36.9149322509766,36.9149322509766,36.9149322509766,36.9149322509766,36.9149322509766,36.9149322509766,36.9149322509766,36.9149322509766,36.9149322509766,36.9149322509766,37.1151885986328,37.1151885986328,37.1151885986328,37.1151885986328,37.1151885986328,37.1151885986328,37.1151885986328,37.1151885986328,37.1151885986328,37.1151885986328,37.1151885986328,37.1151885986328,37.1151885986328,37.248405456543,37.248405456543,37.248405456543,37.248405456543,37.248405456543,37.248405456543,37.248405456543,37.248405456543,37.248405456543,37.248405456543,37.248405456543,37.248405456543,37.248405456543,37.248405456543,37.4489212036133,37.4489212036133,37.4489212036133,37.4489212036133,37.4489212036133,37.4489212036133,37.4489212036133,37.4489212036133,37.4489212036133,37.4489212036133,37.4489212036133,37.4489212036133,37.4489212036133,37.4489212036133,37.5813674926758,37.5813674926758,37.5813674926758,37.5813674926758,37.5813674926758,37.5813674926758,37.5813674926758,37.5813674926758,37.5813674926758,37.5813674926758,37.5813674926758,37.5813674926758,37.7817001342773,37.7817001342773,37.7817001342773,37.7817001342773,37.7817001342773,37.7817001342773,37.7817001342773,37.7817001342773,37.7817001342773,37.7817001342773,37.7817001342773,37.7817001342773,37.7817001342773,37.7817001342773,37.7817001342773,37.7817001342773,37.9146881103516,37.9146881103516,37.9146881103516,37.9146881103516,37.9146881103516,37.9146881103516,37.9146881103516,37.9146881103516,38.1136627197266,38.2197341918945,38.2197341918945,38.2197341918945,38.2197341918945,38.2197341918945,38.2197341918945,38.2197341918945,38.2197341918945,34.6797180175781,34.6797180175781,34.6797180175781,34.6797180175781,34.6797180175781,34.6797180175781,34.6797180175781,34.6797180175781,34.6797180175781,34.6797180175781,34.6797180175781,34.6797180175781,34.6797180175781,34.8145217895508,34.8145217895508,34.8145217895508,34.8145217895508,34.8145217895508,34.8145217895508,34.8145217895508,34.8145217895508,34.8145217895508,34.8145217895508,34.8145217895508,34.8145217895508,35.0178909301758,35.0178909301758,35.0178909301758,35.0178909301758,35.0178909301758,35.0178909301758,35.0178909301758,35.0178909301758,35.0178909301758,35.153434753418,35.153434753418,35.153434753418,35.153434753418,35.153434753418,35.153434753418,35.153434753418,35.153434753418,35.153434753418,35.153434753418,35.153434753418,35.153434753418,35.153434753418,35.153434753418,35.3574905395508,35.3574905395508,35.3574905395508,35.3574905395508,35.3574905395508,35.3574905395508,35.3574905395508,35.3574905395508,35.494026184082,35.494026184082,35.494026184082,35.494026184082,35.494026184082,35.494026184082,35.494026184082,35.494026184082,35.494026184082,35.494026184082,35.494026184082,35.494026184082,35.494026184082,35.494026184082,35.6966857910156,35.6966857910156,35.6966857910156,35.6966857910156,35.6966857910156,35.6966857910156,35.6966857910156,35.6966857910156,35.6966857910156,35.6966857910156,35.6966857910156,35.6966857910156,35.8307571411133,35.8307571411133,35.8307571411133,35.8307571411133,35.8307571411133,35.8307571411133,35.8307571411133,35.8307571411133,36.0349960327148,36.0349960327148,36.0349960327148,36.0349960327148,36.0349960327148,36.0349960327148,36.0349960327148,36.0349960327148,36.1691970825195,36.1691970825195,36.1691970825195,36.1691970825195,36.1691970825195,36.1691970825195,36.1691970825195,36.1691970825195,36.1691970825195,36.1691970825195,36.1691970825195,36.1691970825195,36.1691970825195,36.1691970825195,36.4284057617188,36.4284057617188,36.4284057617188,36.4284057617188,36.4284057617188,36.4284057617188,36.4284057617188,36.4284057617188,37.3350372314453,38.172004699707,38.172004699707,38.172004699707,38.172004699707,38.172004699707,38.172004699707,38.172004699707,38.172004699707,38.306022644043,38.306022644043,38.306022644043,38.306022644043,38.306022644043,38.306022644043,38.306022644043,38.306022644043,38.306022644043,38.306022644043,38.306022644043,38.306022644043,38.306022644043,38.306022644043,38.306022644043,38.306022644043,38.306022644043,38.306022644043],\"meminc\":[0,0,0,0,0,0,0,0,0,0,0,0,0.171310424804688,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.261016845703125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.172721862792969,0,0,0,0,0,0,0,0,0,0,0.260353088378906,0.174400329589844,0,0,0,0,0,0,0,0,0,0,0,0,0,0.261077880859375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.173622131347656,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.251945495605469,0,0,0,0,0,0,0,0,0,0,0,0.16436767578125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.250961303710938,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.156837463378906,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.217544555664062,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.143951416015625,0,0,0,0,0,0,0,0,0,0,0.221847534179688,0,0,0,0,0,0,0,0,0,0,0,0,0,0.148361206054688,0,0,0,0,0,0,0,0,0,0,0,0,0,0.222328186035156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.147346496582031,0,0,0,0,0,0,0,0,0,0,0,0,0,0.223678588867188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.147354125976562,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4.21234130859375,0,0,0,0,0,0,0,0,0,0,0,0,0,0.175010681152344,0.260032653808594,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.173271179199219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.261634826660156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.173271179199219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.259963989257812,0,0,0,0,0,0,0,0,0,0,0,0.173660278320312,0,0,0,0,0,0,0,0,0,0,0,0,0,0.259757995605469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.174736022949219,0,0,0,0,0,0,0,0,0,0.250221252441406,0,0,0,0,0,0,0,0,0,0,0,0,0.133529663085938,0,0,0,0,0,0,0,0,0,0,0,0,0,0.200935363769531,0,0,0,0,0,0,0,0,0,0,0,0,0.134170532226562,0,0,0,0,0,0,0.202178955078125,0,0,0,0,0,0,0,0.133338928222656,0,0,0,0,0,0,0,0,0.200927734375,0,0,0,0,0,0,0.133583068847656,0.200736999511719,0,0,0,0,0,0,0,0,0,0,0,0,0.334495544433594,0,0,0,0,0,0,0,0,0,0,0,0,0,0.123405456542969,0,0,0,0,0,0,-3.77398681640625,0,0,0,0,0,0,0,0,0,0,0,0.136024475097656,0,0,0,0,0.204254150390625,0,0,0,0,0,0,0,0,0,0.136093139648438,0,0,0,0,0,0,0,0,0,0,0,0,0.206184387207031,0,0,0,0,0,0,0,0,0,0,0.136749267578125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.205650329589844,0,0,0,0,0,0,0,0,0,0,0.135658264160156,0,0,0,0,0,0,0,0,0,0,0,0.204536437988281,0.136367797851562,0,0,0,0,0,0,0,0,0,0,0,0,0.1978759765625,0.134124755859375,0,0,0,0,0,0,0,0,0,0,0,0.202537536621094,0,0,0,0,0,0,0,0,0,0,0,0,0,0.134788513183594,0,0,0,0,0,0,0.203094482421875,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1337890625,0.335067749023438,0,0,0,0,0,0,0,0,0,0,0,0.200485229492188,0,0,0,0,0,0,0,0,0,0,0,0.134124755859375,0,0,0,0,0.201118469238281,0,0,0,0,0,0,0.134170532226562,0,0,0,0,0,-3.57986450195312,0,0,0,0,0,0,0,0,0,0,0,0.133407592773438,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.202972412109375,0,0,0,0,0,0,0.137420654296875,0,0,0,0,0,0,0,0,0,0,0,0,0.20770263671875,0,0,0,0,0,0,0,0,0,0.136871337890625,0,0,0,0,0,0,0,0,0,0,0,0,0.205818176269531,0,0,0,0,0,0,0,0.136123657226562,0.204338073730469,0.136833190917969,0,0,0,0,0,0,0,0,0,0,0,0,0,0.201812744140625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.131782531738281,0,0,0,0,0,0,0,0,0,0,0,0,0.202224731445312,0,0,0,0,0,0,0,0,0,0,0,0,0,0.135360717773438,0,0,0,0,0,0,0,0.2022705078125,0,0,0,0,0,0,0,0,0.1348876953125,0,0,0,0,0,0,0,0,0,0.201141357421875,0,0,0,0,0,0,0,0,0,0,0,0,0,0.133979797363281,0,0,0,0,0,0,0,0.203048706054688,0,0,0,0,0,0,0,0,0,0,0,0.134056091308594,0,0,0,0,0,0,0,0,0,0,0,0,0,0.201637268066406,0,0,0,0,0,0,0,0,0,0,0,0,0.335456848144531,0,0,0,0,0,0,0,0,0,0,0,0,0,-3.63687896728516,0,0,0,0,0,0,0,0,0.205680847167969,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.134246826171875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.205894470214844,0,0,0,0,0,0,0,0,0,0.136222839355469,0,0,0,0,0,0,0,0,0,0,0,0,0.206619262695312,0,0,0,0,0,0,0.136703491210938,0,0,0,0,0,0,0,0,0,0,0,0.205482482910156,0,0,0,0,0,0,0,0,0,0,0.135986328125,0.204109191894531,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1329345703125,0,0,0,0,0,0,0,0,0,0,0.199005126953125,0,0,0,0,0,0.134544372558594,0.202262878417969,0.132949829101562,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.20025634765625,0,0,0,0,0,0,0,0,0,0,0,0,0.133216857910156,0,0,0,0,0,0,0,0,0,0,0,0,0,0.200515747070312,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1324462890625,0,0,0,0,0,0,0,0,0,0,0,0.200332641601562,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.132987976074219,0,0,0,0,0,0,0,0.198974609375,0.106071472167969,0,0,0,0,0,0,0,-3.54001617431641,0,0,0,0,0,0,0,0,0,0,0,0,0.134803771972656,0,0,0,0,0,0,0,0,0,0,0,0.203369140625,0,0,0,0,0,0,0,0,0.135543823242188,0,0,0,0,0,0,0,0,0,0,0,0,0,0.204055786132812,0,0,0,0,0,0,0,0.13653564453125,0,0,0,0,0,0,0,0,0,0,0,0,0,0.202659606933594,0,0,0,0,0,0,0,0,0,0,0,0.134071350097656,0,0,0,0,0,0,0,0.204238891601562,0,0,0,0,0,0,0,0.134201049804688,0,0,0,0,0,0,0,0,0,0,0,0,0,0.259208679199219,0,0,0,0,0,0,0,0.906631469726562,0.836967468261719,0,0,0,0,0,0,0,0.134017944335938,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/RtmpKrO9Vr/file1163322975f10.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nHere we see that we spend most of our time on the functions `as_list` and `tibble`.\n\n# GPX reader version 2: no more tibble\n\n`tibble`s are somewhat heavy objects, and we can bind lists together instead of `tibble`s, so let's try that next. We only change one line from `read_gpx1`.\n\n::: {.cell}\n\n```{.r .cell-code}\nread_gpx2 <- function(fname) {\n  run_xml <- read_xml(fname)\n  run_list <- as_list(run_xml)\n  \n  extract_gps_point <- function(point) {\n    list(longitude = attr(point, \"lon\"),\n         latitude = attr(point, \"lat\"),\n         ele = point$ele[[1]],\n         time = point$time[[1]])\n  }\n  \n  gps_df <- map_dfr(run_list$gpx$trk$trkseg, extract_gps_point)\n  get_metrics(gps_df)\n}\n\nresult_2 <- read_gpx2(fname)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `mutate()`:\n! Problem while computing `rest = as.numeric(time - t_old)`.\nCaused by error in `time - t_old`:\n! non-numeric argument to binary operator\n```\n:::\n\n```{.r .cell-code}\nexpect_equal(expected, result_2)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval_bare(expr, quo_get_env(quo)): object 'result_2' not found\n```\n:::\n:::\n\nOur results are still as expected, which is good.  We profile again to see if we've done any better, which we have. Now we're at about 1.5 seconds instead of 2.5 seconds.\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis(read_gpx2(fname))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nprofvis: code exited with error:\nProblem while computing `rest = as.numeric(time - t_old)`.\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-e09e32781a141dd187fb\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-e09e32781a141dd187fb\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,30,30,30,31,31,31,31,31,31,32,32,32,32,32,32,32,33,33,33,33,33,33,33,34],\"depth\":[14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,1],\"label\":[\"$\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"structure\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"match.fun\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"length\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"match.fun\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"isTRUE\",\"xml_text.xml_node\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"match.fun\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_name\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_to_r_attrs\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"any\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"isTRUE\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"c\",\"xml_attrs\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"nodeset_apply\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"vapply\",\"xml_name.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"[[\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"structure\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"nodeset_apply\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"structure\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"as_list\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"nodeset_apply\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"FUN\",\"vapply\",\"xml_name.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"detect_void_name\",\"is_named\",\"<Anonymous>\",\"FUN\",\"lapply\",\"map\",\"dplyr::bind_rows\",\"map_dfr\",\"read_gpx2\",\"vctrs::data_frame\",\"FUN\",\"lapply\",\"map\",\"dplyr::bind_rows\",\"map_dfr\",\"read_gpx2\",\"FUN\",\"lapply\",\"map\",\"trace_back\",\"abort\",\"h\",\".handleSimpleError\",\".External2\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[34.8627014160156,34.8627014160156,34.8627014160156,34.8627014160156,34.8627014160156,34.8627014160156,34.8627014160156,34.8627014160156,34.8627014160156,34.8627014160156,34.8627014160156,34.8627014160156,34.8627014160156,34.8627014160156,35.0376281738281,35.0376281738281,35.0376281738281,35.0376281738281,35.0376281738281,35.0376281738281,35.0376281738281,35.0376281738281,35.0376281738281,35.0376281738281,35.0376281738281,35.0376281738281,35.0376281738281,35.0376281738281,35.0376281738281,35.3002471923828,35.3002471923828,35.3002471923828,35.3002471923828,35.3002471923828,35.3002471923828,35.3002471923828,35.3002471923828,35.3002471923828,35.3002471923828,35.3002471923828,35.3002471923828,35.3002471923828,35.3002471923828,35.3002471923828,35.3002471923828,35.3002471923828,35.3002471923828,35.4750366210938,35.4750366210938,35.4750366210938,35.4750366210938,35.4750366210938,35.4750366210938,35.4750366210938,35.4750366210938,35.4750366210938,35.4750366210938,35.4750366210938,35.4750366210938,35.4750366210938,35.4750366210938,35.4750366210938,35.4750366210938,35.4750366210938,35.4750366210938,35.4750366210938,35.4750366210938,35.7357406616211,35.7357406616211,35.7357406616211,35.7357406616211,35.7357406616211,35.7357406616211,35.7357406616211,35.7357406616211,35.7357406616211,35.7357406616211,35.7357406616211,35.7357406616211,35.7357406616211,35.7357406616211,35.909912109375,35.909912109375,35.909912109375,35.909912109375,35.909912109375,35.909912109375,35.909912109375,35.909912109375,35.909912109375,35.909912109375,35.909912109375,35.909912109375,35.909912109375,35.909912109375,36.1707000732422,36.1707000732422,36.1707000732422,36.1707000732422,36.1707000732422,36.1707000732422,36.1707000732422,36.1707000732422,36.1707000732422,36.1707000732422,36.1707000732422,36.1707000732422,36.1707000732422,36.1707000732422,36.1707000732422,36.3449325561523,36.3449325561523,36.3449325561523,36.3449325561523,36.3449325561523,36.3449325561523,36.3449325561523,36.3449325561523,36.3449325561523,36.3449325561523,36.3449325561523,36.3449325561523,36.3449325561523,36.3449325561523,36.3449325561523,36.3449325561523,36.6066284179688,36.6066284179688,36.6066284179688,36.6066284179688,36.6066284179688,36.6066284179688,36.6066284179688,36.6066284179688,36.6066284179688,36.6066284179688,36.6066284179688,36.6066284179688,36.6066284179688,36.6066284179688,36.6066284179688,36.6066284179688,36.6066284179688,36.6066284179688,36.6066284179688,36.7800064086914,36.7800064086914,36.7800064086914,36.7800064086914,36.7800064086914,36.7800064086914,36.7800064086914,36.7800064086914,36.7800064086914,36.7800064086914,36.7800064086914,36.7800064086914,36.7800064086914,36.7800064086914,37.0382614135742,37.0382614135742,37.0382614135742,37.0382614135742,37.0382614135742,37.0382614135742,37.0382614135742,37.0382614135742,37.0382614135742,37.0382614135742,37.0382614135742,37.0382614135742,37.0382614135742,37.0382614135742,37.0382614135742,37.0382614135742,37.0382614135742,37.2100830078125,37.2100830078125,37.2100830078125,37.2100830078125,37.2100830078125,37.2100830078125,37.2100830078125,37.2100830078125,37.2100830078125,37.2100830078125,37.2100830078125,37.2100830078125,37.4700469970703,37.4700469970703,37.4700469970703,37.4700469970703,37.4700469970703,37.4700469970703,37.4700469970703,37.4700469970703,37.4700469970703,37.4700469970703,37.4700469970703,37.4700469970703,37.4700469970703,37.4700469970703,37.4700469970703,37.6432266235352,37.6432266235352,37.6432266235352,37.6432266235352,37.6432266235352,37.6432266235352,37.6432266235352,37.6432266235352,37.6432266235352,37.6432266235352,37.6432266235352,37.6432266235352,37.6432266235352,37.6432266235352,37.6432266235352,37.6432266235352,37.9021453857422,38.0758209228516,38.0758209228516,38.0758209228516,38.0758209228516,38.0758209228516,38.0758209228516,38.0758209228516,38.0758209228516,38.0758209228516,38.0758209228516,38.0758209228516,38.0758209228516,38.0758209228516,38.0758209228516,38.3353424072266,38.3353424072266,38.3353424072266,38.3353424072266,38.3353424072266,38.3353424072266,38.3353424072266,38.3353424072266,38.3353424072266,38.3353424072266,38.3353424072266,38.3353424072266,38.3353424072266,38.3353424072266,38.3353424072266,38.5079803466797,38.7569046020508,38.7569046020508,38.7569046020508,38.7569046020508,38.7569046020508,38.7569046020508,38.7569046020508,38.7569046020508,38.7569046020508,38.7569046020508,38.7569046020508,38.7569046020508,38.7569046020508,38.7569046020508,38.7569046020508,34.4792022705078,34.4792022705078,34.4792022705078,34.4792022705078,34.4792022705078,34.4792022705078,34.4792022705078,34.4792022705078,34.4792022705078,34.4792022705078,34.4792022705078,34.4792022705078,34.4792022705078,34.4792022705078,34.4792022705078,34.4792022705078,34.4792022705078,34.4792022705078,34.4792022705078,34.7411270141602,34.7411270141602,34.7411270141602,34.7411270141602,34.7411270141602,34.7411270141602,34.7411270141602,34.7411270141602,34.7411270141602,34.7411270141602,34.7411270141602,34.7411270141602,34.7411270141602,34.9155960083008,34.9155960083008,34.9155960083008,34.9155960083008,34.9155960083008,34.9155960083008,34.9155960083008,34.9155960083008,34.9155960083008,34.9155960083008,34.9155960083008,34.9155960083008,34.9155960083008,35.1783905029297,35.1783905029297,35.1783905029297,35.1783905029297,35.1783905029297,35.1783905029297,35.1783905029297,35.1783905029297,35.1783905029297,35.1783905029297,35.1783905029297,35.1783905029297,35.1783905029297,35.1783905029297,35.3533477783203,35.3533477783203,35.3533477783203,35.3533477783203,35.3533477783203,35.3533477783203,35.3533477783203,35.3533477783203,35.3533477783203,35.3533477783203,35.3533477783203,35.3533477783203,35.3533477783203,35.3533477783203,35.3533477783203,35.3533477783203,35.3533477783203,35.3533477783203,35.3533477783203,35.3533477783203,35.3533477783203,35.6145324707031,35.6145324707031,35.6145324707031,35.6145324707031,35.6145324707031,35.6145324707031,35.6145324707031,35.6145324707031,35.6145324707031,35.6145324707031,35.6145324707031,35.6145324707031,35.6145324707031,35.6145324707031,35.6145324707031,35.6145324707031,35.6145324707031,35.6145324707031,35.6145324707031,35.788932800293,35.788932800293,35.788932800293,35.788932800293,35.788932800293,35.788932800293,35.788932800293,35.788932800293,35.788932800293,35.788932800293,35.788932800293,35.788932800293,35.788932800293,35.788932800293,35.788932800293,35.788932800293,35.788932800293,35.788932800293,35.788932800293,35.788932800293,35.788932800293,36.0486602783203,36.0486602783203,36.0486602783203,36.0486602783203,36.0486602783203,36.0486602783203,36.0486602783203,36.0486602783203,36.0486602783203,36.0486602783203,36.0486602783203,36.2229156494141,36.2229156494141,36.2229156494141,36.2229156494141,36.2229156494141,36.2229156494141,36.2229156494141,36.2229156494141,36.2229156494141,36.2229156494141,36.2229156494141,36.2229156494141,36.2229156494141,36.4646148681641,36.4646148681641,36.4646148681641,36.4646148681641,36.4646148681641,36.4646148681641,36.4646148681641,36.4646148681641,36.4646148681641,36.4646148681641,36.4646148681641,36.7483062744141,36.7483062744141,36.7483062744141,37.2130584716797,37.2130584716797,37.2130584716797,37.2130584716797,37.2130584716797,37.2130584716797,38.1997451782227,38.1997451782227,38.1997451782227,38.1997451782227,38.1997451782227,38.1997451782227,38.1997451782227,39.8991546630859,39.8991546630859,39.8991546630859,39.8991546630859,39.8991546630859,39.8991546630859,39.8991546630859,40.0256805419922],\"meminc\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1749267578125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.262619018554688,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.174789428710938,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.260704040527344,0,0,0,0,0,0,0,0,0,0,0,0,0,0.174171447753906,0,0,0,0,0,0,0,0,0,0,0,0,0,0.260787963867188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.174232482910156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.261695861816406,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.173377990722656,0,0,0,0,0,0,0,0,0,0,0,0,0,0.258255004882812,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.171821594238281,0,0,0,0,0,0,0,0,0,0,0,0.259963989257812,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.173179626464844,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.258918762207031,0.173675537109375,0,0,0,0,0,0,0,0,0,0,0,0,0,0.259521484375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.172637939453125,0.248924255371094,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4.27770233154297,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.261924743652344,0,0,0,0,0,0,0,0,0,0,0,0,0.174468994140625,0,0,0,0,0,0,0,0,0,0,0,0,0.262794494628906,0,0,0,0,0,0,0,0,0,0,0,0,0,0.174957275390625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.261184692382812,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.174400329589844,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.259727478027344,0,0,0,0,0,0,0,0,0,0,0.17425537109375,0,0,0,0,0,0,0,0,0,0,0,0,0.24169921875,0,0,0,0,0,0,0,0,0,0,0.28369140625,0,0,0.464752197265625,0,0,0,0,0,0.986686706542969,0,0,0,0,0,0,1.69940948486328,0,0,0,0,0,0,0.12652587890625],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/RtmpKrO9Vr/file1163360ba4b24.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nI needed to this for about fifty files though, so this was still slow enough to be somewhat frustrating. Now `xml2::as_list` is really killing us. \n\n## GPX reader version 3: now with more xml2\n\nLuckily, we can use `xml2` to manipulate the XML via a fast C package instead. For this next part I tried functions exported by `xml2` until they worked and occasionally read the documentation.\n\n::: {.cell}\n\n```{.r .cell-code}\nread_gpx_xml <- function(fname) {\n  # get the interested nodes\n  run_xml <- read_xml(fname)\n  trk <- xml_child(run_xml, 2)\n  trkseg <- xml_child(trk, 2)\n  trkpts <- xml_children(trkseg)  # nodeset where each node is a GPS reading\n  \n  # get the longitude and latitude for each node\n  latlon_list <- xml_attrs(trkpts)  \n  latlon <- do.call(rbind, latlon_list)\n  \n  # get the time and elevation for each node\n  ele_time_vec <- xml_text(xml_children(trkpts))\n  ele_time <- matrix(ele_time_vec, ncol = 2, byrow = TRUE)\n  colnames(ele_time) <- c(\"ele\", \"time\")\n  \n  as_tibble(cbind(latlon, ele_time))\n}\n\nread_gpx3 <- function(fname) {\n  gps_df <- read_gpx_xml(fname)\n  get_metrics(gps_df)\n}\n\nresult_3 <- read_gpx3(fname)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `mutate()`:\n! Problem while computing `x = map2(longitude, latitude, c)`.\nCaused by error in `map2()`:\n! object 'longitude' not found\n```\n:::\n\n```{.r .cell-code}\nexpect_equal(expected, result_3)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval_bare(expr, quo_get_env(quo)): object 'result_3' not found\n```\n:::\n:::\n\nAgain we see if there's anywhere else we can speed things up:\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis(read_gpx3(fname))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nprofvis: code exited with error:\nProblem while computing `x = map2(longitude, latitude, c)`.\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-7551366c3ae7bf7e3823\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-7551366c3ae7bf7e3823\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],\"depth\":[6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1],\"label\":[\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_children\",\"read_gpx_xml\",\"read_gpx3\",\"FUN\",\"vapply\",\"is.na.xml_nodeset\",\"nodeset_apply.xml_nodeset\",\"xml_children\",\"read_gpx_xml\",\"read_gpx3\",\"FUN\",\"lapply\",\"make_nodeset\",\"nodeset_apply.xml_nodeset\",\"xml_children\",\"read_gpx_xml\",\"read_gpx3\",\"$\",\"xml_text.xml_node\",\"vapply\",\"xml_text.xml_nodeset\",\"read_gpx_xml\",\"read_gpx3\",\"check_call\",\"call_ns\",\"<Anonymous>\",\"mapply\",\"map2\",\"trace_back\",\"abort\",\"h\",\".handleSimpleError\",\"%in%\",\"match_selector_node\",\"match_selector\",\"clii__container_start\",\"FUN\",\"lapply\",\"clii_bullets\",\"<Anonymous>\",\"cli__fmt\",\"fmt\",\"cli::format_message\",\".rlang_cli_format_inline\",\"format_code\",\"format_error_call\",\"cnd_message_format_prefixed\",\"cnd_message\",\"conditionMessage.rlang_error\",\"signalCondition\",\"signal_abort\",\"abort\",\"h\",\".handleSimpleError\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[34.879638671875,34.879638671875,34.879638671875,34.879638671875,34.879638671875,34.879638671875,35.0932998657227,35.0932998657227,35.0932998657227,35.0932998657227,35.0932998657227,35.0932998657227,35.0932998657227,35.7743377685547,35.7743377685547,35.7743377685547,35.7743377685547,35.7743377685547,35.7743377685547,35.7743377685547,36.1429443359375,36.1429443359375,36.1429443359375,36.1429443359375,36.1429443359375,36.1429443359375,36.5065994262695,36.5065994262695,36.5065994262695,36.5065994262695,36.5065994262695,36.5065994262695,36.5065994262695,36.5065994262695,36.5065994262695,36.6522598266602,36.6522598266602,36.6522598266602,36.6522598266602,36.6522598266602,36.6522598266602,36.6522598266602,36.6522598266602,36.6522598266602,36.6522598266602,36.6522598266602,36.6522598266602,36.6522598266602,36.6522598266602,36.6522598266602,36.6522598266602,36.6522598266602,36.6522598266602,36.6522598266602,36.6522598266602,36.6522598266602,36.6522598266602],\"meminc\":[0,0,0,0,0,0,0.213661193847656,0,0,0,0,0,0,0.681037902832031,0,0,0,0,0,0,0.368606567382812,0,0,0,0,0,0.363655090332031,0,0,0,0,0,0,0,0,0.145660400390625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/RtmpKrO9Vr/file11633618b37dc.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nWe're way faster, taking less than half a second! Now the most time is spent on `raster::pointDistance`, which we call a ton of times. What does `pointDistance` do? It takes two pairs `(lat1, lon1)` and `(lat2, lon2)` the distance between them[^2].\n\n[^2]: We can't calculate the distance using the L2 norm because longitude and latitude are spherical coordinates, not Euclidean coordinates.\n\n## GPX reader version 4: drop into Rcpp\n\nNext I Googled how to perform this calculation myself and found [this](http://www.movable-type.co.uk/scripts/latlong.html#ellipsoid) and [this](https://www.r-bloggers.com/great-circle-distance-calculations-in-r/). The `Rcpp` implementation looks like:\n\n::: {.cell}\n\n```{.rcpp .cell-code}\n#include <Rcpp.h>\n\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\ndouble haversine_dist(const NumericVector p1, const NumericVector p2) {\n  \n  double lat1 = p1[0] * M_PI / 180;\n  double lon1 = p1[1] * M_PI / 180;\n  double lat2 = p2[0] * M_PI / 180;\n  double lon2 = p2[1] * M_PI / 180;\n  \n  double d_lat = lat2 - lat1;\n  double d_lon = lon2 - lon1;\n  \n  double a = pow(sin(d_lat / 2.0), 2) + \n    cos(lat1) * cos(lat2) * pow(sin(d_lon / 2.0), 2);\n  double c = 2 * asin(std::min(1.0, sqrt(a)));\n  \n  return 6378137 * c; // 6378137 is the radius of the earth in meters\n}\n```\n:::\n\nThe haversine distance is fast to calculate at the cost of some small error, which we can see below:\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- c(0, 0)\np2 <- c(1, 1)\n\ndist_expected <- raster::pointDistance(p1, p2, lonlat = TRUE)\ndist_result <- haversine_dist(p1, p2)\n\ndist_result - dist_expected\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 525.9688\n```\n:::\n:::\n\nIt turns out that \"small error\" on the geological scale is big error on the neighborhood run scale. Put all together, the C++ version looks like:\n\n::: {.cell}\n\n```{.r .cell-code}\nread_gpx4 <- function(fname) {\n  gps_df <- read_gpx_xml(fname)\n  get_metrics(gps_df, dist_func = haversine_dist)\n}\n```\n:::\n\nWe profile one more time:\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis(read_gpx4(fname))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nprofvis: code exited with error:\nProblem while computing `x = map2(longitude, latitude, c)`.\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-4061b430d34a14c1aaf0\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-4061b430d34a14c1aaf0\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,1,2,3,3,3,3,3,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],\"depth\":[5,4,3,2,1,1,5,4,3,2,1,4,3,2,1,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1],\"label\":[\"[[\",\"lapply\",\"xml_attrs.xml_nodeset\",\"read_gpx_xml\",\"read_gpx4\",\"names\",\"xml_text.xml_node\",\"vapply\",\"xml_text.xml_nodeset\",\"read_gpx_xml\",\"read_gpx4\",\"vapply\",\"xml_text.xml_nodeset\",\"read_gpx_xml\",\"read_gpx4\",\"match_selector_node\",\"match_selector\",\"clii__container_start\",\"FUN\",\"lapply\",\"clii_bullets\",\"<Anonymous>\",\"cli__fmt\",\"fmt\",\"cli_format\",\".rlang_cli_format\",\"cli_format\",\"cnd_message_format\",\"cnd_message\",\"conditionMessage.rlang_error\",\"signalCondition\",\"signal_abort\",\"abort\",\"h\",\".handleSimpleError\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[35.0671920776367,35.0671920776367,35.0671920776367,35.0671920776367,35.0671920776367,35.3886795043945,36.1396789550781,36.1396789550781,36.1396789550781,36.1396789550781,36.1396789550781,36.2334060668945,36.2334060668945,36.2334060668945,36.2334060668945,36.6148452758789,36.6148452758789,36.6148452758789,36.6148452758789,36.6148452758789,36.6148452758789,36.6148452758789,36.6148452758789,36.6148452758789,36.6148452758789,36.6148452758789,36.6148452758789,36.6148452758789,36.6148452758789,36.6148452758789,36.6148452758789,36.6148452758789,36.6148452758789,36.6148452758789,36.6148452758789],\"meminc\":[0,0,0,0,0,0.321487426757812,0.750999450683594,0,0,0,0,0.0937271118164062,0,0,0,0.381439208984375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/RtmpKrO9Vr/file116334bbc112c.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nNow it takes only about 0.1 seconds, but the result isn't accurate enough anymore. I wasn't in the mood to implement a more precise great circle distance calculation, but hopefully this illustrates the general principle of dropping into `Rcpp` and also why it's important to test when profiling.\n\n## Comparing the various GPX readers\n\nNow we can compare how long each version takes using the `bench` package.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(bench)\n\nmark(\n  read_gpx0(fname),\n  read_gpx1(fname),\n  read_gpx2(fname),\n  read_gpx3(fname),\n  read_gpx4(fname),\n  iterations = 5,   # how many times to run everything. 5 is very low.\n  relative = TRUE,\n  check = FALSE     # since readgpx4 isn't right, will error without this\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `cols` is now required when using unnest().\nPlease use `cols = c(`analytically slow`)`\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in `mutate()`:\n! Problem while computing `rest = as.numeric(time - t_old)`.\nCaused by error in `time - t_old`:\n! non-numeric argument to binary operator\n```\n:::\n:::\n\nHere timings are relative. We see that `read_gpx4` is about ten times faster than `read_gpx1` and two times faster than `read_gpx0`.\n\n## Embarrassing parallelization with `furrr`\n\nIn the end, I needed to do this for about fifty files. Since we can process each file independently of the other files, this operation is *embarrassingly parallel*. I actually wanted to use this data, so I didn't use the C++ haversine distance function. We can write with a single `map` call to process all the files at once:\n\n::: {.cell}\n\n```{.r .cell-code}\nrun_files_subset <- run_files[1:10]\n\nmap_dfr(run_files_subset, read_gpx3, .id = \"run\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `mutate()`:\n! Problem while computing `x = map2(longitude, latitude, c)`.\nCaused by error in `map2()`:\n! object 'longitude' not found\n```\n:::\n:::\n\nWhich means we can also write this as a parallelized `map` call with `furrr` like so:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(furrr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: future\n```\n:::\n\n```{.r .cell-code}\nplan(multiprocess)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Strategy 'multiprocess' is deprecated in future (>= 1.20.0). Instead,\nexplicitly specify either 'multisession' or 'multicore'. In the current R\nsession, 'multiprocess' equals 'multicore'.\n```\n:::\n\n```{.r .cell-code}\nfuture_map_dfr(run_files_subset, read_gpx3, .id = \"run\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `mutate()`:\n! Problem while computing `x = map2(longitude, latitude, c)`.\nCaused by error in `map2()`:\n! object 'longitude' not found\n```\n:::\n:::\n\nNote that other than loading `furrr` and calling `plan(multiprocess)` all we've had to do to get parallelism is to call `furrr::future_map_dfr`, which has exactly the same API as `purrr::map_dfr`. My computer has two cores, meaning there's a maximum possible speedup of two, and we achieve nearly that:\n\n::: {.cell}\n\n```{.r .cell-code}\nmark( \n  map_dfr(run_files_subset, read_gpx3, .id = \"run\"),\n  future_map_dfr(run_files_subset, read_gpx3, .id = \"run\"),\n  iterations = 5,\n  relative = TRUE\n)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `mutate()`:\n! Problem while computing `x = map2(longitude, latitude, c)`.\nCaused by error in `map2()`:\n! object 'longitude' not found\n```\n:::\n:::\n\n## Wrap Up\n\nThis was a low stakes exercise in speeding up R code. By the time I'd written all of these it would have been several hundred times faster to use `read_gpx0` and just save the results to a `.rds` file. Still, it was fun to work through the profiling workflow and I look forward to enterprising strangers on the internet pointing out places where things can get faster still.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/jquery-1.12.4/jquery.min.js\"></script>\n<script src=\"../../site_libs/d3-3.5.6/d3.min.js\"></script>\n<link href=\"../../site_libs/profvis-0.3.6.9000/profvis.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/profvis-0.3.6.9000/profvis.js\"></script>\n<script src=\"../../site_libs/profvis-0.3.6.9000/scroll.js\"></script>\n<link href=\"../../site_libs/highlight-6.2.0/textmate.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/highlight-6.2.0/highlight.js\"></script>\n<script src=\"../../site_libs/profvis-binding-0.3.7.9000/profvis.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}