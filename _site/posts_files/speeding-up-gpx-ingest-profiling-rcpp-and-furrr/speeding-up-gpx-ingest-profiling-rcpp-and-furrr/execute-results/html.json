{
  "hash": "b84b143d75a652bf10901ceae4dc8172",
  "result": {
    "markdown": "---\ntitle: \"speeding up GPX ingest: profiling, Rcpp and furrr\"\nsubtitle:\n  profiling your way to happiness, or possibly bikeshedding\ndate: \"2018-06-15\"\nexecute: \n  cache: true\n---\n\n\n\n\nThis post is a casual case study in speeding up R code. I work through several iterations of a function to read and process GPS running data from Strava stored in the GPX format. Along the way I describe how to visualize code bottlenecks with `profvis` and briefly touch on fast compiled code with `Rcpp` and parallelization with `furrr`.\n\n## The problem: tidying trajectories in GPX files\n\nI record my runs on my phone using Strava. Strava stores the GPS recordings in GPX files, which are XML files that follow some additional conventions. They start with some metadata and then contain a list of GPS readings taken at one second intervals with longitude, latitude, elevation and timestap information. I wanted to approximate my speed at each time point in the GPS record, as well as my distance traveled since the previous GPS recordings.\n\nBelow I have an example of a GPX file that contains three GPS readings. First I create a vector that contains the names off my GPX files, and then I subset to the files that contain running data. I choose to work with the third run as a canonical example, and show a subset of the recording with three GPS readings.\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-1_8db015a8682230045eede85a1f7b2a1c'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(here)\n\n# file contain run data\nact_files <- dir(here::here(\"posts/speeding-up-gpx-ingest-profiling-rcpp-and-furrr/2018-04-17-activities-alex/\"),\n                 full.names = TRUE)\nrun_files <- act_files[str_detect(act_files, \"Run\")]\n\n# example file we'll work with\nfname <- run_files[3]\n\n# subset of example\nall <- read_lines(fname)\nmini_idx <- c(1:20, 5897:5899)\ncat(all[mini_idx], sep = \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<gpx creator=\"StravaGPX Android\" version=\"1.1\" xmlns=\"http://www.topografix.com/GPX/1/1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd\">\n <metadata>\n  <time>2017-10-31T17:58:22Z</time>\n </metadata>\n <trk>\n  <name>analytically slow</name>\n  <trkseg>\n   <trkpt lat=\"29.7169490\" lon=\"-95.3978210\">\n    <ele>14.1</ele>\n    <time>2017-10-31T17:58:22Z</time>\n   </trkpt>\n   <trkpt lat=\"29.7168040\" lon=\"-95.3977180\">\n    <ele>14.4</ele>\n    <time>2017-10-31T17:58:29Z</time>\n   </trkpt>\n   <trkpt lat=\"29.7167480\" lon=\"-95.3976890\">\n    <ele>14.5</ele>\n    <time>2017-10-31T17:58:30Z</time>\n   </trkpt>\n  </trkseg>\n </trk>\n</gpx>\n```\n:::\n:::\n\nThe part we want is in the `<trkseg>` tags. We'd like to turn this into a tidy dataframe where each row represents one GPS reading and the columns contain information like speed, distance, traveled, elevation gained, etc.\n\n## GPX reader version 0: using plotKML::readGPX\n\nUsing `plotKML::readGPX` we can read the representative file into R:\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-2_13ee93b2d3c841b747915617a0bb5f84'}\n\n```{.r .cell-code}\ngps_raw <- plotKML::readGPX(fname)$tracks[[1]][[1]] %>% \n  as_tibble()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in loadNamespace(x): there is no package called 'plotKML'\n```\n:::\n\n```{.r .cell-code}\ngps_raw\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'gps_raw' not found\n```\n:::\n:::\n\nNow we can we correct the type information:\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-3_d8db6233e83f7555a7e93a2a1c215b55'}\n\n```{.r .cell-code}\nlibrary(lubridate)\n\nretyped <- gps_raw %>% \n  mutate_at(vars(lon, lat, ele), as.numeric) %>% \n  mutate_at(vars(time), lubridate::ymd_hms)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in tbl_vars_dispatch(x): object 'gps_raw' not found\n```\n:::\n\n```{.r .cell-code}\nretyped\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'retyped' not found\n```\n:::\n:::\n\nWe want to compare location at $t$ and $t - 1$, so we create a lagged column of longitudes and latitudes. We put longitude and latitude together into a vector to play well with `raster::pointDistance`, which we'll use to compute the great circle distance between two points.\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-4_00503d8985dbcc15c9c4ade1ba0b9f7b'}\n\n```{.r .cell-code}\nlagged <- retyped %>% \n    mutate(x = map2(lon, lat, c),  # create lagged position, this means the \n           x_old = lag(x),         # first row isn't complete\n           t_old = lag(time)) %>% \n    slice(-1)                      # remove incomplete first row\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in mutate(., x = map2(lon, lat, c), x_old = lag(x), t_old = lag(time)): object 'retyped' not found\n```\n:::\n\n```{.r .cell-code}\nlagged\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'lagged' not found\n```\n:::\n:::\n\nIt turns out this data is not contiguous. Strava has a feature called autopause which detects pauses in runs (for example, at a stoplight), and GPS readings during paused periods are not include in the GPX files[^1]. GPS readings typically happen once every second. I plotted the time gaps between readings and realized that time gaps greater than three seconds between two GPS recordings indicated a pause. This lets me break the run down into a series of contigous segments:\n\n[^1]: It took me a two months to realize this, mostly because I didn't plot enough of the data. If you're curous how Strava detects paused movement, you can read more [here](https://medium.com/strava-engineering/improving-auto-pause-for-everyone-13f253c66f9e). It seems to involve more if-statements than fun models.\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-5_5209f5e5ab720db5ee49c94803586bf3'}\n\n```{.r .cell-code}\nsegmented <- lagged %>% \n  mutate(rest = as.numeric(time - t_old),     # seconds\n         new_segment = as.numeric(rest > 3),  \n         segment = cumsum(new_segment)) %>%\n  \n  # don't want t_old to be from previous segment\n  group_by(segment) %>% \n  slice(-1)  \n```\n\n::: {.cell-output .cell-output-error}\n```\nError in mutate(., rest = as.numeric(time - t_old), new_segment = as.numeric(rest > : object 'lagged' not found\n```\n:::\n\n```{.r .cell-code}\nsegmented\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'segmented' not found\n```\n:::\n:::\n\nNow I calculate some information about each time point and segment that I'll use in downstream analyses:\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-6_f82bacfba2d33dda548fa650eee02b86'}\n\n```{.r .cell-code}\nlonlat_dist <- partial(raster::pointDistance, lonlat = TRUE)\n\nuseful <- segmented %>% \n  mutate(seg_length = max(time) - min(t_old),    # seconds\n         dx = map2_dbl(x, x_old, lonlat_dist),   # meters\n         dx = 0.000621371 * dx,                  # miles\n         dt = rest / 60^2,                       # hours\n         speed = dx / dt,                        # mph\n         pace = 60 * dt / dx,                    # min / mile\n         elev = as.numeric(ele)) %>%             # feet\n  dplyr::select(-ele, -x, -x_old, -t_old, -new_segment, -rest) %>% \n  ungroup()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in mutate(., seg_length = max(time) - min(t_old), dx = map2_dbl(x, : object 'segmented' not found\n```\n:::\n\n```{.r .cell-code}\nuseful\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'useful' not found\n```\n:::\n:::\n\nWe can quickly visualize instantaneous speed throughout the run:\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-7_dc5ecea3c971abee005ad5ec793f7eb1'}\n\n```{.r .cell-code}\nggplot(useful, aes(time, speed, group = segment)) +\n  geom_point() +\n  geom_line(alpha = 0.5) +\n  labs(title = \"Speed throughout example run\",\n       y = \"Speed (mph)\") +\n  theme(axis.title.x = element_blank())\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in ggplot(useful, aes(time, speed, group = segment)): object 'useful' not found\n```\n:::\n:::\n\nWe can see two short pauses present in the run at around 18:08 and 18:17.\n\nWe're going to use the code above a whole bunch, so we wrap it up into a helper function. I'm not sure that `raster::pointDistance` is the best option for calculating the distance between two points, so we use a `dist_func` argument to make it easy to switch out.\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-8_7c6e83e58a20972beb588a3572a2a7d0'}\n\n```{.r .cell-code}\nget_metrics <- function(gps_df, dist_func = lonlat_dist)  {\n  gps_df %>% \n    mutate_at(vars(lon, lat, ele), as.numeric) %>% \n    mutate_at(vars(time), lubridate::ymd_hms) %>% \n    mutate(x = map2(lon, lat, c),\n           x_old = lag(x),\n           t_old = lag(time)) %>% \n    slice(-1) %>% \n    mutate(rest = as.numeric(time - t_old),\n           new_segment = as.numeric(rest > 3),\n           segment = cumsum(new_segment) + 1) %>%\n    group_by(segment) %>% \n    slice(-1) %>%\n    mutate(seg_length = max(time) - min(t_old),\n           dx = map2_dbl(x, x_old, dist_func),\n           dx = 0.000621371 * dx, \n           dt = rest / 60^2,    \n           speed = dx / dt,       \n           pace = 60 * dt / dx,    \n           elev = as.numeric(ele)) %>%\n    dplyr::select(-ele, -x, -x_old, -t_old, -new_segment, -rest) %>% \n    ungroup()\n}\n```\n:::\n\nThis means our initial `read_gpx` function is just two lines:\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-9_0cd1257b2f4b9339931582cb4b21fb4b'}\n\n```{.r .cell-code}\nread_gpx0 <- function(fname) {\n  gps_df <- plotKML::readGPX(fname)$tracks[[1]][[1]]\n  get_metrics(gps_df)\n}\n```\n:::\n\nWe can use `profvis::profvis` to create an interactive visualization of how long it takes to read the example file.\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-10_44cff9064eb31f51400491846a5493cf'}\n\n```{.r .cell-code}\nlibrary(profvis)\n\nprofvis(read_gpx0(fname))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in parse_rprof_lines(lines, expr_source): No parsing data available. Maybe your function was too fast?\n```\n:::\n:::\n\nIn the default view, the horizontal axis represents time and the box represents the call stack. All the boxes above `plotKML::readGPX` are functions called by `plotKML::readGPX`. Here it seems like `plotKML::readGPX` takes about 400 milliseconds to run. So about half the time is spent reading in the file, and half calculating metrics. Most of the time calculating metrics is in `raster::pointDistance`, which is fairly up the call stack - you may have to click and drag the plot to see it.\n\n## GPX reader version 1: no more plotKML::GPX\n\nThen I broke my R library and couldn't use `plotKML::readGPX` for a little while. Since GPX files are XML files, I used the `xml2` package as a replacement. `xml2` has a function `as_list` that let me treat the XML as an R list. We extract the relevant portion of the list and `purrr::map_dfr` each GPS recording into a row of a `tibble`.\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-11_82da26caac4328cb09b3849e8af8f62e'}\n\n```{.r .cell-code}\nlibrary(xml2)\n\nrun_xml <- read_xml(fname)\nrun_list <- as_list(run_xml)\ngps_pts <- run_list$gpx$trk$trkseg\n\nextract_gps_point <- function(point) {\n  tibble(\n    lon = attr(point, \"lon\"),\n    lat = attr(point, \"lat\"),\n    ele = point$ele[[1]],\n    time = point$time[[1]]\n  )\n}\n\nmap_dfr(gps_pts, extract_gps_point)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,472 × 4\n   lon         lat        ele   time                \n   <chr>       <chr>      <chr> <chr>               \n 1 -95.3978210 29.7169490 14.1  2017-10-31T17:58:22Z\n 2 -95.3977180 29.7168040 14.4  2017-10-31T17:58:29Z\n 3 -95.3976890 29.7167480 14.5  2017-10-31T17:58:30Z\n 4 -95.3976530 29.7167050 14.6  2017-10-31T17:58:31Z\n 5 -95.3976600 29.7166770 14.6  2017-10-31T17:58:32Z\n 6 -95.3976330 29.7166110 14.7  2017-10-31T17:58:33Z\n 7 -95.3976090 29.7165850 14.7  2017-10-31T17:58:34Z\n 8 -95.3975830 29.7165300 14.7  2017-10-31T17:58:36Z\n 9 -95.3975780 29.7164950 14.7  2017-10-31T17:58:37Z\n10 -95.3975630 29.7164510 14.7  2017-10-31T17:58:38Z\n# … with 1,462 more rows\n```\n:::\n:::\n\nThen we wrap this in a function.\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-12_89e68c12c1503368cbf8f4a12d80e4cf'}\n\n```{.r .cell-code}\nread_gpx1 <- function(fname) {\n  run_xml <- read_xml(fname)\n  run_list <- as_list(run_xml)\n  \n  extract_gps_point <- function(point) {\n    tibble(\n      lon = attr(point, \"lon\"),\n      lat = attr(point, \"lat\"),\n      ele = point$ele[[1]],\n      time = point$time[[1]]\n    )\n  }\n  \n  gps_df <- map_dfr(run_list$gpx$trk$trkseg, extract_gps_point)\n  get_metrics(gps_df)\n}\n```\n:::\n\nThe next part is critical when trying to speed up code: **test that the new code does the same thing as the old code**.\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-13_6e2d4313d249daf6e2fd2616e7a3e97a'}\n\n```{.r .cell-code}\nlibrary(testthat)\n\nexpected <- read_gpx0(fname)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in loadNamespace(x): there is no package called 'plotKML'\n```\n:::\n\n```{.r .cell-code}\nresult_1 <- read_gpx1(fname)\n\n# silence means everything went well\nexpect_equal(expected, result_1)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval_bare(expr, quo_get_env(quo)): object 'expected' not found\n```\n:::\n:::\n\nThis turned out to be too slow, so we profile and see which lines are taking the most amount of time.\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-14_fcd2ba1a903bb5c21567f6dd986ea266'}\n\n```{.r .cell-code}\nprofvis(read_gpx1(fname))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-b506cb71d704378f2887\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-b506cb71d704378f2887\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,12,12,12,12,12,12,12,12,12,12,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,33,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,39,40,40,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,59,59,59,61,61,62,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,64,64,64,64,64,64,65,65,66,66,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,77,77,78,78,78,78,78,79,80,80,80,80,80,80,81,82,82,82,82,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,92,92,92,93,94,94,94,94,94,94,94,94,94,94,94,94,94,94,95,95,95,96,96,96,97,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,101,101,101,101,101,101,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,106,106,106,106,106,106,107,107,107,107,107,107,107,107,107,107,108,108,108,108,108,108,108,109,109,109,109,109,109,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,112,112,113,113,113,113,113,113,113,113,113,113,113,113,113,114,115,115,115,115,115,115,115,115,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,119,119,119,120,120,120,120,120,120,120,120,120,120,120,121,122,122,122,122,122,122,122,123,123,123,123,123,123,123,123,123,123,123,124,124,124,124,124,124,124,124,125,126,126,126,126,126,126,127,127,127,127,128,128,128,128,128,128,129,129,129,129,129,129,130,130,130,130,130,130],\"depth\":[12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,12,11,10,9,8,7,6,5,4,3,2,1,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,1,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,1,2,1,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,2,1,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,2,1,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,1,6,5,4,3,2,1,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,3,2,1,3,2,1,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,1,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,3,2,1,11,10,9,8,7,6,5,4,3,2,1,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,1,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1],\"label\":[\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_text\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"as.list\",\"xml_to_r_attrs\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_type\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_attrs\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"any\",\"<GC>\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"any\",\"xml_attrs.xml_node\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"list\",\"$\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"structure\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_type.xml_node\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"$\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_type\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_type\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"length\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"[[\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_to_r_attrs\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"$\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"which\",\"ifelse\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"<GC>\",\"vapply\",\"xml_name.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"eval\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"is_list\",\"new_environment\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"structure\",\"[.quosures\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"length\",\"NextMethod\",\"[.quosures\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vec_size\",\"vectbl_recycle_rows\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"eval_tidy\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"names<-\",\"<GC>\",\".External2\",\"new_tibble\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"doTryCatch\",\"tryCatchOne\",\"tryCatchList\",\"tryCatch\",\"<Anonymous>\",\"bind_args\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"NextMethod\",\"[.quosures\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"validate_minimal_names\",\"validate_unique\",\"<Anonymous>\",\"vec_as_names\",\"repaired_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"expr_type_of\",\"switch_expr\",\"quo_squash_impl\",\"quo_squash\",\"as_label\",\"caller_arg\",\"arg_match0\",\"exprs_auto_name\",\"quos_auto_name\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"<GC>\",\"recycle_columns\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"has_names\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"map_mold\",\"map_lgl\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"match.fun\",\"vapply\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"length\",\"rep_along\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"names\",\"names2\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"anyDuplicated\",\"validate_unique\",\"<Anonymous>\",\"vec_as_names\",\"repaired_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"bind_args\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".transformer\",\"<Anonymous>\",\"<GC>\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".transformer\",\"<Anonymous>\",\"%||%\",\"<Anonymous>\",\"paste0\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"%||%\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"set_names\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"FUN\",\"vapply\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"names2\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"is.factor\",\"grepl\",\"has_newline\",\"trim\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"doTryCatch\",\"tryCatchOne\",\"tryCatchList\",\"tryCatch\",\"<Anonymous>\",\".External2\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".Call\",\"vapply\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"arg_match0\",\"exprs_auto_name\",\"quos_auto_name\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"<GC>\",\"parent.frame\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"doTryCatch\",\"tryCatchOne\",\"tryCatchList\",\"tryCatch\",\"<Anonymous>\",\"vapply\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"do.call\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"names\",\"vapply\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"parent.frame\",\"tryCatch\",\"<Anonymous>\",\"eval\",\".transformer\",\"<Anonymous>\",\".External2\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"map_lgl\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"which\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"caller_arg\",\"arg_match0\",\"exprs_auto_name\",\"quos_auto_name\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"as.list.default\",\"alist\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"as.list\",\"alist\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"<Anonymous>\",\"vec_as_names\",\"repaired_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"eval_tidy\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"force\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"grepl\",\"has_newline\",\"trim\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vec_as_names\",\"repaired_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"<Anonymous>\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".External2\",\"NextMethod\",\"[.quosures\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"paste0\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"<GC>\",\"paste0\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tryCatchList\",\"tryCatch\",\"<Anonymous>\",\"caller_env\",\"caller_arg\",\"arg_match0\",\"exprs_auto_name\",\"quos_auto_name\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".External2\",\"<Anonymous>\",\"expr\",\"tidyselect::vars_select\",\"tbl_at_vars\",\"tbl_at_syms\",\"manip_at\",\"mutate_at\",\"regexpr\",\".substitute_formats\",\"<Anonymous>\",\"mapply\",\".build_formats\",\"guess_formats\",\".best_formats\",\".local_parse\",\"parse_date_time\",\".parse_xxx_hms\",\"<Anonymous>\",\"enexpr\",\"expr\",\"FUN\",\"lapply\",\"map\",\"mask$forget\",\"mutate_cols\",\"mutate.data.frame\",\".Call\",\"is.data.frame\",\"colnames\",\".pointsToMatrix\",\".fn\",\".f\",\"map2_dbl\",\".pointsToMatrix\",\".fn\",\".f\",\"map2_dbl\",\"NCOL\",\"colnames\",\".pointsToMatrix\",\".fn\",\".f\",\"map2_dbl\",\"<GC>\",\"cbind\",\".geodist\",\".fn\",\".f\",\"map2_dbl\",\"vctrs::vec_as_location\",\"loc_validate\",\"vars_select_eval\",\"eval_select_impl\",\"tidyselect::eval_select\",\"select.data.frame\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[31.0568161010742,31.0568161010742,31.0568161010742,31.0568161010742,31.0568161010742,31.0568161010742,31.0568161010742,31.0568161010742,31.0568161010742,31.0568161010742,31.0568161010742,31.0568161010742,31.3444671630859,31.3444671630859,31.3444671630859,31.3444671630859,31.3444671630859,31.3444671630859,31.3444671630859,31.3444671630859,31.3444671630859,31.3444671630859,31.3444671630859,31.3444671630859,31.3444671630859,31.3444671630859,31.3444671630859,31.3444671630859,31.3444671630859,31.3444671630859,31.6158752441406,31.6158752441406,31.6158752441406,31.6158752441406,31.6158752441406,31.6158752441406,31.6158752441406,31.6158752441406,31.6158752441406,31.6158752441406,31.6158752441406,31.6158752441406,31.6158752441406,31.7966461181641,31.7966461181641,31.7966461181641,31.7966461181641,31.7966461181641,31.7966461181641,31.7966461181641,31.7966461181641,31.7966461181641,31.7966461181641,31.7966461181641,31.7966461181641,31.7966461181641,31.7966461181641,32.0665130615234,32.0665130615234,32.0665130615234,32.0665130615234,32.0665130615234,32.0665130615234,32.0665130615234,32.0665130615234,32.0665130615234,32.0665130615234,32.0665130615234,32.0665130615234,32.2475280761719,32.2475280761719,32.2475280761719,32.2475280761719,32.2475280761719,32.2475280761719,32.2475280761719,32.2475280761719,32.2475280761719,32.2475280761719,32.2475280761719,32.2475280761719,32.2475280761719,32.2475280761719,32.5183486938477,32.5183486938477,32.5183486938477,32.5183486938477,32.5183486938477,32.5183486938477,32.5183486938477,32.5183486938477,32.5183486938477,32.5183486938477,32.5183486938477,32.6960296630859,32.6960296630859,32.6960296630859,32.6960296630859,32.6960296630859,32.6960296630859,32.6960296630859,32.6960296630859,32.6960296630859,32.6960296630859,32.6960296630859,32.6960296630859,32.6960296630859,32.6960296630859,32.6960296630859,32.957878112793,33.0980911254883,33.0980911254883,33.0980911254883,33.0980911254883,33.0980911254883,33.0980911254883,33.0980911254883,33.0980911254883,33.0980911254883,33.0980911254883,33.0980911254883,33.0980911254883,33.0980911254883,33.0980911254883,33.0980911254883,33.0980911254883,33.0980911254883,33.0980911254883,31.0415496826172,31.2217025756836,31.2217025756836,31.2217025756836,31.2217025756836,31.2217025756836,31.2217025756836,31.2217025756836,31.2217025756836,31.2217025756836,31.2217025756836,31.2217025756836,31.2217025756836,31.4954833984375,31.6783599853516,31.6783599853516,31.6783599853516,31.6783599853516,31.6783599853516,31.6783599853516,31.6783599853516,31.6783599853516,31.6783599853516,31.6783599853516,31.6783599853516,31.6783599853516,31.6783599853516,31.6783599853516,31.6783599853516,31.6783599853516,31.6783599853516,31.9519958496094,31.9519958496094,31.9519958496094,31.9519958496094,31.9519958496094,31.9519958496094,31.9519958496094,31.9519958496094,31.9519958496094,31.9519958496094,31.9519958496094,31.9519958496094,31.9519958496094,31.9519958496094,31.9519958496094,31.9519958496094,31.9519958496094,31.9519958496094,32.1351089477539,32.1351089477539,32.1351089477539,32.1351089477539,32.1351089477539,32.1351089477539,32.1351089477539,32.1351089477539,32.1351089477539,32.1351089477539,32.1351089477539,32.1351089477539,32.1351089477539,32.1351089477539,32.1351089477539,32.1351089477539,32.1351089477539,32.1351089477539,32.4076843261719,32.4076843261719,32.4076843261719,32.4076843261719,32.4076843261719,32.4076843261719,32.4076843261719,32.4076843261719,32.4076843261719,32.4076843261719,32.4076843261719,32.4076843261719,32.4076843261719,32.4076843261719,32.4076843261719,32.4076843261719,32.4076843261719,32.4076843261719,32.5851211547852,32.5851211547852,32.5851211547852,32.5851211547852,32.5851211547852,32.5851211547852,32.5851211547852,32.5851211547852,32.5851211547852,32.5851211547852,32.5851211547852,32.5851211547852,32.5851211547852,32.5851211547852,32.5851211547852,32.5851211547852,32.5851211547852,32.847297668457,32.847297668457,32.847297668457,32.847297668457,32.847297668457,32.847297668457,32.847297668457,32.847297668457,32.847297668457,32.847297668457,32.847297668457,32.847297668457,32.847297668457,32.847297668457,32.847297668457,30.9104537963867,30.9104537963867,30.9104537963867,30.9104537963867,30.9104537963867,30.9104537963867,30.9104537963867,30.9104537963867,30.9104537963867,30.9104537963867,30.9104537963867,30.9104537963867,30.9104537963867,30.9104537963867,30.9104537963867,30.9104537963867,30.9104537963867,30.9104537963867,31.1843338012695,31.1843338012695,31.1843338012695,31.1843338012695,31.1843338012695,31.1843338012695,31.1843338012695,31.1843338012695,31.1843338012695,31.1843338012695,31.1843338012695,31.1843338012695,31.1843338012695,31.1843338012695,31.1843338012695,31.1843338012695,31.1843338012695,31.3655471801758,31.6391448974609,31.6391448974609,31.6391448974609,31.6391448974609,31.6391448974609,31.6391448974609,31.6391448974609,31.6391448974609,31.6391448974609,31.6391448974609,31.6391448974609,31.6391448974609,31.6391448974609,31.6391448974609,31.8204116821289,31.8204116821289,31.8204116821289,31.8204116821289,31.8204116821289,31.8204116821289,31.8204116821289,31.8204116821289,31.8204116821289,31.8204116821289,31.8204116821289,31.8204116821289,31.8204116821289,31.8204116821289,32.0946731567383,32.0946731567383,32.0946731567383,32.0946731567383,32.0946731567383,32.0946731567383,32.0946731567383,32.0946731567383,32.0946731567383,32.0946731567383,32.0946731567383,32.0946731567383,32.0946731567383,32.0946731567383,32.0946731567383,32.2774658203125,32.2774658203125,32.2774658203125,32.2774658203125,32.2774658203125,32.2774658203125,32.2774658203125,32.2774658203125,32.2774658203125,32.2774658203125,32.2774658203125,32.2774658203125,32.2774658203125,32.2774658203125,32.2774658203125,32.2774658203125,32.2774658203125,32.2774658203125,32.2774658203125,32.2774658203125,32.5474700927734,32.5474700927734,32.5474700927734,32.5474700927734,32.5474700927734,32.5474700927734,32.5474700927734,32.5474700927734,32.5474700927734,32.5474700927734,32.5474700927734,32.5474700927734,32.5474700927734,32.7214584350586,32.7214584350586,32.7214584350586,32.7214584350586,32.7214584350586,32.7214584350586,32.7214584350586,32.7214584350586,32.7214584350586,32.7214584350586,32.7214584350586,32.9414825439453,32.9414825439453,32.9414825439453,32.9414825439453,32.9414825439453,32.9414825439453,32.9414825439453,32.9414825439453,32.9414825439453,32.9414825439453,32.9414825439453,31.0745697021484,31.0745697021484,31.0745697021484,31.0745697021484,31.0745697021484,31.0745697021484,31.0745697021484,31.0745697021484,31.0745697021484,31.0745697021484,31.0745697021484,31.0745697021484,31.0745697021484,31.2825927734375,31.2825927734375,31.2825927734375,31.2825927734375,31.2825927734375,31.2825927734375,31.2825927734375,31.2825927734375,31.423095703125,31.423095703125,31.423095703125,31.423095703125,31.423095703125,31.423095703125,31.423095703125,31.423095703125,31.6347732543945,31.7755661010742,31.7755661010742,31.7755661010742,31.7755661010742,31.7755661010742,31.7755661010742,31.7755661010742,31.7755661010742,31.9809417724609,31.9809417724609,31.9809417724609,31.9809417724609,31.9809417724609,31.9809417724609,31.9809417724609,31.9809417724609,31.9809417724609,31.9809417724609,31.9809417724609,31.9809417724609,32.1206359863281,32.1206359863281,32.1206359863281,32.1206359863281,32.1206359863281,32.1206359863281,32.1206359863281,32.1206359863281,32.3310546875,32.3310546875,32.3310546875,32.3310546875,32.3310546875,32.3310546875,32.3310546875,32.4676666259766,32.4676666259766,32.4676666259766,32.4676666259766,32.4676666259766,32.4676666259766,32.4676666259766,32.4676666259766,32.4676666259766,32.4676666259766,32.4676666259766,32.6734924316406,32.7951583862305,32.7951583862305,31.1399459838867,31.1399459838867,31.1399459838867,31.1399459838867,31.1399459838867,31.1399459838867,31.1399459838867,31.278694152832,31.278694152832,31.278694152832,31.278694152832,31.278694152832,31.278694152832,31.278694152832,31.278694152832,31.278694152832,31.278694152832,31.278694152832,31.278694152832,31.278694152832,31.4885101318359,31.4885101318359,31.4885101318359,31.4885101318359,31.4885101318359,31.4885101318359,31.4885101318359,31.4885101318359,31.4885101318359,31.4885101318359,31.4885101318359,31.4885101318359,31.4885101318359,31.6296691894531,31.6296691894531,31.6296691894531,31.6296691894531,31.6296691894531,31.6296691894531,31.6296691894531,31.6296691894531,31.6296691894531,31.6296691894531,31.6296691894531,31.6296691894531,31.6296691894531,31.6296691894531,31.8403854370117,31.8403854370117,31.8403854370117,31.8403854370117,31.8403854370117,31.9807662963867,31.9807662963867,31.9807662963867,31.9807662963867,31.9807662963867,31.9807662963867,31.9807662963867,31.9807662963867,31.9807662963867,31.9807662963867,31.9807662963867,31.9807662963867,31.9807662963867,32.1881637573242,32.1881637573242,32.1881637573242,32.1881637573242,32.1881637573242,32.1881637573242,32.1881637573242,32.1881637573242,32.3279876708984,32.3279876708984,32.3279876708984,32.3279876708984,32.3279876708984,32.3279876708984,32.3279876708984,32.3279876708984,32.3279876708984,32.3279876708984,32.3279876708984,32.3279876708984,32.5354156494141,32.5354156494141,32.5354156494141,32.5354156494141,32.5354156494141,32.5354156494141,32.5354156494141,32.5354156494141,32.5354156494141,32.5354156494141,32.5354156494141,32.5354156494141,32.5354156494141,32.5354156494141,32.6714935302734,32.6714935302734,32.6714935302734,32.6714935302734,32.6714935302734,32.6714935302734,32.6714935302734,32.6714935302734,32.6714935302734,32.6714935302734,32.6714935302734,32.6714935302734,32.6714935302734,32.6714935302734,32.6714935302734,32.8207626342773,32.8207626342773,32.8207626342773,32.8207626342773,32.8207626342773,32.8207626342773,32.8207626342773,32.8207626342773,32.8207626342773,32.8207626342773,32.8207626342773,32.8207626342773,32.8207626342773,32.8207626342773,31.1320724487305,31.1320724487305,31.1320724487305,31.1320724487305,31.1320724487305,31.1320724487305,31.1320724487305,31.1320724487305,31.1320724487305,31.1320724487305,31.1320724487305,31.1320724487305,31.1320724487305,31.3389205932617,31.3389205932617,31.3389205932617,31.3389205932617,31.3389205932617,31.3389205932617,31.3389205932617,31.3389205932617,31.3389205932617,31.4790420532227,31.4790420532227,31.4790420532227,31.4790420532227,31.4790420532227,31.4790420532227,31.4790420532227,31.4790420532227,31.4790420532227,31.4790420532227,31.4790420532227,31.4790420532227,31.6904983520508,31.6904983520508,31.6904983520508,31.6904983520508,31.6904983520508,31.6904983520508,31.8298568725586,31.8298568725586,31.8298568725586,31.8298568725586,31.8298568725586,31.8298568725586,31.8298568725586,31.8298568725586,32.0408477783203,32.0408477783203,32.0408477783203,32.0408477783203,32.0408477783203,32.0408477783203,32.0408477783203,32.0408477783203,32.1810760498047,32.1810760498047,32.1810760498047,32.1810760498047,32.1810760498047,32.1810760498047,32.1810760498047,32.1810760498047,32.1810760498047,32.1810760498047,32.1810760498047,32.1810760498047,32.3909378051758,32.3909378051758,32.3909378051758,32.3909378051758,32.3909378051758,32.3909378051758,32.3909378051758,32.3909378051758,32.3909378051758,32.3909378051758,32.3909378051758,32.3909378051758,32.3909378051758,32.7337265014648,32.7337265014648,32.8406677246094,32.8406677246094,32.8406677246094,32.8406677246094,32.8406677246094,32.8406677246094,32.8406677246094,32.8406677246094,32.8406677246094,32.8406677246094,32.8406677246094,31.1963195800781,31.1963195800781,31.1963195800781,31.1963195800781,31.1963195800781,31.1963195800781,31.1963195800781,31.1963195800781,31.1963195800781,31.1963195800781,31.1963195800781,31.1963195800781,31.3359375,31.3359375,31.3359375,31.3359375,31.3359375,31.3359375,31.3359375,31.3359375,31.3359375,31.3359375,31.3359375,31.3359375,31.3359375,31.3359375,31.5471115112305,31.5471115112305,31.688102722168,31.688102722168,31.8993301391602,31.8993301391602,31.8993301391602,31.8993301391602,31.8993301391602,31.8993301391602,31.8993301391602,31.8993301391602,31.8993301391602,31.8993301391602,31.8993301391602,31.8993301391602,31.8993301391602,31.8993301391602,31.8993301391602,32.0392303466797,32.0392303466797,32.0392303466797,32.0392303466797,32.0392303466797,32.0392303466797,32.0392303466797,32.0392303466797,32.0392303466797,32.0392303466797,32.0392303466797,32.0392303466797,32.0392303466797,32.0392303466797,32.0392303466797,32.2486419677734,32.2486419677734,32.2486419677734,32.2486419677734,32.2486419677734,32.2486419677734,32.2486419677734,32.2486419677734,32.38916015625,32.38916015625,32.38916015625,32.38916015625,32.38916015625,32.38916015625,32.38916015625,32.38916015625,32.38916015625,32.38916015625,32.38916015625,32.38916015625,32.595573425293,32.595573425293,32.595573425293,32.595573425293,32.595573425293,32.595573425293,32.595573425293,32.595573425293,32.595573425293,32.595573425293,32.595573425293,32.595573425293,32.7320861816406,32.7320861816406,32.7320861816406,32.7320861816406,32.7320861816406,32.7320861816406,32.7320861816406,32.7320861816406,32.7320861816406,32.7320861816406,32.7320861816406,31.0576477050781,31.0576477050781,31.0576477050781,31.0576477050781,31.0576477050781,31.0576477050781,31.1954574584961,31.1954574584961,31.1954574584961,31.1954574584961,31.1954574584961,31.1954574584961,31.1954574584961,31.1954574584961,31.4037704467773,31.4037704467773,31.4037704467773,31.4037704467773,31.4037704467773,31.4037704467773,31.4037704467773,31.4037704467773,31.4037704467773,31.4037704467773,31.4037704467773,31.4037704467773,31.4037704467773,31.4037704467773,31.4037704467773,31.4037704467773,31.5447082519531,31.5447082519531,31.5447082519531,31.5447082519531,31.5447082519531,31.5447082519531,31.5447082519531,31.5447082519531,31.5447082519531,31.5447082519531,31.5447082519531,31.5447082519531,31.7557754516602,31.7557754516602,31.7557754516602,31.7557754516602,31.7557754516602,31.7557754516602,31.7557754516602,31.7557754516602,31.7557754516602,31.7557754516602,31.7557754516602,31.8963775634766,31.8963775634766,31.8963775634766,31.8963775634766,31.8963775634766,32.1065979003906,32.2462158203125,32.2462158203125,32.2462158203125,32.2462158203125,32.2462158203125,32.2462158203125,32.4552688598633,32.5931243896484,32.5931243896484,32.5931243896484,32.5931243896484,32.5931243896484,32.5931243896484,32.5931243896484,32.5931243896484,32.5931243896484,32.5931243896484,32.5931243896484,32.5931243896484,32.5931243896484,32.5931243896484,32.7978668212891,32.7978668212891,32.7978668212891,32.7978668212891,32.7978668212891,32.7978668212891,32.7978668212891,32.7978668212891,32.7978668212891,32.8747329711914,32.8747329711914,32.8747329711914,32.8747329711914,32.8747329711914,32.8747329711914,32.8747329711914,32.8747329711914,32.8747329711914,32.8747329711914,32.8747329711914,32.8747329711914,32.8747329711914,31.2646408081055,31.2646408081055,31.2646408081055,31.2646408081055,31.2646408081055,31.403076171875,31.403076171875,31.403076171875,31.403076171875,31.403076171875,31.403076171875,31.403076171875,31.403076171875,31.403076171875,31.403076171875,31.403076171875,31.403076171875,31.403076171875,31.403076171875,31.6140747070312,31.6140747070312,31.6140747070312,31.6140747070312,31.6140747070312,31.6140747070312,31.6140747070312,31.6140747070312,31.6140747070312,31.6140747070312,31.6140747070312,31.6140747070312,31.6140747070312,31.7544555664062,31.7544555664062,31.7544555664062,31.7544555664062,31.7544555664062,31.7544555664062,31.7544555664062,31.7544555664062,31.7544555664062,31.7544555664062,31.7544555664062,31.7544555664062,31.9641647338867,31.9641647338867,31.9641647338867,31.9641647338867,31.9641647338867,31.9641647338867,31.9641647338867,31.9641647338867,32.1042938232422,32.1042938232422,32.1042938232422,32.1042938232422,32.1042938232422,32.1042938232422,32.1042938232422,32.1042938232422,32.3135375976562,32.3135375976562,32.3135375976562,32.3135375976562,32.3135375976562,32.4531631469727,32.4531631469727,32.4531631469727,32.4531631469727,32.4531631469727,32.4531631469727,32.4531631469727,32.4531631469727,32.4531631469727,32.4531631469727,32.4531631469727,32.4531631469727,32.4531631469727,32.6589965820312,32.7938690185547,32.7938690185547,32.7938690185547,32.7938690185547,32.7938690185547,32.7938690185547,32.7938690185547,32.7938690185547,32.7938690185547,32.7938690185547,32.7938690185547,32.7938690185547,32.7938690185547,32.7938690185547,31.1232986450195,31.1232986450195,31.1232986450195,31.2642517089844,31.2642517089844,31.2642517089844,31.4723205566406,31.6126708984375,31.6126708984375,31.6126708984375,31.6126708984375,31.6126708984375,31.6126708984375,31.8239288330078,31.8239288330078,31.8239288330078,31.8239288330078,31.8239288330078,31.8239288330078,31.8239288330078,31.8239288330078,31.8239288330078,31.8239288330078,31.8239288330078,31.9651489257812,31.9651489257812,31.9651489257812,31.9651489257812,31.9651489257812,31.9651489257812,31.9651489257812,32.1763229370117,32.1763229370117,32.1763229370117,32.1763229370117,32.1763229370117,32.1763229370117,32.314697265625,32.314697265625,32.314697265625,32.314697265625,32.314697265625,32.314697265625,32.314697265625,32.5222473144531,32.5222473144531,32.5222473144531,32.5222473144531,32.5222473144531,32.5222473144531,32.5222473144531,32.5222473144531,32.5222473144531,32.5222473144531,32.5222473144531,32.5222473144531,32.5222473144531,32.5222473144531,32.6571578979492,32.6571578979492,32.6571578979492,32.6571578979492,32.6571578979492,32.6571578979492,32.6571578979492,32.6571578979492,32.6571578979492,32.6571578979492,32.8627471923828,32.8627471923828,32.8627471923828,32.8627471923828,32.8627471923828,32.8627471923828,32.8627471923828,32.8627471923828,32.8627471923828,32.8627471923828,32.8627471923828,32.8627471923828,32.8627471923828,32.8627471923828,31.1232376098633,31.1232376098633,31.1232376098633,31.1232376098633,31.1232376098633,31.1232376098633,31.1232376098633,31.1232376098633,31.1232376098633,31.1232376098633,31.1232376098633,31.1232376098633,31.1232376098633,31.1232376098633,31.3295822143555,31.3295822143555,31.3295822143555,31.3295822143555,31.3295822143555,31.3295822143555,31.3295822143555,31.3295822143555,31.3295822143555,31.3295822143555,31.4635314941406,31.4635314941406,31.4635314941406,31.4635314941406,31.4635314941406,31.4635314941406,31.4635314941406,31.665885925293,31.665885925293,31.665885925293,31.665885925293,31.665885925293,31.665885925293,31.8004837036133,31.8004837036133,31.8004837036133,31.8004837036133,31.8004837036133,31.8004837036133,31.8004837036133,31.8004837036133,31.8004837036133,31.8004837036133,31.8004837036133,31.8004837036133,31.8004837036133,31.8004837036133,31.8004837036133,32.0010070800781,32.0010070800781,32.0010070800781,32.0010070800781,32.0010070800781,32.0010070800781,32.0010070800781,32.0010070800781,32.0010070800781,32.0010070800781,32.0010070800781,32.0010070800781,32.0010070800781,32.0010070800781,32.0010070800781,32.1351089477539,32.1351089477539,32.1351089477539,32.1351089477539,32.1351089477539,32.1351089477539,32.1351089477539,32.1351089477539,32.1351089477539,32.3360748291016,32.3360748291016,32.3360748291016,32.3360748291016,32.3360748291016,32.3360748291016,32.3360748291016,32.3360748291016,32.3360748291016,32.3360748291016,32.3360748291016,32.3360748291016,32.3360748291016,32.4725036621094,32.670166015625,32.670166015625,32.670166015625,32.670166015625,32.670166015625,32.670166015625,32.670166015625,32.670166015625,32.8052978515625,32.8052978515625,32.8052978515625,32.8052978515625,32.8052978515625,32.8052978515625,32.8052978515625,32.8052978515625,32.8052978515625,32.8052978515625,32.8052978515625,32.8052978515625,32.8052978515625,32.8052978515625,32.8052978515625,32.9047012329102,32.9047012329102,32.9047012329102,32.9047012329102,32.9047012329102,32.9047012329102,32.9047012329102,32.9272766113281,32.9272766113281,32.9272766113281,32.9272766113281,32.9272766113281,32.9272766113281,32.9272766113281,32.9272766113281,32.9272766113281,32.9272766113281,32.9272766113281,32.9272766113281,32.9272766113281,32.9272766113281,32.9272766113281,32.9272766113281,31.1974334716797,31.1974334716797,31.1974334716797,31.323600769043,31.323600769043,31.323600769043,31.323600769043,31.323600769043,31.323600769043,31.323600769043,31.323600769043,31.323600769043,31.323600769043,31.323600769043,32.1801910400391,32.7850875854492,32.7850875854492,32.7850875854492,32.7850875854492,32.7850875854492,32.7850875854492,32.7850875854492,35.2680511474609,35.2680511474609,35.2680511474609,35.2680511474609,35.2680511474609,35.2680511474609,35.2680511474609,35.2680511474609,35.2680511474609,35.2680511474609,35.2680511474609,36.2773056030273,36.2773056030273,36.2773056030273,36.2773056030273,36.2773056030273,36.2773056030273,36.2773056030273,36.2773056030273,37.5592727661133,38.4913482666016,38.4913482666016,38.4913482666016,38.4913482666016,38.4913482666016,38.4913482666016,39.8994216918945,39.8994216918945,39.8994216918945,39.8994216918945,40.834587097168,40.834587097168,40.834587097168,40.834587097168,40.834587097168,40.834587097168,42.0516738891602,42.0516738891602,42.0516738891602,42.0516738891602,42.0516738891602,42.0516738891602,31.6630172729492,31.6630172729492,31.6630172729492,31.6630172729492,31.6630172729492,31.6630172729492],\"meminc\":[0,0,0,0,0,0,0,0,0,0,0,0,0.287651062011719,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.271408081054688,0,0,0,0,0,0,0,0,0,0,0,0,0.180770874023438,0,0,0,0,0,0,0,0,0,0,0,0,0,0.269866943359375,0,0,0,0,0,0,0,0,0,0,0,0.181015014648438,0,0,0,0,0,0,0,0,0,0,0,0,0,0.270820617675781,0,0,0,0,0,0,0,0,0,0,0.177680969238281,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.261848449707031,0.140213012695312,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2.05654144287109,0.180152893066406,0,0,0,0,0,0,0,0,0,0,0,0.273780822753906,0.182876586914062,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.273635864257812,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.183113098144531,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.272575378417969,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.177436828613281,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.262176513671875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.93684387207031,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.273880004882812,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.18121337890625,0.273597717285156,0,0,0,0,0,0,0,0,0,0,0,0,0,0.181266784667969,0,0,0,0,0,0,0,0,0,0,0,0,0,0.274261474609375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.182792663574219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.270004272460938,0,0,0,0,0,0,0,0,0,0,0,0,0.173988342285156,0,0,0,0,0,0,0,0,0,0,0.220024108886719,0,0,0,0,0,0,0,0,0,0,-1.86691284179688,0,0,0,0,0,0,0,0,0,0,0,0,0.208023071289062,0,0,0,0,0,0,0,0.1405029296875,0,0,0,0,0,0,0,0.211677551269531,0.140792846679688,0,0,0,0,0,0,0,0.205375671386719,0,0,0,0,0,0,0,0,0,0,0,0.139694213867188,0,0,0,0,0,0,0,0.210418701171875,0,0,0,0,0,0,0.136611938476562,0,0,0,0,0,0,0,0,0,0,0.205825805664062,0.121665954589844,0,-1.65521240234375,0,0,0,0,0,0,0.138748168945312,0,0,0,0,0,0,0,0,0,0,0,0,0.209815979003906,0,0,0,0,0,0,0,0,0,0,0,0,0.141159057617188,0,0,0,0,0,0,0,0,0,0,0,0,0,0.210716247558594,0,0,0,0,0.140380859375,0,0,0,0,0,0,0,0,0,0,0,0,0.2073974609375,0,0,0,0,0,0,0,0.139823913574219,0,0,0,0,0,0,0,0,0,0,0,0.207427978515625,0,0,0,0,0,0,0,0,0,0,0,0,0,0.136077880859375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.149269104003906,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.68869018554688,0,0,0,0,0,0,0,0,0,0,0,0,0.20684814453125,0,0,0,0,0,0,0,0,0.140121459960938,0,0,0,0,0,0,0,0,0,0,0,0.211456298828125,0,0,0,0,0,0.139358520507812,0,0,0,0,0,0,0,0.210990905761719,0,0,0,0,0,0,0,0.140228271484375,0,0,0,0,0,0,0,0,0,0,0,0.209861755371094,0,0,0,0,0,0,0,0,0,0,0,0,0.342788696289062,0,0.106941223144531,0,0,0,0,0,0,0,0,0,0,-1.64434814453125,0,0,0,0,0,0,0,0,0,0,0,0.139617919921875,0,0,0,0,0,0,0,0,0,0,0,0,0,0.211174011230469,0,0.1409912109375,0,0.211227416992188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.139900207519531,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.20941162109375,0,0,0,0,0,0,0,0.140518188476562,0,0,0,0,0,0,0,0,0,0,0,0.206413269042969,0,0,0,0,0,0,0,0,0,0,0,0.136512756347656,0,0,0,0,0,0,0,0,0,0,-1.6744384765625,0,0,0,0,0,0.137809753417969,0,0,0,0,0,0,0,0.20831298828125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.140937805175781,0,0,0,0,0,0,0,0,0,0,0,0.211067199707031,0,0,0,0,0,0,0,0,0,0,0.140602111816406,0,0,0,0,0.210220336914062,0.139617919921875,0,0,0,0,0,0.209053039550781,0.137855529785156,0,0,0,0,0,0,0,0,0,0,0,0,0,0.204742431640625,0,0,0,0,0,0,0,0,0.0768661499023438,0,0,0,0,0,0,0,0,0,0,0,0,-1.61009216308594,0,0,0,0,0.138435363769531,0,0,0,0,0,0,0,0,0,0,0,0,0,0.21099853515625,0,0,0,0,0,0,0,0,0,0,0,0,0.140380859375,0,0,0,0,0,0,0,0,0,0,0,0.209709167480469,0,0,0,0,0,0,0,0.140129089355469,0,0,0,0,0,0,0,0.209243774414062,0,0,0,0,0.139625549316406,0,0,0,0,0,0,0,0,0,0,0,0,0.205833435058594,0.134872436523438,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.67057037353516,0,0,0.140953063964844,0,0,0.20806884765625,0.140350341796875,0,0,0,0,0,0.211257934570312,0,0,0,0,0,0,0,0,0,0,0.141220092773438,0,0,0,0,0,0,0.211174011230469,0,0,0,0,0,0.138374328613281,0,0,0,0,0,0,0.207550048828125,0,0,0,0,0,0,0,0,0,0,0,0,0,0.134910583496094,0,0,0,0,0,0,0,0,0,0.205589294433594,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.73950958251953,0,0,0,0,0,0,0,0,0,0,0,0,0,0.206344604492188,0,0,0,0,0,0,0,0,0,0.133949279785156,0,0,0,0,0,0,0.202354431152344,0,0,0,0,0,0.134597778320312,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.200523376464844,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.134101867675781,0,0,0,0,0,0,0,0,0.200965881347656,0,0,0,0,0,0,0,0,0,0,0,0,0.136428833007812,0.197662353515625,0,0,0,0,0,0,0,0.1351318359375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0994033813476562,0,0,0,0,0,0,0.0225753784179688,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.72984313964844,0,0,0.126167297363281,0,0,0,0,0,0,0,0,0,0,0.856590270996094,0.604896545410156,0,0,0,0,0,0,2.48296356201172,0,0,0,0,0,0,0,0,0,0,1.00925445556641,0,0,0,0,0,0,0,1.28196716308594,0.932075500488281,0,0,0,0,0,1.40807342529297,0,0,0,0.935165405273438,0,0,0,0,0,1.21708679199219,0,0,0,0,0,-10.3886566162109,0,0,0,0,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/Rtmp5jGtAJ/file3786b1270d601.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nHere we see that we spend most of our time on the functions `as_list` and `tibble`.\n\n# GPX reader version 2: no more tibble\n\n`tibble`s are somewhat heavy objects, and we can bind lists together instead of `tibble`s, so let's try that next. We only change one line from `read_gpx1`.\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-15_38b9d869cc230ac26fc0c13d7ed1ed2d'}\n\n```{.r .cell-code}\nread_gpx2 <- function(fname) {\n  run_xml <- read_xml(fname)\n  run_list <- as_list(run_xml)\n  \n  extract_gps_point <- function(point) {\n    list(lon = attr(point, \"lon\"),\n         lat = attr(point, \"lat\"),\n         ele = point$ele[[1]],\n         time = point$time[[1]])\n  }\n  \n  gps_df <- map_dfr(run_list$gpx$trk$trkseg, extract_gps_point)\n  get_metrics(gps_df)\n}\n\nresult_2 <- read_gpx2(fname)\nexpect_equal(expected, result_2)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval_bare(expr, quo_get_env(quo)): object 'expected' not found\n```\n:::\n:::\n\nOur results are still as expected, which is good.  We profile again to see if we've done any better, which we have. Now we're at about 1.5 seconds instead of 2.5 seconds.\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-16_f064e5673d6aa5744647fcb00363a64c'}\n\n```{.r .cell-code}\nprofvis(read_gpx2(fname))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-fbe7f258ff1cedcf0dd1\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-fbe7f258ff1cedcf0dd1\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,32,32,32,32,32,32,32,33,34,35,36,36,36,36,36,36,36,36,36,36,36,37,37,38,38,39,39,39,39,39,40,41,42,42,42,42],\"depth\":[18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,2,1,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,1,1,1,11,10,9,8,7,6,5,4,3,2,1,2,1,2,1,5,4,3,2,1,1,1,4,3,2,1],\"label\":[\"structure\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"$\",\"xml_text.xml_node\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"ifelse\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"vapply\",\"xml_name.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"as_list\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_attrs.xml_node\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"match.fun\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_attrs\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"structure\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"$\",\"xml_attrs.xml_node\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_attrs\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_text.xml_node\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"<GC>\",\"any\",\"$\",\"xml_type.xml_node\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_text.xml_node\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_attrs.xml_node\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"ifelse\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"as.list\",\"xml_to_r_attrs\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"ifelse\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"vapply\",\"xml_name.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"match.fun\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"$\",\"FUN\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\".f\",\"map\",\"map_dfr\",\"read_gpx2\",\"FUN\",\"vapply\",\".rlang_purrr_map_mold\",\"map_lgl\",\"dplyr::bind_rows\",\"map_dfr\",\"read_gpx2\",\".Call\",\".External2\",\".External2\",\"regexpr\",\".substitute_formats\",\"<Anonymous>\",\"mapply\",\".build_formats\",\"guess_formats\",\".best_formats\",\".local_parse\",\"parse_date_time\",\".parse_xxx_hms\",\"<Anonymous>\",\"arg_match\",\"mutate.data.frame\",\".f\",\"map2_dbl\",\"cbind\",\".geodist\",\".fn\",\".f\",\"map2_dbl\",\"is.matrix\",\".Call\",\".pointsToMatrix\",\".fn\",\".f\",\"map2_dbl\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[32.0725250244141,32.0725250244141,32.0725250244141,32.0725250244141,32.0725250244141,32.0725250244141,32.0725250244141,32.0725250244141,32.0725250244141,32.0725250244141,32.0725250244141,32.0725250244141,32.0725250244141,32.0725250244141,32.0725250244141,32.0725250244141,32.0725250244141,32.0725250244141,32.2445220947266,32.2445220947266,32.2445220947266,32.2445220947266,32.2445220947266,32.2445220947266,32.2445220947266,32.2445220947266,32.2445220947266,32.2445220947266,32.2445220947266,32.2445220947266,32.2445220947266,32.2445220947266,32.5045318603516,32.5045318603516,32.5045318603516,32.5045318603516,32.5045318603516,32.5045318603516,32.5045318603516,32.5045318603516,32.5045318603516,32.5045318603516,32.5045318603516,32.5045318603516,32.5045318603516,32.5045318603516,32.5045318603516,32.5045318603516,32.5045318603516,32.5045318603516,32.5045318603516,32.6763076782227,32.6763076782227,32.6763076782227,32.6763076782227,32.6763076782227,32.6763076782227,32.6763076782227,32.6763076782227,32.6763076782227,32.6763076782227,32.6763076782227,32.6763076782227,32.9349899291992,32.9349899291992,32.9349899291992,32.9349899291992,32.9349899291992,32.9349899291992,32.9349899291992,32.9349899291992,32.9349899291992,32.9349899291992,32.9349899291992,32.9349899291992,32.9349899291992,32.9349899291992,33.1080093383789,33.1080093383789,33.1080093383789,33.1080093383789,33.1080093383789,33.1080093383789,33.1080093383789,33.1080093383789,33.1080093383789,33.1080093383789,33.1080093383789,33.1080093383789,33.1080093383789,33.3668823242188,33.3668823242188,33.3668823242188,33.3668823242188,33.3668823242188,33.3668823242188,33.3668823242188,33.3668823242188,33.3668823242188,33.3668823242188,33.3668823242188,33.3668823242188,33.3668823242188,33.3668823242188,33.5382080078125,33.5382080078125,33.5382080078125,33.5382080078125,33.5382080078125,33.5382080078125,33.5382080078125,33.5382080078125,33.5382080078125,33.5382080078125,33.5382080078125,33.5382080078125,33.5382080078125,33.5382080078125,33.5382080078125,33.7877731323242,33.7877731323242,33.7877731323242,33.7877731323242,33.7877731323242,33.7877731323242,33.7877731323242,33.7877731323242,33.7877731323242,33.7877731323242,33.7877731323242,33.7877731323242,33.7877731323242,33.7877731323242,33.7877731323242,33.7877731323242,33.7877731323242,33.7877731323242,33.9516296386719,33.9516296386719,33.9516296386719,33.9516296386719,33.9516296386719,33.9516296386719,33.9516296386719,33.9516296386719,33.9516296386719,33.9516296386719,33.9516296386719,33.9516296386719,34.2027435302734,34.2027435302734,34.2027435302734,34.2027435302734,34.2027435302734,34.2027435302734,34.2027435302734,34.2027435302734,34.2027435302734,34.2027435302734,34.2027435302734,34.2027435302734,34.2027435302734,34.2027435302734,34.2027435302734,34.2027435302734,34.2027435302734,34.2027435302734,34.3510513305664,34.3510513305664,34.3510513305664,34.3510513305664,34.3510513305664,34.3510513305664,34.3510513305664,34.3510513305664,34.3510513305664,34.3510513305664,34.3510513305664,34.3510513305664,34.3510513305664,34.3510513305664,34.3510513305664,34.3510513305664,34.5648498535156,34.5648498535156,34.5648498535156,34.5648498535156,34.5648498535156,34.5648498535156,34.5648498535156,34.5648498535156,34.5648498535156,34.5648498535156,34.5648498535156,34.5648498535156,34.5648498535156,34.5648498535156,34.5648498535156,34.7073059082031,34.7073059082031,34.7073059082031,34.7073059082031,34.7073059082031,34.7073059082031,34.7073059082031,34.7073059082031,34.7073059082031,34.7073059082031,34.7073059082031,34.7073059082031,34.7073059082031,34.7073059082031,34.7073059082031,34.7073059082031,34.9238739013672,34.9238739013672,34.9238739013672,34.9238739013672,34.9238739013672,34.9238739013672,34.9238739013672,34.9238739013672,34.9238739013672,34.9238739013672,34.9238739013672,34.9238739013672,34.9238739013672,34.9238739013672,34.9238739013672,34.9238739013672,34.9238739013672,34.9238739013672,35.0687484741211,35.0687484741211,35.0687484741211,35.0687484741211,35.0687484741211,35.0687484741211,35.0687484741211,35.0687484741211,35.0687484741211,35.0687484741211,35.0687484741211,35.0687484741211,35.0687484741211,35.0687484741211,35.2870559692383,35.2870559692383,35.2870559692383,35.2870559692383,35.2870559692383,35.2870559692383,35.2870559692383,35.2870559692383,35.2870559692383,35.2870559692383,35.2870559692383,35.2870559692383,35.2870559692383,35.2870559692383,35.4319000244141,35.4319000244141,35.4319000244141,35.4319000244141,35.4319000244141,35.4319000244141,35.4319000244141,35.4319000244141,35.4319000244141,35.4319000244141,35.4319000244141,35.4319000244141,35.4319000244141,35.4319000244141,35.4319000244141,35.4319000244141,35.5663299560547,35.5663299560547,31.7782287597656,31.7782287597656,31.7782287597656,31.7782287597656,31.7782287597656,31.7782287597656,31.7782287597656,31.7782287597656,31.7782287597656,31.7782287597656,31.7782287597656,31.7782287597656,31.7782287597656,31.7782287597656,31.7782287597656,31.7782287597656,31.7782287597656,31.7782287597656,31.7782287597656,32.0356826782227,32.0356826782227,32.0356826782227,32.0356826782227,32.0356826782227,32.0356826782227,32.0356826782227,32.0356826782227,32.0356826782227,32.0356826782227,32.0356826782227,32.0356826782227,32.0356826782227,32.0356826782227,32.0356826782227,32.0356826782227,32.0356826782227,32.0356826782227,32.206672668457,32.206672668457,32.206672668457,32.206672668457,32.206672668457,32.206672668457,32.206672668457,32.206672668457,32.206672668457,32.206672668457,32.206672668457,32.206672668457,32.4653091430664,32.4653091430664,32.4653091430664,32.4653091430664,32.4653091430664,32.4653091430664,32.4653091430664,32.4653091430664,32.4653091430664,32.4653091430664,32.4653091430664,32.4653091430664,32.6365737915039,32.6365737915039,32.6365737915039,32.6365737915039,32.6365737915039,32.6365737915039,32.6365737915039,32.6365737915039,32.6365737915039,32.6365737915039,32.6365737915039,32.6365737915039,32.6365737915039,32.6365737915039,32.6365737915039,32.8959274291992,32.8959274291992,32.8959274291992,32.8959274291992,32.8959274291992,32.8959274291992,32.8959274291992,32.8959274291992,32.8959274291992,32.8959274291992,32.8959274291992,32.8959274291992,32.8959274291992,33.0696258544922,33.0696258544922,33.0696258544922,33.0696258544922,33.0696258544922,33.0696258544922,33.0696258544922,33.0696258544922,33.0696258544922,33.0696258544922,33.0696258544922,33.0696258544922,33.3270263671875,33.3270263671875,33.3270263671875,33.3270263671875,33.3270263671875,33.3270263671875,33.3270263671875,33.3270263671875,33.3270263671875,33.3270263671875,33.3270263671875,33.3270263671875,33.3270263671875,33.4954376220703,33.4954376220703,33.4954376220703,33.4954376220703,33.4954376220703,33.4954376220703,33.4954376220703,33.4954376220703,33.4954376220703,33.4954376220703,33.4954376220703,33.4954376220703,33.4954376220703,33.4954376220703,33.4954376220703,33.4954376220703,33.4954376220703,33.4954376220703,33.4954376220703,33.4954376220703,33.4954376220703,33.7412948608398,33.7412948608398,33.7412948608398,33.7412948608398,33.7412948608398,33.7412948608398,33.7412948608398,33.7412948608398,33.7412948608398,33.7412948608398,33.7412948608398,33.7412948608398,33.7412948608398,33.7412948608398,33.7412948608398,33.9075927734375,33.9075927734375,33.9075927734375,33.9075927734375,33.9075927734375,33.9075927734375,33.9075927734375,33.9075927734375,33.9075927734375,33.9075927734375,33.9075927734375,33.9075927734375,33.9075927734375,33.9075927734375,33.9075927734375,33.9075927734375,33.9075927734375,33.9075927734375,34.1991806030273,34.1991806030273,34.1991806030273,34.1991806030273,34.5042724609375,34.5042724609375,34.5042724609375,34.5042724609375,34.5042724609375,34.5042724609375,34.5042724609375,35.1844100952148,36.5859069824219,37.2265167236328,39.566650390625,39.566650390625,39.566650390625,39.566650390625,39.566650390625,39.566650390625,39.566650390625,39.566650390625,39.566650390625,39.566650390625,39.566650390625,40.881103515625,40.881103515625,41.7832107543945,41.7832107543945,32.2932052612305,32.2932052612305,32.2932052612305,32.2932052612305,32.2932052612305,33.2427444458008,34.6618881225586,35.6174774169922,35.6174774169922,35.6174774169922,35.6174774169922],\"meminc\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1719970703125,0,0,0,0,0,0,0,0,0,0,0,0,0,0.260009765625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.171775817871094,0,0,0,0,0,0,0,0,0,0,0,0.258682250976562,0,0,0,0,0,0,0,0,0,0,0,0,0,0.173019409179688,0,0,0,0,0,0,0,0,0,0,0,0,0.258872985839844,0,0,0,0,0,0,0,0,0,0,0,0,0,0.17132568359375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.249565124511719,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.163856506347656,0,0,0,0,0,0,0,0,0,0,0,0.251113891601562,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.148307800292969,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.213798522949219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1424560546875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.216567993164062,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.144874572753906,0,0,0,0,0,0,0,0,0,0,0,0,0,0.218307495117188,0,0,0,0,0,0,0,0,0,0,0,0,0,0.144844055175781,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.134429931640625,0,-3.78810119628906,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.257453918457031,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.170989990234375,0,0,0,0,0,0,0,0,0,0,0,0.258636474609375,0,0,0,0,0,0,0,0,0,0,0,0.1712646484375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.259353637695312,0,0,0,0,0,0,0,0,0,0,0,0,0.173698425292969,0,0,0,0,0,0,0,0,0,0,0,0.257400512695312,0,0,0,0,0,0,0,0,0,0,0,0,0.168411254882812,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.245857238769531,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.166297912597656,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.305091857910156,0,0,0,0,0,0,0.680137634277344,1.40149688720703,0.640609741210938,2.34013366699219,0,0,0,0,0,0,0,0,0,0,1.314453125,0,0.902107238769531,0,-9.49000549316406,0,0,0,0,0.949539184570312,1.41914367675781,0.955589294433594,0,0,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/Rtmp5jGtAJ/file3786b280d6a0a.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nI needed to this for about fifty files though, so this was still slow enough to be somewhat frustrating. Now `xml2::as_list` is really killing us. \n\n## GPX reader version 3: now with more xml2\n\nLuckily, we can use `xml2` to manipulate the XML via a fast C package instead. For this next part I tried functions exported by `xml2` until they worked and occasionally read the documentation.\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-17_b30b505cba6000ddf91e1fdf5bd8a9aa'}\n\n```{.r .cell-code}\nread_gpx_xml <- function(fname) {\n  # get the interested nodes\n  run_xml <- read_xml(fname)\n  trk <- xml_child(run_xml, 2)\n  trkseg <- xml_child(trk, 2)\n  trkpts <- xml_children(trkseg)  # nodeset where each node is a GPS reading\n  \n  # get the longitude and latitude for each node\n  latlon_list <- xml_attrs(trkpts)  \n  latlon <- do.call(rbind, latlon_list)\n  \n  # get the time and elevation for each node\n  ele_time_vec <- xml_text(xml_children(trkpts))\n  ele_time <- matrix(ele_time_vec, ncol = 2, byrow = TRUE)\n  colnames(ele_time) <- c(\"ele\", \"time\")\n  \n  as_tibble(cbind(latlon, ele_time))\n}\n\nread_gpx3 <- function(fname) {\n  gps_df <- read_gpx_xml(fname)\n  get_metrics(gps_df)\n}\n\nresult_3 <- read_gpx3(fname)\nexpect_equal(expected, result_3)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval_bare(expr, quo_get_env(quo)): object 'expected' not found\n```\n:::\n:::\n\nAgain we see if there's anywhere else we can speed things up:\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-18_7429ffef4329be87b39bfa4118b91a86'}\n\n```{.r .cell-code}\nprofvis(read_gpx3(fname))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-0c262e4193a40bde95a2\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-0c262e4193a40bde95a2\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,10,10,11,12],\"depth\":[4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,3,2,1,3,2,1,3,2,1,5,4,3,2,1,1,1],\"label\":[\"lapply\",\"xml_attrs.xml_nodeset\",\"read_gpx_xml\",\"read_gpx3\",\"$\",\"FUN\",\"lapply\",\"nodeset_apply.xml_nodeset\",\"xml_children\",\"read_gpx_xml\",\"read_gpx3\",\"structure\",\"FUN\",\"lapply\",\"make_nodeset\",\"nodeset_apply.xml_nodeset\",\"xml_children\",\"read_gpx_xml\",\"read_gpx3\",\"vapply\",\"xml_text.xml_nodeset\",\"read_gpx_xml\",\"read_gpx3\",\"sys.calls\",\"add_handler\",\"defer\",\"local_bindings\",\"walk_data_tree\",\"reduce_sels\",\"eval_c\",\"walk_data_tree\",\"vars_select_eval\",\"eval_select_impl\",\"tidyselect::vars_select\",\"tbl_at_vars\",\"tbl_at_syms\",\"manip_at\",\"mutate_at\",\"regexpr\",\".substitute_formats\",\"<Anonymous>\",\"mapply\",\".build_formats\",\"guess_formats\",\".best_formats\",\".local_parse\",\"parse_date_time\",\".parse_xxx_hms\",\"<Anonymous>\",\"enquos\",\"dplyr_quosures\",\"mutate.data.frame\",\".fn\",\".f\",\"map2_dbl\",\".fn\",\".f\",\"map2_dbl\",\"matrix\",\".pointsToMatrix\",\".fn\",\".f\",\"map2_dbl\",\".Call\",\"standardGeneric\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[32.3048858642578,32.3048858642578,32.3048858642578,32.3048858642578,32.5485382080078,32.5485382080078,32.5485382080078,32.5485382080078,32.5485382080078,32.5485382080078,32.5485382080078,33.1659088134766,33.1659088134766,33.1659088134766,33.1659088134766,33.1659088134766,33.1659088134766,33.1659088134766,33.1659088134766,33.4827117919922,33.4827117919922,33.4827117919922,33.4827117919922,33.7444458007812,33.7444458007812,33.7444458007812,33.7444458007812,33.7444458007812,33.7444458007812,33.7444458007812,33.7444458007812,33.7444458007812,33.7444458007812,33.7444458007812,33.7444458007812,33.7444458007812,33.7444458007812,33.7444458007812,35.0086059570312,35.0086059570312,35.0086059570312,35.0086059570312,35.0086059570312,35.0086059570312,35.0086059570312,35.0086059570312,35.0086059570312,35.0086059570312,35.0086059570312,37.148551940918,37.148551940918,37.148551940918,37.9847640991211,37.9847640991211,37.9847640991211,39.4032287597656,39.4032287597656,39.4032287597656,40.3528900146484,40.3528900146484,40.3528900146484,40.3528900146484,40.3528900146484,41.7720413208008,42.7245178222656],\"meminc\":[0,0,0,0,0.24365234375,0,0,0,0,0,0,0.61737060546875,0,0,0,0,0,0,0,0.316802978515625,0,0,0,0.261734008789062,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.26416015625,0,0,0,0,0,0,0,0,0,0,2.13994598388672,0,0,0.836212158203125,0,0,1.41846466064453,0,0,0.949661254882812,0,0,0,0,1.41915130615234,0.952476501464844],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/Rtmp5jGtAJ/file3786b1b4d04d6.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nWe're way faster, taking less than half a second! Now the most time is spent on `raster::pointDistance`, which we call a ton of times. What does `pointDistance` do? It takes two pairs `(lat1, lon1)` and `(lat2, lon2)` the distance between them[^2].\n\n[^2]: We can't calculate the distance using the L2 norm because longitude and latitude are spherical coordinates, not Euclidean coordinates.\n\n## GPX reader version 4: drop into Rcpp\n\nNext I Googled how to perform this calculation myself and found [this](http://www.movable-type.co.uk/scripts/latlong.html#ellipsoid) and [this](https://www.r-bloggers.com/great-circle-distance-calculations-in-r/). The `Rcpp` implementation looks like:\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-19_2b2d65670cebb612058ec98848fb1b75'}\n\n```{.rcpp .cell-code}\n#include <Rcpp.h>\n\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\ndouble haversine_dist(const NumericVector p1, const NumericVector p2) {\n  \n  double lat1 = p1[0] * M_PI / 180;\n  double lon1 = p1[1] * M_PI / 180;\n  double lat2 = p2[0] * M_PI / 180;\n  double lon2 = p2[1] * M_PI / 180;\n  \n  double d_lat = lat2 - lat1;\n  double d_lon = lon2 - lon1;\n  \n  double a = pow(sin(d_lat / 2.0), 2) + \n    cos(lat1) * cos(lat2) * pow(sin(d_lon / 2.0), 2);\n  double c = 2 * asin(std::min(1.0, sqrt(a)));\n  \n  return 6378137 * c; // 6378137 is the radius of the earth in meters\n}\n```\n:::\n\nThe haversine distance is fast to calculate at the cost of some small error, which we can see below:\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-20_fb0ac38d8479c8d42dab0b231d92645a'}\n\n```{.r .cell-code}\np1 <- c(0, 0)\np2 <- c(1, 1)\n\ndist_expected <- raster::pointDistance(p1, p2, lonlat = TRUE)\ndist_result <- haversine_dist(p1, p2)\n\ndist_result - dist_expected\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 525.9688\n```\n:::\n:::\n\nIt turns out that \"small error\" on the geological scale is big error on the neighborhood run scale. Put all together, the C++ version looks like:\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-21_5906d1ee7480d15418e8dbbed2ecc93a'}\n\n```{.r .cell-code}\nread_gpx4 <- function(fname) {\n  gps_df <- read_gpx_xml(fname)\n  get_metrics(gps_df, dist_func = haversine_dist)\n}\n```\n:::\n\nWe profile one more time:\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-22_008db92256326f7ee696fe527662609e'}\n\n```{.r .cell-code}\nprofvis(read_gpx4(fname))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-d75ea8df29122ec34191\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-d75ea8df29122ec34191\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7],\"depth\":[6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1],\"label\":[\"vapply\",\"is.na.xml_nodeset\",\"nodeset_apply.xml_nodeset\",\"xml_children\",\"read_gpx_xml\",\"read_gpx4\",\"lapply\",\"make_nodeset\",\"nodeset_apply.xml_nodeset\",\"xml_children\",\"read_gpx_xml\",\"read_gpx4\",\"vapply\",\"xml_text.xml_nodeset\",\"read_gpx_xml\",\"read_gpx4\",\"set_repaired_names\",\"lst_to_tibble\",\"as_tibble.data.frame\",\"as_tibble.matrix\",\"read_gpx_xml\",\"read_gpx4\",\".substitute_formats\",\"<Anonymous>\",\"mapply\",\".build_formats\",\"guess_formats\",\".best_formats\",\".local_parse\",\"parse_date_time\",\".parse_xxx_hms\",\"<Anonymous>\",\"is_symbol\",\"FUN\",\"lapply\",\"map\",\"endots\",\"enquos\",\"dplyr_quosures\",\"mutate.data.frame\",\".f\",\"map2_dbl\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[32.339599609375,32.339599609375,32.339599609375,32.339599609375,32.339599609375,32.339599609375,32.7711410522461,32.7711410522461,32.7711410522461,32.7711410522461,32.7711410522461,32.7711410522461,33.3884429931641,33.3884429931641,33.3884429931641,33.3884429931641,33.5942001342773,33.5942001342773,33.5942001342773,33.5942001342773,33.5942001342773,33.5942001342773,34.6398162841797,34.6398162841797,34.6398162841797,34.6398162841797,34.6398162841797,34.6398162841797,34.6398162841797,34.6398162841797,34.6398162841797,34.6398162841797,36.7517776489258,36.7517776489258,36.7517776489258,36.7517776489258,36.7517776489258,36.7517776489258,36.7517776489258,36.7517776489258,38.160041809082,38.160041809082],\"meminc\":[0,0,0,0,0,0,0.431541442871094,0,0,0,0,0,0.617301940917969,0,0,0,0.205757141113281,0,0,0,0,0,1.04561614990234,0,0,0,0,0,0,0,0,0,2.11196136474609,0,0,0,0,0,0,0,1.40826416015625,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/Rtmp5jGtAJ/file3786b65dade2f.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nNow it takes only about 0.1 seconds, but the result isn't accurate enough anymore. I wasn't in the mood to implement a more precise great circle distance calculation, but hopefully this illustrates the general principle of dropping into `Rcpp` and also why it's important to test when profiling.\n\n## Comparing the various GPX readers\n\nNow we can compare how long each version takes using the `bench` package.\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-23_8ff9c13fd05933fff466db04ca431978'}\n\n```{.r .cell-code}\nlibrary(bench)\n\nmark(\n  read_gpx0(fname),\n  read_gpx1(fname),\n  read_gpx2(fname),\n  read_gpx3(fname),\n  read_gpx4(fname),\n  iterations = 5,   # how many times to run everything. 5 is very low.\n  relative = TRUE,\n  check = FALSE     # since readgpx4 isn't right, will error without this\n)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in loadNamespace(x): there is no package called 'plotKML'\n```\n:::\n:::\n\nHere timings are relative. We see that `read_gpx4` is about ten times faster than `read_gpx1` and two times faster than `read_gpx0`.\n\n## Embarrassing parallelization with `furrr`\n\nIn the end, I needed to do this for about fifty files. Since we can process each file independently of the other files, this operation is *embarrassingly parallel*. I actually wanted to use this data, so I didn't use the C++ haversine distance function. We can write with a single `map` call to process all the files at once:\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-24_1678804fbb5d366ef05553b745315cbb'}\n\n```{.r .cell-code}\nrun_files_subset <- run_files[1:10]\n\nmap_dfr(run_files_subset, read_gpx3, .id = \"run\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11,780 × 11\n   run     lat   lon time                seg…¹ seg…²      dx      dt speed  pace\n   <chr> <dbl> <dbl> <dttm>              <dbl> <drt>   <dbl>   <dbl> <dbl> <dbl>\n 1 1      29.7 -95.4 2017-10-29 18:31:00     2 907 … 0.00250 2.78e-4  9.00  6.67\n 2 1      29.7 -95.4 2017-10-29 18:31:01     2 907 … 0.00245 2.78e-4  8.81  6.81\n 3 1      29.7 -95.4 2017-10-29 18:31:02     2 907 … 0.00234 2.78e-4  8.41  7.13\n 4 1      29.7 -95.4 2017-10-29 18:31:03     2 907 … 0.00289 2.78e-4 10.4   5.77\n 5 1      29.7 -95.4 2017-10-29 18:31:04     2 907 … 0.00341 2.78e-4 12.3   4.88\n 6 1      29.7 -95.4 2017-10-29 18:31:05     2 907 … 0.00315 2.78e-4 11.4   5.29\n 7 1      29.7 -95.4 2017-10-29 18:31:06     2 907 … 0.00761 2.78e-4 27.4   2.19\n 8 1      29.7 -95.4 2017-10-29 18:31:08     2 907 … 0.00244 5.56e-4  4.39 13.7 \n 9 1      29.7 -95.4 2017-10-29 18:31:09     2 907 … 0.00322 2.78e-4 11.6   5.18\n10 1      29.7 -95.4 2017-10-29 18:31:11     2 907 … 0.00349 5.56e-4  6.28  9.55\n# … with 11,770 more rows, abbreviated variable names ¹​segment, ²​seg_length,\n#   and 1 more variable: elev <dbl>\n```\n:::\n:::\n\nWhich means we can also write this as a parallelized `map` call with `furrr` like so:\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-25_57cd02099522a92bf9e0942ea56c607c'}\n\n```{.r .cell-code}\nlibrary(furrr)\nplan(multiprocess)\n\nfuture_map_dfr(run_files_subset, read_gpx3, .id = \"run\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11,780 × 11\n   run     lat   lon time                seg…¹ seg…²      dx      dt speed  pace\n   <chr> <dbl> <dbl> <dttm>              <dbl> <drt>   <dbl>   <dbl> <dbl> <dbl>\n 1 1      29.7 -95.4 2017-10-29 18:31:00     2 907 … 0.00250 2.78e-4  9.00  6.67\n 2 1      29.7 -95.4 2017-10-29 18:31:01     2 907 … 0.00245 2.78e-4  8.81  6.81\n 3 1      29.7 -95.4 2017-10-29 18:31:02     2 907 … 0.00234 2.78e-4  8.41  7.13\n 4 1      29.7 -95.4 2017-10-29 18:31:03     2 907 … 0.00289 2.78e-4 10.4   5.77\n 5 1      29.7 -95.4 2017-10-29 18:31:04     2 907 … 0.00341 2.78e-4 12.3   4.88\n 6 1      29.7 -95.4 2017-10-29 18:31:05     2 907 … 0.00315 2.78e-4 11.4   5.29\n 7 1      29.7 -95.4 2017-10-29 18:31:06     2 907 … 0.00761 2.78e-4 27.4   2.19\n 8 1      29.7 -95.4 2017-10-29 18:31:08     2 907 … 0.00244 5.56e-4  4.39 13.7 \n 9 1      29.7 -95.4 2017-10-29 18:31:09     2 907 … 0.00322 2.78e-4 11.6   5.18\n10 1      29.7 -95.4 2017-10-29 18:31:11     2 907 … 0.00349 5.56e-4  6.28  9.55\n# … with 11,770 more rows, abbreviated variable names ¹​segment, ²​seg_length,\n#   and 1 more variable: elev <dbl>\n```\n:::\n:::\n\nNote that other than loading `furrr` and calling `plan(multiprocess)` all we've had to do to get parallelism is to call `furrr::future_map_dfr`, which has exactly the same API as `purrr::map_dfr`. My computer has two cores, meaning there's a maximum possible speedup of two, and we achieve nearly that:\n\n::: {.cell hash='speeding-up-gpx-ingest-profiling-rcpp-and-furrr_cache/html/unnamed-chunk-26_f3ba3344cea5b246a0e2407566824454'}\n\n```{.r .cell-code}\nmark( \n  map_dfr(run_files_subset, read_gpx3, .id = \"run\"),\n  future_map_dfr(run_files_subset, read_gpx3, .id = \"run\"),\n  iterations = 5,\n  relative = TRUE\n)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: Memory profiling failed.\n  If you are benchmarking parallel code you must set `memory = FALSE`.\n```\n:::\n:::\n\n## Wrap Up\n\nThis was a low stakes exercise in speeding up R code. By the time I'd written all of these it would have been several hundred times faster to use `read_gpx0` and just save the results to a `.rds` file. Still, it was fun to work through the profiling workflow and I look forward to enterprising strangers on the internet pointing out places where things can get faster still.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/jquery-1.12.4/jquery.min.js\"></script>\n<script src=\"../../site_libs/d3-3.5.6/d3.min.js\"></script>\n<link href=\"../../site_libs/profvis-0.3.6.9000/profvis.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/profvis-0.3.6.9000/profvis.js\"></script>\n<script src=\"../../site_libs/profvis-0.3.6.9000/scroll.js\"></script>\n<link href=\"../../site_libs/highlight-6.2.0/textmate.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/highlight-6.2.0/highlight.js\"></script>\n<script src=\"../../site_libs/profvis-binding-0.3.7.9000/profvis.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}