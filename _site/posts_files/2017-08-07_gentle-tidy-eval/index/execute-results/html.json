{
  "hash": "58b1984443a9b157435c9c0c7d7f55e0",
  "result": {
    "markdown": "---\ntitle: \"gentle tidy eval with examples\"\nsubtitle: |\n  Copy-pasteable example code for people who want to program around the tidyverse.\ndate: \"2017-08-07\"\nexecute:\n  echo: true\n  message: false\n  warning: false\n---\n\nI've been using the tidy eval framework introduced with `dplyr 0.7` for about two months now, and it's time for an update to my original post on tidy eval. My goal is not to explain tidy eval to you, but rather to show you some simple examples that you can easily generalize from.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nstarwars\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 × 14\n   name  hei…¹  mass hai…² ski…³ eye…⁴ bir…⁵ sex   gen…⁶ hom…⁷ spe…⁸ films veh…⁹\n   <chr> <int> <dbl> <chr> <chr> <chr> <dbl> <chr> <chr> <chr> <chr> <lis> <lis>\n 1 Luke…   172    77 blond fair  blue   19   male  masc… Tato… Human <chr> <chr>\n 2 C-3PO   167    75 <NA>  gold  yell… 112   none  masc… Tato… Droid <chr> <chr>\n 3 R2-D2    96    32 <NA>  whit… red    33   none  masc… Naboo Droid <chr> <chr>\n 4 Dart…   202   136 none  white yell…  41.9 male  masc… Tato… Human <chr> <chr>\n 5 Leia…   150    49 brown light brown  19   fema… femi… Alde… Human <chr> <chr>\n 6 Owen…   178   120 brow… light blue   52   male  masc… Tato… Human <chr> <chr>\n 7 Beru…   165    75 brown light blue   47   fema… femi… Tato… Human <chr> <chr>\n 8 R5-D4    97    32 <NA>  whit… red    NA   none  masc… Tato… Droid <chr> <chr>\n 9 Bigg…   183    84 black light brown  24   male  masc… Tato… Human <chr> <chr>\n10 Obi-…   182    77 aubu… fair  blue…  57   male  masc… Stew… Human <chr> <chr>\n# … with 77 more rows, abbreviated variable names ¹​height, ²​hair_color,\n#   ³​skin_color, ⁴​eye_color, ⁵​birth_year, ⁶​gender, ⁷​homeworld, ⁸​species,\n#   ⁹​vehicles, and 1 more variable: starships <list>\n```\n:::\n:::\n\n## Using strings to refer to column names\n\nTo refer to columns in a data frame with strings, we need to convert those strings into symbol objects with `rlang::sym` and `rlang::syms`. We then use the created symbol objects in dplyr functions with the prefixes `!!` and `!!!`. This is because `dplyr` verbs expect input that looks like code. Using the `sym/syms` functions we can convert strings into objects that look like code.\n\n::: {.cell}\n\n```{.r .cell-code}\nmass <- rlang::sym(\"mass\")                        # create a single symbol\ngroups <- rlang::syms(c(\"homeworld\", \"species\"))  # create a list of symbols\n\nstarwars %>%\n  group_by(!!!groups) %>%               # use list of symbols with !!!\n  summarize(avg_mass = mean(!!mass))    # use single symbol with !!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 58 × 3\n# Groups:   homeworld [49]\n   homeworld      species   avg_mass\n   <chr>          <chr>        <dbl>\n 1 Alderaan       Human         NA  \n 2 Aleen Minor    Aleena        15  \n 3 Bespin         Human         79  \n 4 Bestine IV     Human        110  \n 5 Cato Neimoidia Neimodian     90  \n 6 Cerea          Cerean        82  \n 7 Champala       Chagrian      NA  \n 8 Chandrila      Human         NA  \n 9 Concord Dawn   Human         79  \n10 Corellia       Human         78.5\n# … with 48 more rows\n```\n:::\n:::\n\nThe usage `mass <- rlang::sym(\"mass\")` is Hadley approved:\n\n::: {.cell}\n::: {.cell-output-display}\n`{{% tweet \"885993307968593920\" %}}`{=html}\n:::\n:::\n\nI believe it is also the current tidyverse code style standard. We use `rlang::sym` and `rlang::syms` identically inside functions.\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize_by <- function(df, groups, to_summarize) {\n  df %>%\n    group_by(!!!rlang::syms(groups)) %>%\n    summarize(summarized_mean = mean(!!rlang::sym(to_summarize)))\n}\n\nsummarize_by(starwars, c(\"homeworld\", \"species\"), \"mass\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 58 × 3\n# Groups:   homeworld [49]\n   homeworld      species   summarized_mean\n   <chr>          <chr>               <dbl>\n 1 Alderaan       Human                NA  \n 2 Aleen Minor    Aleena               15  \n 3 Bespin         Human                79  \n 4 Bestine IV     Human               110  \n 5 Cato Neimoidia Neimodian            90  \n 6 Cerea          Cerean               82  \n 7 Champala       Chagrian             NA  \n 8 Chandrila      Human                NA  \n 9 Concord Dawn   Human                79  \n10 Corellia       Human                78.5\n# … with 48 more rows\n```\n:::\n:::\n\n## Details about unquoting\n\n`!!` and `!!!` are syntactic sugar on top of the functions `UQ()` and `UQS()`, respectively. It used to be that `!!` and `!!!` had low operator precedence, meaning that in terms of PEMDAS they came pretty much last. But now we can use them more intuitively:\n\n::: {.cell}\n\n```{.r .cell-code}\nhomeworld <- rlang::sym(\"homeworld\")\n\nfilter(starwars, !!homeworld == \"Alderaan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 14\n  name   hei…¹  mass hai…² ski…³ eye…⁴ bir…⁵ sex   gen…⁶ hom…⁷ spe…⁸ films veh…⁹\n  <chr>  <int> <dbl> <chr> <chr> <chr> <dbl> <chr> <chr> <chr> <chr> <lis> <lis>\n1 Leia …   150    49 brown light brown    19 fema… femi… Alde… Human <chr> <chr>\n2 Bail …   191    NA black tan   brown    67 male  masc… Alde… Human <chr> <chr>\n3 Raymu…   188    79 brown light brown    NA male  masc… Alde… Human <chr> <chr>\n# … with abbreviated variable names ¹​height, ²​hair_color, ³​skin_color,\n#   ⁴​eye_color, ⁵​birth_year, ⁶​gender, ⁷​homeworld, ⁸​species, ⁹​vehicles, and 1\n#   more variable: starships <list>\n```\n:::\n:::\n\nWe can also use `UQ` and `UQS` directly to be explicit about what we're unquoting.\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(starwars, UQ(homeworld) == \"Alderaan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 14\n  name   hei…¹  mass hai…² ski…³ eye…⁴ bir…⁵ sex   gen…⁶ hom…⁷ spe…⁸ films veh…⁹\n  <chr>  <int> <dbl> <chr> <chr> <chr> <dbl> <chr> <chr> <chr> <chr> <lis> <lis>\n1 Leia …   150    49 brown light brown    19 fema… femi… Alde… Human <chr> <chr>\n2 Bail …   191    NA black tan   brown    67 male  masc… Alde… Human <chr> <chr>\n3 Raymu…   188    79 brown light brown    NA male  masc… Alde… Human <chr> <chr>\n# … with abbreviated variable names ¹​height, ²​hair_color, ³​skin_color,\n#   ⁴​eye_color, ⁵​birth_year, ⁶​gender, ⁷​homeworld, ⁸​species, ⁹​vehicles, and 1\n#   more variable: starships <list>\n```\n:::\n:::\n\n## Creating non-standard functions\n\nSometimes it is nice to write functions that use accept non-standard inputs, like `dplyr` verbs. For example, we might want to write a function with the same effect as\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  group_by(homeworld, species) %>% \n  summarize(avg_mass = mean(mass))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 58 × 3\n# Groups:   homeworld [49]\n   homeworld      species   avg_mass\n   <chr>          <chr>        <dbl>\n 1 Alderaan       Human         NA  \n 2 Aleen Minor    Aleena        15  \n 3 Bespin         Human         79  \n 4 Bestine IV     Human        110  \n 5 Cato Neimoidia Neimodian     90  \n 6 Cerea          Cerean        82  \n 7 Champala       Chagrian      NA  \n 8 Chandrila      Human         NA  \n 9 Concord Dawn   Human         79  \n10 Corellia       Human         78.5\n# … with 48 more rows\n```\n:::\n:::\n\nTo this we need to capture our input in `quosures` with `quo` and `quos` when programming interactively.\n\n::: {.cell}\n\n```{.r .cell-code}\ngroups <- quos(homeworld, species)   # capture a list of variables as raw input\nmass <- quo(mass)                    # capture a single variable as raw input\n\nstarwars %>% \n  group_by(!!!groups) %>%            # use !!! to access variables from `quos`\n  summarize(avg_mass = sum(!!mass))  # use !! to access the variable in `quo`\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 58 × 3\n# Groups:   homeworld [49]\n   homeworld      species   avg_mass\n   <chr>          <chr>        <dbl>\n 1 Alderaan       Human           NA\n 2 Aleen Minor    Aleena          15\n 3 Bespin         Human           79\n 4 Bestine IV     Human          110\n 5 Cato Neimoidia Neimodian       90\n 6 Cerea          Cerean          82\n 7 Champala       Chagrian        NA\n 8 Chandrila      Human           NA\n 9 Concord Dawn   Human           79\n10 Corellia       Human          157\n# … with 48 more rows\n```\n:::\n:::\n\nThere's some nice symmetry here in that we unwrap both `rlang::sym` and `quo` with `!!` and both `rlang::syms` and `quos` with `!!!`.\n\nWe might be interested in using this behavior in a function. To do this we replace calls to `quo` with calls to `enquo`.\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize_by <- function(df, to_summarize, ...) {\n\n  to_summarize <- enquo(to_summarize)  # enquo captures a single argument\n  groups <- quos(...)                  # quos captures multiple arguments\n\n  df %>%\n    group_by(!!!groups) %>%                 # unwrap quos with !!!\n    summarize(summ = sum(!!to_summarize))   # unwrap enquo with !!\n}\n```\n:::\n\nNow our function call is non-standardized. Note that `quos` can capture an arbitrary number of arguments, like we have here. So both of the following calls are valid\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize_by(starwars, mass, homeworld)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 49 × 2\n   homeworld       summ\n   <chr>          <dbl>\n 1 Alderaan          NA\n 2 Aleen Minor       15\n 3 Bespin            79\n 4 Bestine IV       110\n 5 Cato Neimoidia    90\n 6 Cerea             82\n 7 Champala          NA\n 8 Chandrila         NA\n 9 Concord Dawn      79\n10 Corellia         157\n# … with 39 more rows\n```\n:::\n\n```{.r .cell-code}\nsummarize_by(starwars, mass, homeworld, species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 58 × 3\n# Groups:   homeworld [49]\n   homeworld      species    summ\n   <chr>          <chr>     <dbl>\n 1 Alderaan       Human        NA\n 2 Aleen Minor    Aleena       15\n 3 Bespin         Human        79\n 4 Bestine IV     Human       110\n 5 Cato Neimoidia Neimodian    90\n 6 Cerea          Cerean       82\n 7 Champala       Chagrian     NA\n 8 Chandrila      Human        NA\n 9 Concord Dawn   Human        79\n10 Corellia       Human       157\n# … with 48 more rows\n```\n:::\n:::\n\nFor more details, see the [programming with `dplyr` vignette](http://dplyr.tidyverse.org/articles/programming.html).",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}