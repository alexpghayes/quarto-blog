{
  "hash": "8e2d54de032e9f4e761e286b7e936f96",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"multilaterion\"\nsubtitle: |\n  a clever way to use `stats::nls()` and a modeling problem that seems tricky for bayesians\ndate: \"2024-11-21\"\nbibliography: multilateration.bib\nexecute: \n  cache: true\n---\n\n\n\n## Motivation\n\nIn a somewhat unfortunate turn of events my car was totalled a month ago. It was parked on the side of the road, someone driving down the road fell asleep, and then they woke up when they hit my car. Luckily, the driver wasn't injured, and no one else was involved.\n\nThe crash happened early in the morning, so I heard it through my window. I made to the crash at almost the same time as the Madison police, which shocked me. It turned out that the driver's iPhone automatically detected a crash and called the police. How did they know where to go?\n\nThe real answer, of course, is GPS, but in the interest of telling a simpler story, I'm going to pretend that GPS doesn't exist. Instead, we'll assume that emergency services can detect how close the iPhone was to several cell towers in the Madison area, and show how these multiple distance measurements can be used to back out the location of the crash, a process known as *trilaterion*, or *multilaterion* when more than three distance measurements are used.\n\nIn this post, I'll demonstrate how to perform multilateration using non-linear least squares in R, and then I'll point out a setting where Bayesian methods (at least, my naive approaches) run into fairly substantial problems.\n\nFor readers interested in learning far more about multilaterion and GPS, I highly recommend *Pinpoint* by Greg Milner.\n\n[![](pinpoint.jpg){width=35% fig-align=\"center\"}](https://www.goodreads.com/book/show/32191741-pinpoint)\n\n## Multilaterion via `stats::nls()` \n\nAlright, so let's assume that the emergency services department has access to several different distance measurements, each measurement coming from a different [cell tower](https://www.city-data.com/towers/cell-Madison-Wisconsin.html) in the Madison area.\n\n\n\n::: {.cell messsage='false'}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndistances <- tribble(\n  ~address,                ~latitude,  ~longitude, ~dist_meters,\n  \"149 Wabesa Street\",     43.097222,  -89.342306,         3008,\n  \"1844 Fordem Avenue\",    43.096389,  -89.363333,         1690,\n  \"122 W. Main Street\",    43.072722,  -89.385194,         1490,\n  \"600 Highland Ave\",      43.075556,  -89.431944,         4794,\n  \"1410 Regent Street\",    43.068056,  -89.409444,         3347\n)\n```\n:::\n\n\n\nTo find the crash site, we would like to find a point such that distances from the cell towers to the point match the measurements as closely as possible. If we have three or more measurements, the point that minimizes these these deviations is uniquely determined. As [Mike Tuupola](https://www.appelsiini.net/2017/trilateration-with-n-points/) demonstrates, we can use `stats::nls()` to find this minimizer with a minimum of fuss^[It would also be straightforward to solve this problem in Jax, or using a number of other approaches, and `stats::nls()` is a little less stable than you might hope, but the convenience factor is hard to beat, especially for quick scratch work.].\n\nTo understand how this works, let's first consider the `geodist::geodist()` function, which is a function that calculates distances between (latitude, longitude) pairs using a performant C++ implementation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_latitude <- mean(distances$latitude)\nmean_longitude <- mean(distances$longitude)\n\ngeodist(\n  distances,\n  c(\n    longitude = mean_longitude,\n    latitude = mean_latitude\n  ),\n  measure = \"geodesic\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         [,1]\n[1,] 3972.348\n[2,] 2469.886\n[3,] 1034.533\n[4,] 3773.646\n[5,] 2429.934\n```\n\n\n:::\n:::\n\n\n\nWe can pass this distance-calculation function almost directly to `stats::nls()`, asking for the point that minimizes average deviation from the observed distances^[Note that we do not need to provide any gradient information to `nls()`, and that the `geodist()` can be an essentially arbitrary function, provided the non-linear least squares minimizer is unique.].\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnls_fit <- nls(\n\n  # dist_meters is the outcome to predict, geodist() is a performant \n  # C++ function that calculates distances between (lat, long) pairs \n  dist_meters ~ geodist(\n    distances,\n    c(\n      longitude = longitude,\n      latitude = latitude\n    ),\n    measure = \"geodesic\"\n  ),\n\n  data = distances,\n\n  # initialize estimated position of crash site as the \"average\"\n  # position of the cell towers\n  start = c(\n    longitude = mean_longitude,\n    latitude = mean_latitude\n  ),\n\n  # add a fudge factor to avoid optimization issues\n  # related to (near) perfect fits\n  control = list(\n    scaleOffset = 1\n  )\n)\n\nnls_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNonlinear regression model\n  model: dist_meters ~ geodist(distances, c(longitude = longitude, latitude = latitude),     measure = \"geodesic\")\n   data: distances\nlongitude  latitude \n   -89.37     43.08 \n residual sum-of-squares: 0.1845\n\nNumber of iterations to convergence: 4 \nAchieved convergence tolerance: 8.987e-06\n```\n\n\n:::\n:::\n\n\n\nThe estimated parameters are the estimated location of the crash site. Next we visualize the estimated crash site (red), as well as the five cell towers used for measurement data. We see that the estimated crash site is right at Breese Stevens field, exactly where it should be.\n\n<!-- https://stackoverflow.com/questions/48383990/convert-sequence-of-longitude-and-latitude-to-polygon-via-sf-in-r -->\n<!-- https://r-charts.com/spatial/interactive-maps-leaflet/#polygons -->\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nleaflet_data <- distances |>\n  mutate(\n    color = \"blue\",\n    label_chr = glue(\n      \"<p>{address}</p>\n       <p>{round(dist_meters)} meters from crash</p>\"\n    ),\n    label_html = map(label_chr, htmltools::HTML)\n  )\n\nleaflet_nls_data <- tibble(\n  latitude = coef(nls_fit)[\"latitude\"],\n  longitude = coef(nls_fit)[\"longitude\"],\n  color = \"red\",\n  label_html = htmltools::HTML(\"Estimated crash site\")\n)\n\nbase_map <- leaflet() |>\n  addTiles() |>\n  setView(\n    lng = mean_longitude,\n    lat = mean_latitude,\n    zoom = 13\n  ) |>\n  addCircleMarkers(\n    data = leaflet_data,\n    color = leaflet_data$color,\n    label = leaflet_data$label_html\n  )\n  \nbase_map |>\n  addCircleMarkers(\n    data = leaflet_nls_data,\n    color = leaflet_nls_data$color,\n    label = leaflet_nls_data$label_html\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-dfb534c80e3f89b614d2\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-dfb534c80e3f89b614d2\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addCircleMarkers\",\"args\":[[43.097222,43.096389,43.072722,43.075556,43.068056],[-89.34230599999999,-89.363333,-89.385194,-89.431944,-89.40944399999999],10,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":[\"blue\",\"blue\",\"blue\",\"blue\",\"blue\"],\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":[\"blue\",\"blue\",\"blue\",\"blue\",\"blue\"],\"fillOpacity\":0.2},null,null,null,null,[\"<p>149 Wabesa Street<\\/p>\\n<p>3008 meters from crash<\\/p>\",\"<p>1844 Fordem Avenue<\\/p>\\n<p>1690 meters from crash<\\/p>\",\"<p>122 W. Main Street<\\/p>\\n<p>1490 meters from crash<\\/p>\",\"<p>600 Highland Ave<\\/p>\\n<p>4794 meters from crash<\\/p>\",\"<p>1410 Regent Street<\\/p>\\n<p>3347 meters from crash<\\/p>\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addCircleMarkers\",\"args\":[43.08335799073488,-89.37404328631433,10,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"red\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"red\",\"fillOpacity\":0.2},null,null,null,null,\"Estimated crash site\",{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"setView\":[[43.081989,-89.3864442],13,[]],\"limits\":{\"lat\":[43.068056,43.097222],\"lng\":[-89.431944,-89.34230599999999]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\nIn this constructed data, the distance measurements are all exact, and so it doesn't make a ton of sense to consider estimation uncertainty, but we can also consider the case where distances are subject to some kind of measurement error or truncation. For instance, suppose that the measurement devices in the cell towers only report two significant digits and round the rest of the data. In this case, we see that there `nls()` estimates, under a Gaussian error model, have substantial uncertainty in the location of the crash site. If you're struggling to see the difference between the maps, try zooming in on the estimating crash site.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ndistances_rounded <- distances  |>\n  mutate(\n    dist_meters_rounded = signif(dist_meters, digits = 2)\n  ) |> \n  # subset to only the necessary columns of data to avoid nls() errors\n  select(latitude, longitude, dist_meters_rounded)\n\nnls_fit_rounded <- nls(\n  dist_meters_rounded ~ geodist(\n    distances_rounded,\n    c(\n      longitude = longitude,\n      latitude = latitude\n    ),\n    measure = \"geodesic\"\n  ),\n  data = distances_rounded,\n  start = c(\n    longitude = mean_longitude,\n    latitude = mean_latitude\n  ),\n  control = list(\n    scaleOffset = 1\n  )\n)\n\n# ellipse should be a two-column matrix of longitude, latitude data points\nmake_leaflet_polygon <- function(ellipse) {\n  ellipse |>\n    as.data.frame() |>\n    set_names(\n      c(\"longitude\", \"latitude\")\n    ) |>\n\n    # turn uncertainty ellipse into sf object\n    st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) |>\n    summarize(geometry = st_combine(geometry)) |>\n    st_cast(\"POLYGON\") |>\n\n    # convert to leaflet projection\n    st_transform(crs = '+proj=longlat +datum=WGS84')\n}\n\nnls_ellipse <- nls_fit_rounded |> \n  ellipse() |> \n  make_leaflet_polygon()\n\nbase_map |> \n  addPolygons(\n    data = nls_ellipse,\n    color = \"red\",\n    stroke = 1,\n    label = htmltools::HTML(\"95% confidence ellipse for crash site\")\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-49fb8b2d5fcd6e5eef28\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-49fb8b2d5fcd6e5eef28\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addCircleMarkers\",\"args\":[[43.097222,43.096389,43.072722,43.075556,43.068056],[-89.34230599999999,-89.363333,-89.385194,-89.431944,-89.40944399999999],10,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":[\"blue\",\"blue\",\"blue\",\"blue\",\"blue\"],\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":[\"blue\",\"blue\",\"blue\",\"blue\",\"blue\"],\"fillOpacity\":0.2},null,null,null,null,[\"<p>149 Wabesa Street<\\/p>\\n<p>3008 meters from crash<\\/p>\",\"<p>1844 Fordem Avenue<\\/p>\\n<p>1690 meters from crash<\\/p>\",\"<p>122 W. Main Street<\\/p>\\n<p>1490 meters from crash<\\/p>\",\"<p>600 Highland Ave<\\/p>\\n<p>4794 meters from crash<\\/p>\",\"<p>1410 Regent Street<\\/p>\\n<p>3347 meters from crash<\\/p>\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addPolygons\",\"args\":[[[[{\"lng\":[-89.37368414285136,-89.37377239011447,-89.37386205464949,-89.37395277540902,-89.37404418709255,-89.37413592161751,-89.37422760960135,-89.37431888184889,-89.37440937083905,-89.37449871220456,-89.37458654619928,-89.37467251914674,-89.3747562848642,-89.37483750605671,-89.37491585567516,-89.3749910182333,-89.37506269107804,-89.37513058560813,-89.37519442843626,-89.37525396248991,-89.37530894804642,-89.37535916369839,-89.37540440724511,-89.37544449650679,-89.37547927005811,-89.37550858787826,-89.37553233191471,-89.37555040655862,-89.37556273902977,-89.37556927966968,-89.37557000214147,-89.375564903536,-89.37555400438357,-89.37553734857121,-89.37551500316602,-89.37548705814503,-89.37545362603299,-89.37541484144921,-89.37537086056554,-89.37532186047746,-89.37526803849101,-89.37520961132837,-89.37514681425509,-89.3750799001328,-89.37500913840108,-89.37493481399245,-89.37485722618506,-89.37477668739761,-89.37469352193139,-89.37460806466439,-89.37452065970284,-89.37443165899569,-89.37434142091736,-89.37425030882476,-89.37415868959411,-89.37406693214373,-89.37397540594847,-89.37388447955205,-89.37379451908294,-89.3737058867802,-89.37361893953485,-89.37353402745275,-89.3734514924449,-89.37337166685062,-89.37329487209942,-89.37322141741666,-89.37315159857842,-89.37308569672051,-89.37302397720647,-89.37296668855898,-89.37291406145921,-89.37286630781794,-89.3728236199222,-89.37278616966108,-89.37275410783359,-89.37272756354136,-89.37270664366891,-89.37269143245317,-89.37268199114433,-89.37267835775924,-89.37268054692822,-89.3726885498363,-89.37270233425856,-89.37272184469002,-89.37274700256903,-89.37277770659372,-89.37281383312981,-89.37285523670849,-89.37290175061214,-89.37295318754572,-89.37300934039084,-89.37306998303981,-89.37313487130608,-89.37320374390752,-89.37327632351845,-89.37335231788641,-89.3734314210089,-89.37351331436557,-89.37359766820076,-89.37368414285136],\"lat\":[43.08373824331096,43.08381869532214,43.08389717422486,43.08397336401227,43.084046957895,43.08411765953645,43.08418518424607,43.08424926012568,43.08430962916432,43.0843660482772,43.08441829028445,43.08446614482595,43.08450941920835,43.08454793918098,43.08458154963751,43.0846101152405,43.08463352096634,43.08465167256844,43.08466449695671,43.08467194249184,43.08467397919332,43.08467059886004,43.08466181510344,43.08464766329259,43.08462820041184,43.08460350483134,43.08457367599148,43.08453883400247,43.0844991191607,43.08445469138381,43.0844057295668,43.08435243086162,43.08429500988333,43.08423369784597,43.08416874163144,43.08410040279551,43.08402895651456,43.08395469047753,43.08387790372755,43.08379890545775,43.08371801376629,43.08363555437546,43.08355185932012,43.08346726561073,43.08338211387629,43.08329674699277,43.0832115087025,43.08312674222999,43.0830427888999,43.08295998676265,43.08287866923323,43.08279916374864,43.08272179044939,43.08264686089046,43.08257467678673,43.08250552879812,43.08243969535916,43.08237744155789,43.08231901806838,43.0822646601414,43.08221458665715,43.08216899924387,43.08212808146599,43.08209199808496,43.0820608943958,43.08203489564212,43.0820141065117,43.08199861071504,43.08198847064825,43.08198372714179,43.08198439929609,43.08199048440462,43.0820019579648,43.08201877377665,43.08204086412883,43.08206814007129,43.08210049177344,43.08213778896639,43.0821798814675,43.08222659978514,43.08227775580112,43.08233314352823,43.08239253993963,43.08245570586695,43.08252238696328,43.08259231472739,43.08266520758485,43.08274077202184,43.08281870376706,43.08289868901687,43.0829804056989,43.08306352476891,43.08314771153574,43.08323262700901,43.08331792926406,43.08340327481881,43.08348832001686,43.0835727224112,43.08365614214317,43.08373824331096]}]]],null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":1,\"color\":\"red\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"red\",\"fillOpacity\":0.2,\"smoothFactor\":1,\"noClip\":false},null,null,\"95% confidence ellipse for crash site\",{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"setView\":[[43.081989,-89.3864442],13,[]],\"limits\":{\"lat\":[43.068056,43.097222],\"lng\":[-89.431944,-89.34230599999999]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nThis looks fairly reasonable to me! The uncertainty in the estimate of the crash site, however, could be poorly estimated. In particular, `nls()` is appropriate for Gaussian errors, but here the distances interval censored, and so we might want to model that more directly.\n\nTo my eye, the easiest way to try to model interesting and potentially varied error structure, such as censored responses, is to use `brms`. We can start by matching the analysis we've done so far, and then once we have that working, it should hopefully be easy to iterate and consider various assumptions about errors in distance measurements.\n\n## Reaching for the flexible Bayesian modelling toolkit\n\nTo replicate our analysis in Stan, we run into an issue. `geodist::geodist()` is implemented in C++, and the `brms` non-linear interface only supports non-linearities as implemented in either `R` or `Stan` code. We will start by implemented a simple estimate of geodesic distance, the Haversine distance, in `Stan`. This turns out to look like\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstan_funs <- \"\n  real havdist(real long1, real lat1, real long2, real lat2) {\n    real diff_long = (long2 - long1);\n    real diff_lat = (lat2 - lat1);\n    real a = sin(diff_lat / 2)^2 + cos(lat1) * cos(lat2) * sin(diff_long / 2)^2;\n    real b = 2 * atan2(sqrt(a), sqrt(1 - a));\n    return 6378137 * b;\n  }\n\"\n```\n:::\n\n\n\nWith this `Stan` code in hand, we specify priors for the latitude and longitude of the crash, and then we'll be ready to model. We'll start with an informative prior that places most of the prior density around the mean latitude and longitude of the cell towers.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_prior <- function(sigma2 = 0.05) {\n  c(\n    prior_string(\n      glue(\"normal({mean_longitude}, {sigma2})\"),\n      nlpar = \"crashlong\"\n    ),\n    prior_string(\n      glue(\"normal({mean_latitude}, {sigma2})\"),\n      nlpar = \"crashlat\"\n    )\n  )\n}\n\ninformative_prior <- make_prior(0.001)\nuninformative_prior <- make_prior(1)\n\ninformative_prior[, 1:2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                      prior class    source\n normal(-89.3864442, 0.001)     b (unknown)\n   normal(43.081989, 0.001)     b (unknown)\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbrm_informative <- brm(\n  bf(\n    dist_meters ~ havdist(longitude, latitude, crashlong, crashlat),\n    crashlong + crashlat ~ 1,\n    nl = TRUE\n  ),\n  data = distances,\n  stanvars = stanvar(scode = stan_funs, block = \"functions\"),\n  prior =  informative_prior,\n  backend = \"cmdstanr\",\n  chains = 4,\n  cores = 4,\n  seed = 27,\n  control = list(adapt_delta = 0.98),\n  silent = 2,\n  refresh = 0\n)\n```\n:::\n\n\n\nThis fit seems reasonable (summary omitted for verbosity reasons) and Stan hasn't issue any warnings, so we visualize the result. Unfortunately, the estimated position of the crash site isn't great, and suggests that the Bayesian variant of our model thinks the crash probably happened in a lake, which is impossible.\n\n::: {.callout-tip}\n## An unrelated question I've been curious about for a while\n\nIs there any way to express a prior like \"the probability of this event is proportional to population density\" or \"this event must have happened on a road\", and then use it is for Bayesian computations in an applied problem?\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nbrm_params <- fixef(brm_informative)[, \"Estimate\"] |>\n  set_names(\n    c(\"longitude\", \"latitude\")\n  )\n\nbrm_ellipse <- ellipse(vcov(brm_informative), center = brm_params) |>\n  make_leaflet_polygon()\n\nprior_vcov <- diag(0.001, nrow = 2)\nprior_mean <- c(mean_longitude, mean_latitude)\n\nprior_ellipse <- ellipse(prior_vcov, center = prior_mean) |>\n  make_leaflet_polygon()\n\nbase_map |> \n  addPolygons(\n    data = brm_ellipse,\n    color = \"red\",\n    stroke = 1,\n    label = htmltools::HTML(\"95% credible ellipse for crash site\")\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-b23fb1f3edd0a697f7d8\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-b23fb1f3edd0a697f7d8\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addCircleMarkers\",\"args\":[[43.097222,43.096389,43.072722,43.075556,43.068056],[-89.34230599999999,-89.363333,-89.385194,-89.431944,-89.40944399999999],10,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":[\"blue\",\"blue\",\"blue\",\"blue\",\"blue\"],\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":[\"blue\",\"blue\",\"blue\",\"blue\",\"blue\"],\"fillOpacity\":0.2},null,null,null,null,[\"<p>149 Wabesa Street<\\/p>\\n<p>3008 meters from crash<\\/p>\",\"<p>1844 Fordem Avenue<\\/p>\\n<p>1690 meters from crash<\\/p>\",\"<p>122 W. Main Street<\\/p>\\n<p>1490 meters from crash<\\/p>\",\"<p>600 Highland Ave<\\/p>\\n<p>4794 meters from crash<\\/p>\",\"<p>1410 Regent Street<\\/p>\\n<p>3347 meters from crash<\\/p>\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addPolygons\",\"args\":[[[[{\"lng\":[-89.38475814294307,-89.3848698742713,-89.38498796549015,-89.38511194108797,-89.38524130185878,-89.38537552691243,-89.38551407577198,-89.38565639055007,-89.38580189819534,-89.38595001279984,-89.38610013795835,-89.38625166916982,-89.38640399627157,-89.38655650589611,-89.386708583941,-89.38685961804165,-89.38700900003703,-89.38715612841857,-89.38730041075219,-89.38744126606389,-89.38757812717901,-89.38771044300617,-89.38783768075622,-89.38795932808765,-89.38807489516959,-89.3881839166542,-89.38828595355042,-89.3883805949917,-89.38846745989036,-89.3885461984721,-89.38861649368444,-89.38867806247339,-89.38873065692314,-89.38877406525442,-89.3888081126772,-89.38883266209453,-89.38884761465455,-89.3888529101486,-89.38884852725359,-89.38883448361788,-89.38881083579025,-89.38877767899216,-89.38873514673431,-89.38868341027909,-89.38862267795096,-89.38855319429759,-89.38847523910509,-89.38838912627152,-89.38829520254288,-89.38819384611686,-89.38808546512001,-89.38797049596438,-89.38784940159016,-89.38772266960166,-89.38759081030386,-89.38745435464763,-89.38731385209172,-89.38716986839036,-89.38702298331506,-89.3868737883202,-89.38672288416136,-89.38657087847632,-89.38641838333834,-89.38626601279152,-89.38611438037826,-89.38596409666876,-89.38581576680251,-89.3856699880515,-89.38552734741532,-89.38538841925748,-89.3852537629926,-89.38512392083399,-89.38499941561014,-89.38488074865967,-89.38476839781251,-89.38466281546586,-89.38456442676257,-89.3844736278792,-89.38439078443085,-89.3843162299988,-89.38425026478748,-89.38419315441547,-89.38414512884611,-89.38410638146142,-89.38407706828343,-89.38405730734596,-89.38404717821933,-89.38404672168997,-89.38405593959615,-89.38407479482062,-89.38410321144006,-89.38414107503075,-89.38418823312938,-89.38424449584694,-89.38430963663332,-89.38438339318957,-89.38446546852404,-89.38455553214837,-89.3846532214081,-89.38475814294307],\"lat\":[43.08372335300937,43.08383108782332,43.08393139644181,43.08402387495742,43.08410815099182,43.08418388519517,43.08425077261254,43.08430854391192,43.08435696646869,43.08439584530228,43.08442502386137,43.08444438465419,43.08445384972166,43.0844533809513,43.08444298023068,43.08442268943983,43.0843925902826,43.08435280395768,43.08430349067055,43.08424484898843,43.08417711504065,43.08410056156793,43.08401549682409,43.08392226333481,43.08382123651846,43.08371282317437,43.08359745984481,43.0834756110572,43.08334776745359,43.08321444381506,43.08307617698883,43.08293352372664,43.0827870584428,43.08263737090132,43.0824850638411,43.08233075054892,43.08217505238994,43.0820185963057,43.08186201228962,43.08170593085028,43.08155098047254,43.08139778508687,43.08124696155704,43.08109911719617,43.08095484732131,43.08081473285633,43.08067933799273,43.08054920791785,43.08042486661955,43.08030681477637,43.08019552774141,43.08009145362828,43.07999501150671,43.07990658971508,43.07982654429673,43.07975519756632,43.07969283681194,43.07963971313835,43.07959604045583,43.07956199461885,43.07953771271799,43.07952329252789,43.07951879211357,43.0795242295966,43.07953958308217,43.0795647907472,43.07959975108933,43.07964432333558,43.07969832800927,43.07976154765264,43.07983372770248,43.07991457751521,43.08000377153719,43.08010095061555,43.08020572344444,43.08031766814068,43.08043633394247,43.0805612430245,43.08069189242201,43.08082775605597,43.08096828685148,43.08111291894063,43.08126106994104,43.08141214330092,43.08156553070117,43.08172061450487,43.08187677024428,43.08203336913534,43.0821897806096,43.08234537485325,43.0824995253432,43.0826516113698,43.08280102053634,43.08294715122481,43.08308941501853,43.08322723907138,43.08336006841456,43.0834873681912,43.08360862581002,43.08372335300937]}]]],null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":1,\"color\":\"red\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"red\",\"fillOpacity\":0.2,\"smoothFactor\":1,\"noClip\":false},null,null,\"95% credible ellipse for crash site\",{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"setView\":[[43.081989,-89.3864442],13,[]],\"limits\":{\"lat\":[43.068056,43.097222],\"lng\":[-89.431944,-89.34230599999999]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nMaybe the issue was that our prior was too informative and we can improve the Bayesian estimate with a more diffuse prior that acts as a weaker regularizer? I went ahead and did this and I am again omitting the model summary for the sake of brevity, but the diagnostics are terrible and Stan warns us we need stronger priors. For giggles, we visualize the 95% credible interval for the crash site and get the following. Indeed, the crash site is in fact contained in this interval. But we have more than enough data to completely determine the exact location of the crash site, and in light of that fact, this is pretty disappointing!\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nbrm_uninformative <- brm(\n  bf(\n    dist_meters ~ havdist(longitude, latitude, crashlong, crashlat),\n    crashlong + crashlat ~ 1,\n    nl = TRUE\n  ),\n  data = distances,\n  stanvars = stanvar(scode = stan_funs, block = \"functions\"),\n  prior =  uninformative_prior,\n  backend = \"cmdstanr\",\n  chains = 4,\n  cores = 4,\n  seed = 27,\n  silent = 2,\n  refresh = 0\n)\n\nbrm_uninformative_params <- fixef(brm_uninformative)[, \"Estimate\"] |>\n  set_names(\n    c(\"longitude\", \"latitude\")\n  )\n\nbrm_uninformative_ellipse <- ellipse(vcov(brm_uninformative), center = brm_uninformative_params) |>\n  make_leaflet_polygon()\n\nbase_map |> \n  setView(\n    lng = mean_longitude,\n    lat = mean_latitude,\n    zoom = 5\n  ) |> \n  addPolygons(\n    data = brm_uninformative_ellipse,\n    color = \"red\",\n    stroke = 1\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-0efcf159ef87d9b93643\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-0efcf159ef87d9b93643\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addCircleMarkers\",\"args\":[[43.097222,43.096389,43.072722,43.075556,43.068056],[-89.34230599999999,-89.363333,-89.385194,-89.431944,-89.40944399999999],10,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":[\"blue\",\"blue\",\"blue\",\"blue\",\"blue\"],\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":[\"blue\",\"blue\",\"blue\",\"blue\",\"blue\"],\"fillOpacity\":0.2},null,null,null,null,[\"<p>149 Wabesa Street<\\/p>\\n<p>3008 meters from crash<\\/p>\",\"<p>1844 Fordem Avenue<\\/p>\\n<p>1690 meters from crash<\\/p>\",\"<p>122 W. Main Street<\\/p>\\n<p>1490 meters from crash<\\/p>\",\"<p>600 Highland Ave<\\/p>\\n<p>4794 meters from crash<\\/p>\",\"<p>1410 Regent Street<\\/p>\\n<p>3347 meters from crash<\\/p>\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addPolygons\",\"args\":[[[[{\"lng\":[-87.9701308614703,-88.13308519704792,-88.30424485613148,-88.48292063918359,-88.6683930818884,-88.85991535218048,-89.05671625747397,-89.25800334998287,-89.46296611762871,-89.6707792476865,-89.88060595002783,-90.09160132657941,-90.30291577342938,-90.51369840188238,-90.72310046468806,-90.93027877364663,-91.13439909483023,-91.33463950774845,-91.53019371493205,-91.72027428860835,-91.90411584139493,-92.08097810824442,-92.25014892723068,-92.41094710717341,-92.56272517055473,-92.70487196068248,-92.83681510260269,-92.95802330785132,-93.06800851376552,-93.16632784873968,-93.25258541551305,-93.32643388530832,-93.38757589640194,-93.43576525149497,-93.47080790906256,-93.49256276469077,-93.50094221925424,-93.49591253164692,-93.47749395464561,-93.44576065335914,-93.40084040659177,-93.34291409232287,-93.27221495937528,-93.18902768820458,-93.09368724459132,-92.98657753085213,-92.86812984000052,-92.73882111908219,-92.59917204867756,-92.44974494630489,-92.29114150216606,-92.12400035635252,-91.94899452726705,-91.76682870161613,-91.5782363968854,-91.38397700772352,-91.18483274812797,-90.98160550174548,-90.77511359296938,-90.56618849183631,-90.35567146598972,-90.14441019319202,-89.9332553480254,-89.72305717652559,-89.51466207254104,-89.30890916960379,-89.10662696203474,-88.90862996888953,-88.71571545417775,-88.52866021656217,-88.34821746146467,-88.17511376817392,-88.01004616416689,-87.85367931842536,-87.70664286504842,-87.56952886793823,-87.4428894367676,-87.32723450382927,-87.2230297707185,-87.13069483311709,-87.05060149122976,-86.9830722526758,-86.92837903386487,-86.8867420650855,-86.85832900371543,-86.84325425912461,-86.84157853198893,-86.85330856987018,-86.87839714004581,-86.9167432196986,-86.96819240269981,-87.03253752134813,-87.109519480561,-87.19882830115897,-87.30010436804247,-87.41293987823492,-87.53688048296137,-87.67142711715064,-87.81603800899427,-87.9701308614703,-87.9701308614703],\"lat\":[45.35866952469623,45.65150947766723,45.92632979597609,46.18202387519709,46.41756212551883,46.63199611753905,46.824462401255,46.99418598287195,47.1404834454296,47.26276570068099,47.36054036114302,47.43341372276694,47.4810923502457,47.50338425857431,47.50019968610573,47.47155145598931,47.41755492453651,47.33842751672177,47.23448785068881,47.1061544547879,46.95394408230985,46.77846963070295,46.58043767365119,46.36064561595147,46.11997848264592,45.85940535533838,45.57997547004488,45.28281399229044,44.96911748646469,44.64014909767937,44.29723346552876,43.94175139023362,43.57513427264595,43.19885835050307,42.81443875413921,42.42342340559041,42.02738678565886,41.62792359403434,41.22664232800152,40.82515880558896,40.42508965924031,40.02804582620602,39.63562606186756,39.24941050211381,38.87095430069154,38.50178136715009,38.14337823059557,37.79718805396271,37.46460482290718,37.14696773271722,36.84555579584701,36.56158269178488,36.29619187999432,36.05045199560639,35.82535254640317,35.62179992841914,35.4406137762043,35.28252366244509,35.1481661602327,35.0380822798079,34.95271529010374,34.892408933858,34.85740604348255,34.84784756326286,34.86377198182518,34.90511517715638,34.97171067480069,35.06329031819355,35.1794853484335,35.31982788914405,35.48375283044681,35.67060010445943,35.87961734315603,36.10996290788773,36.36070927836438,36.63084678745144,36.91928768674316,37.22487052654152,37.5463648326042,37.88247606083011,38.23185080993154,38.59308227110351,38.96471589274626,39.34525523743122,39.73316800752631,40.12689221521778,40.52484247208374,40.92541637289387,41.32700094792966,41.72797915784422,42.12673640490898,42.52166703442891,42.91118080014721,43.29370926760582,43.6677121296773,44.03168340883808,44.38415752120837,44.72371517794119,45.04898910019766,45.35866952469623,45.35866952469623]}]]],null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":1,\"color\":\"red\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"red\",\"fillOpacity\":0.2,\"smoothFactor\":1,\"noClip\":false},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"setView\":[[43.081989,-89.3864442],5,[]],\"limits\":{\"lat\":[34.84784756326286,47.50338425857431],\"lng\":[-93.50094221925424,-86.84157853198893]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nIs there any way for a Bayesian to fix this? If you care about coverage properties of your credible interval, @balch2019 says no^[I should emphasize that my multilaterion problem is a simpler variant of the satellite collision problem considered in @balch2019. A couple years ago I spent a little time reading some of Ryan Martin's work on imprecise probability, which I understood very poorly, but one of my big takeaways was that one can think of Bayesians as expressing a priori uncertainty with probability measures, and frequentists as expressioning a priori uncertainty via constant possibility measures. In Ryan's words: \"There must/should be a mathematical description of the frequentists' assumption '$\\theta$ is unknown, no prior info available'.  This can't be described via (precise) probability, so it makes sense to look beyond that to imprecise probability.  And it turns out that the frequentist 'no-prior' belief can be perfectly described via the vacuous possibility measure with contour identically equal to 1. ... This is what prior ignorance means: all values of $\\theta$ are equally and fully possible.\" For further details, see @martin2022 and @martin2023.].\n\nIf you don't care about coverage properties of your credible interval, I'm not really sure what is possible here, and I would love to hear from dedicated Bayesians how they would approach this problem^[If you search for \"Bayesian Multilaterion,\" you are likely to come across @alencar2022, which suggests that a Bayesian approach works well. However, the \"prior\" in this approach is a normal centered on the frequentist point estimate, with variance equal to the corresponding bootstrapped standard error.].\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"../../site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"../../site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"../../site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/leaflet-binding-2.2.2/leaflet.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}