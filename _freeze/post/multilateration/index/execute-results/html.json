{
  "hash": "643d23348b5322895b752ee2914134b7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"multilaterion\"\nsubtitle: |\n  todo\ndate: \"2024-11-01\"\nbibliography: multilateration.bib\ndraft: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(brms)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: Rcpp\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading 'brms' package (version 2.22.0). Useful instructions\ncan be found by typing help('brms'). A more detailed introduction\nto the package is available through vignette('brms_overview').\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'brms'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:stats':\n\n    ar\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ellipse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'ellipse'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:graphics':\n\n    pairs\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(geodist)\nlibrary(glue)\nlibrary(leaflet)\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLinking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidygeocoder)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n::: {.cell execute='false'}\n\n```{.r .cell-code}\n# pulled from https://www.city-data.com/towers/cell-Madison-Wisconsin.html\ncell_towers <- tribble(\n  ~address,                ~latitude,  ~longitude,\n  \"149 Wabesa Street\",     43.097222,  -89.342306,\n  \"1844 Fordem Avenue\",    43.096389,  -89.363333,\n  \"122 W. Main Street\",    43.072722,  -89.385194,\n  \"600 Highland Ave\",      43.075556,  -89.431944,\n  \"1410 Regent Street\",    43.068056,  -89.409444\n)\n\nbreese_stevens_address <- \"917 E Mifflin St, Madison, WI 53703\"\n\ncrash <- tibble(address = breese_stevens_address) |> \n  geocode(address, method = \"osm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPassing 1 address to the Nominatim single address geocoder\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nQuery completed in: 1 seconds\n```\n\n\n:::\n\n```{.r .cell-code}\ndistances <- cell_towers |>\n  mutate(\n    dist_meters = drop(\n      geodist(\n        cell_towers,\n        crash,\n        measure = \"geodesic\"\n      )\n    )\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndistances <- tribble(\n  ~address,                ~latitude,  ~longitude, ~dist_meters,\n  \"149 Wabesa Street\",     43.097222,  -89.342306,         3008,\n  \"1844 Fordem Avenue\",    43.096389,  -89.363333,         1690,\n  \"122 W. Main Street\",    43.072722,  -89.385194,         1490,\n  \"600 Highland Ave\",      43.075556,  -89.431944,         4794,\n  \"1410 Regent Street\",    43.068056,  -89.409444,          3347\n) |>\n  mutate(\n    dist_meters_rounded = signif(dist_meters, digits = 1)\n  )\n\nmean_latitude <- mean(distances$latitude)\nmean_longitude <- mean(distances$longitude)\n\ndistances\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 5\n  address            latitude longitude dist_meters dist_meters_rounded\n  <chr>                 <dbl>     <dbl>       <dbl>               <dbl>\n1 149 Wabesa Street      43.1     -89.3        3008                3000\n2 1844 Fordem Avenue     43.1     -89.4        1690                2000\n3 122 W. Main Street     43.1     -89.4        1490                1000\n4 600 Highland Ave       43.1     -89.4        4794                5000\n5 1410 Regent Street     43.1     -89.4        3347                3000\n```\n\n\n:::\n:::\n\n\n\n\n## A cool `nls()` tricky (not my own)\n\nwhy this is cool, don't need to know anything about internals of geodist, it's a highly performant C++ nonlinearity\n\nflip side of this trick: failure with fewer data points although it should be fine\n\nanother approach here: code up a loss function in jax, gradient descend since things should be convex. infrastructure not quite as desired though, super convenient when exploring to not need to write up. would be nice if nls() were a little more transparent in its errors and more stable though.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# key to subset to only data needed for distance computations for some reason\nnls_data <- distances |> \n  select(latitude, longitude, dist_meters)\n\nnls_data_rounded <- distances |> \n  select(latitude, longitude, dist_meters_rounded)\n\n# https://www.appelsiini.net/2017/trilateration-with-n-points/\nnls_fit <- nls(\n  dist_meters ~ geodist(\n    nls_data,\n    c(\n      longitude = longitude,\n      latitude = latitude\n    ),\n    measure = \"geodesic\"\n  ),\n  data = nls_data,\n  start = c(\n    longitude = mean_longitude,\n    latitude = mean_latitude\n  ),\n  control = list(\n    maxiter = 1000,\n    tol = 0.00001,\n    # help avoid convergence testing failure under perfect prediction\n    scaleOffset = 1\n  )\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# https://stackoverflow.com/questions/48383990/convert-sequence-of-longitude-and-latitude-to-polygon-via-sf-in-r\n# https://r-charts.com/spatial/interactive-maps-leaflet/#polygons\n  \nleaflet_data <- distances |>\n  mutate(\n    color = \"blue\",\n    label_chr = glue(\n      \"<p>{address}</p>\n       <p>{round(dist_meters)} meters from crash</p>\"\n    ),\n    label_html = map(label_chr, htmltools::HTML)\n  )\n\n# ellipse is a two-column matrix of longitude, latitude data points\nmake_leaflet_polygon <- function(ellipse) {\n  ellipse |>\n    as.data.frame() |>\n    set_names(\n      c(\"longitude\", \"latitude\")\n    ) |>\n\n    # turn uncertainty ellipse into sf object\n    st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) |>\n    summarize(geometry = st_combine(geometry)) |>\n    st_cast(\"POLYGON\") |>\n\n    # convert to leaflet projection\n    st_transform(crs = '+proj=longlat +datum=WGS84')\n}\n\nnls_ellipse <- nls_fit |> \n  ellipse() |> \n  make_leaflet_polygon()\n\n\nannotated_map <- leaflet() |>\n  addTiles() |>\n  setView(\n    lng = mean_longitude,\n    lat = mean_latitude,\n    zoom = 13\n  ) |>\n  addCircleMarkers(\n    data = leaflet_data,\n    color = leaflet_data$color,\n    label = leaflet_data$label_html\n  ) |>\n  addPolygons(\n    data = nls_ellipse,\n    color = \"red\",\n    stroke = 1\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAssuming \"longitude\" and \"latitude\" are longitude and latitude, respectively\n```\n\n\n:::\n\n```{.r .cell-code}\nannotated_map\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-072fadef563bde7db0d8\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-072fadef563bde7db0d8\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addCircleMarkers\",\"args\":[[43.097222,43.096389,43.072722,43.075556,43.068056],[-89.34230599999999,-89.363333,-89.385194,-89.431944,-89.40944399999999],10,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":[\"blue\",\"blue\",\"blue\",\"blue\",\"blue\"],\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":[\"blue\",\"blue\",\"blue\",\"blue\",\"blue\"],\"fillOpacity\":0.2},null,null,null,null,[\"<p>149 Wabesa Street<\\/p>\\n<p>3008 meters from crash<\\/p>\",\"<p>1844 Fordem Avenue<\\/p>\\n<p>1690 meters from crash<\\/p>\",\"<p>122 W. Main Street<\\/p>\\n<p>1490 meters from crash<\\/p>\",\"<p>600 Highland Ave<\\/p>\\n<p>4794 meters from crash<\\/p>\",\"<p>1410 Regent Street<\\/p>\\n<p>3347 meters from crash<\\/p>\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addPolygons\",\"args\":[[[[{\"lng\":[-89.37403930823216,-89.37404010554522,-89.37404091566611,-89.37404173533277,-89.37404256124468,-89.3740433900762,-89.37404421848989,-89.37404504315005,-89.37404586073605,-89.37404666795575,-89.37404746155879,-89.3740482383496,-89.3740489952003,-89.37404972906333,-89.37405043698368,-89.37405111611082,-89.37405176371013,-89.37405237717395,-89.37405295403209,-89.37405349196176,-89.37405398879687,-89.37405444253687,-89.3740548513547,-89.37405521360418,-89.37405552782668,-89.37405579275695,-89.37405600732816,-89.37405617067635,-89.37405628214377,-89.37405634128156,-89.37405634785161,-89.37405630182747,-89.37405620339443,-89.37405605294887,-89.3740558510966,-89.37405559865037,-89.37405529662671,-89.37405494624176,-89.3740545489064,-89.37405410622056,-89.37405361996677,-89.37405309210301,-89.3740525247548,-89.37405192020665,-89.37405128089287,-89.37405060938774,-89.37404990839518,-89.37404918073784,-89.37404842934573,-89.37404765724445,-89.37404686754297,-89.37404606342116,-89.37404524811691,-89.37404442491318,-89.37404359712471,-89.37404276808472,-89.37404194113145,-89.37404111959476,-89.37404030678269,-89.37403950596814,-89.37403872037571,-89.37403795316871,-89.3740372074364,-89.37403648618158,-89.3740357923085,-89.37403512861113,-89.37403449776195,-89.37403390230118,-89.37403334462653,-89.37403282698352,-89.37403235145656,-89.3740319199604,-89.37403153423254,-89.37403119582618,-89.37403090610394,-89.37403066623243,-89.37403047717754,-89.37403033970052,-89.37403025435496,-89.37403022148449,-89.37403024122148,-89.37403031348644,-89.37403043798842,-89.37403061422607,-89.37403084148974,-89.37403111886432,-89.37403144523294,-89.37403181928141,-89.37403223950358,-89.37403270420735,-89.37403321152154,-89.37403375940336,-89.37403434564669,-89.37403496789092,-89.37403562363052,-89.37403631022504,-89.37403702490981,-89.37403776480704,-89.37403852693744,-89.37403930823216],\"lat\":[43.0833616915514,43.0833624183912,43.08336312740239,43.08336381573002,43.08336448060246,43.08336511934249,43.08336572937814,43.083366308253,43.08336685363614,43.08336736333152,43.08336783528676,43.08336826760146,43.08336865853484,43.08336900651276,43.08336931013404,43.08336956817608,43.08336977959986,43.08336994355403,43.08337005937843,43.08337012660665,43.08337014496801,43.08337011438856,43.08337003499143,43.08336990709633,43.08336973121825,43.08336950806539,43.0833692385363,43.08336892371629,43.08336856487301,43.08336816345142,43.08336772106789,43.08336723950374,43.08336672069806,43.0833661667399,43.08336557985986,43.08336496242109,43.08336431690979,43.08336364592522,43.0833629521692,43.08336223843524,43.08336150759728,43.08336076259816,43.08336000643773,43.08335924216077,43.08335847284476,43.08335770158747,43.08335693149446,43.08335616566665,43.08335540718775,43.08335465911187,43.08335392445126,43.08335320616415,43.08335250714281,43.08335183020196,43.0833511780674,43.08335055336505,43.08334995861036,43.08334939619821,43.08334886839322,43.08334837732068,43.08334792495796,43.08334751312658,43.08334714348483,43.08334681752113,43.08334653654801,43.08334630169686,43.08334611391334,43.08334597395359,43.08334588238118,43.08334583956483,43.08334584567696,43.08334590069295,43.08334600439127,43.08334615635437,43.08334635597033,43.0833466024354,43.08334689475712,43.08334723175842,43.08334761208233,43.08334803419741,43.08334849640396,43.08334899684082,43.08334953349292,43.08335010419935,43.08335070666207,43.08335133845519,43.08335199703468,43.08335267974869,43.08335338384817,43.08335410649795,43.08335484478819,43.08335559574604,43.08335635634767,43.0833571235304,43.08335789420505,43.0833586652684,43.08335943361563,43.0833601961529,43.08336094980973,43.0833616915514]}]]],null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":1,\"color\":\"red\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"red\",\"fillOpacity\":0.2,\"smoothFactor\":1,\"noClip\":false},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"setView\":[[43.081989,-89.3864442],13,[]],\"limits\":{\"lat\":[43.068056,43.097222],\"lng\":[-89.431944,-89.34230599999999]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n## bringing even more infrastructure to the problem\n\nsuppose we want to build out more of a model for this thing. might have measurement error or outcome censoring, etc, etc\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstan_funs <- \"\n  real havdist(real long1, real lat1, real long2, real lat2) {\n    real diff_long = (long2 - long1);\n    real diff_lat = (lat2 - lat1);\n    real a = sin(diff_lat / 2)^2 + cos(lat1) * cos(lat2) * sin(diff_long / 2)^2;\n    real b = 2 * atan2(sqrt(a), sqrt(1 - a));\n    return 6378137 * b;\n  }\n\"\n\nmake_prior <- function(nls_data, sigma2 = 0.05) {\n  c(\n    prior_string(\n      glue(\"normal({mean_longitude}, {sigma2})\"),\n      nlpar = \"crashlong\"\n    ),\n    prior_string(\n      glue(\"normal({mean_latitude}, {sigma2})\"),\n      nlpar = \"crashlat\"\n    )\n  )\n}\n\ninformative_prior <- make_prior(nls_data, 0.001)\nuninformative_prior <- make_prior(nls_data, 1)\n\ninformative_prior\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                      prior class coef group resp dpar     nlpar   lb   ub\n normal(-89.3864442, 0.001)     b                      crashlong <NA> <NA>\n   normal(43.081989, 0.001)     b                       crashlat <NA> <NA>\n source\n   user\n   user\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbrm_informative <- brm(\n  bf(\n    dist_meters ~ havdist(longitude, latitude, crashlong, crashlat),\n    crashlong + crashlat ~ 1,\n    nl = TRUE\n  ),\n  data = nls_data,\n  stanvars = stanvar(scode = stan_funs, block = \"functions\"),\n  prior =  informative_prior,\n  backend = \"cmdstanr\",\n  chains = 4,\n  cores = 4,\n  seed = 27,\n  control = list(adapt_delta = 0.98)\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nStart sampling\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRunning MCMC with 4 parallel chains...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 4 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 4 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 4 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 0.3 seconds.\nChain 2 finished in 0.3 seconds.\nChain 4 finished in 0.2 seconds.\nChain 3 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 3 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 3 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 0.6 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.4 seconds.\nTotal execution time: 0.8 seconds.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: rstan\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: StanHeaders\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nrstan version 2.32.6 (Stan version 2.32.2)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFor execution on a local, multicore CPU with excess RAM we recommend calling\noptions(mc.cores = parallel::detectCores()).\nTo avoid recompilation of unchanged Stan programs, we recommend calling\nrstan_options(auto_write = TRUE)\nFor within-chain threading using `reduce_sum()` or `map_rect()` Stan functions,\nchange `threads_per_chain` option:\nrstan_options(threads_per_chain = 1)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'rstan'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:tidyr':\n\n    extract\n```\n\n\n:::\n\n```{.r .cell-code}\nbrm_informative\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: dist_meters ~ havdist(longitude, latitude, crashlong, crashlat) \n         crashlong ~ 1\n         crashlat ~ 1\n   Data: nls_data (Number of observations: 5) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n                    Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ncrashlong_Intercept   -89.39      0.00   -89.39   -89.38 1.00     1644     1620\ncrashlat_Intercept     43.08      0.00    43.08    43.08 1.00     2016     1983\n\nFurther Distributional Parameters:\n       Estimate Est.Error l-95% CI  u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma 128716.60  38677.86 78097.58 223655.92 1.00     1735     1220\n\nDraws were sampled using sample(hmc). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n\n\n:::\n:::\n\n\n\n\ncan we do better by putting an informative prior on the error variance??\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrm_params <- fixef(brm_informative)[, \"Estimate\"] |>\n  set_names(\n    c(\"longitude\", \"latitude\")\n  )\n\nbrm_ellipse <- ellipse(vcov(brm_informative), center = brm_params) |>\n  make_leaflet_polygon()\n\nprior_vcov <- diag(0.001, nrow = 2)\nprior_mean <- c(mean_longitude, mean_latitude)\n\nprior_ellipse <- ellipse(prior_vcov, center = prior_mean) |>\n  make_leaflet_polygon()\n\nbrm_informative_map <- leaflet() |>\n  addTiles() |>\n  setView(\n    lng = mean_longitude,\n    lat = mean_latitude,\n    zoom = 13\n  ) |>\n  addCircleMarkers(\n    data = leaflet_data,\n    color = leaflet_data$color,\n    label = leaflet_data$label_html\n  ) |>\n  addPolygons(\n    data = brm_ellipse,\n    color = \"red\",\n    stroke = 1\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAssuming \"longitude\" and \"latitude\" are longitude and latitude, respectively\n```\n\n\n:::\n\n```{.r .cell-code}\nbrm_informative_map\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-001eea8c918e3a1147c9\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-001eea8c918e3a1147c9\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addCircleMarkers\",\"args\":[[43.097222,43.096389,43.072722,43.075556,43.068056],[-89.34230599999999,-89.363333,-89.385194,-89.431944,-89.40944399999999],10,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":[\"blue\",\"blue\",\"blue\",\"blue\",\"blue\"],\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":[\"blue\",\"blue\",\"blue\",\"blue\",\"blue\"],\"fillOpacity\":0.2},null,null,null,null,[\"<p>149 Wabesa Street<\\/p>\\n<p>3008 meters from crash<\\/p>\",\"<p>1844 Fordem Avenue<\\/p>\\n<p>1690 meters from crash<\\/p>\",\"<p>122 W. Main Street<\\/p>\\n<p>1490 meters from crash<\\/p>\",\"<p>600 Highland Ave<\\/p>\\n<p>4794 meters from crash<\\/p>\",\"<p>1410 Regent Street<\\/p>\\n<p>3347 meters from crash<\\/p>\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addPolygons\",\"args\":[[[[{\"lng\":[-89.38475814294307,-89.3848698742713,-89.38498796549015,-89.38511194108797,-89.38524130185878,-89.38537552691243,-89.38551407577198,-89.38565639055007,-89.38580189819534,-89.38595001279984,-89.38610013795835,-89.38625166916982,-89.38640399627157,-89.38655650589611,-89.386708583941,-89.38685961804165,-89.38700900003703,-89.38715612841857,-89.38730041075219,-89.38744126606389,-89.38757812717901,-89.38771044300617,-89.38783768075622,-89.38795932808765,-89.38807489516959,-89.3881839166542,-89.38828595355042,-89.3883805949917,-89.38846745989036,-89.3885461984721,-89.38861649368444,-89.38867806247339,-89.38873065692314,-89.38877406525442,-89.3888081126772,-89.38883266209453,-89.38884761465455,-89.3888529101486,-89.38884852725359,-89.38883448361788,-89.38881083579025,-89.38877767899216,-89.38873514673431,-89.38868341027909,-89.38862267795096,-89.38855319429759,-89.38847523910509,-89.38838912627152,-89.38829520254288,-89.38819384611686,-89.38808546512001,-89.38797049596438,-89.38784940159016,-89.38772266960166,-89.38759081030386,-89.38745435464763,-89.38731385209172,-89.38716986839036,-89.38702298331506,-89.3868737883202,-89.38672288416136,-89.38657087847632,-89.38641838333834,-89.38626601279152,-89.38611438037826,-89.38596409666876,-89.38581576680251,-89.3856699880515,-89.38552734741532,-89.38538841925748,-89.3852537629926,-89.38512392083399,-89.38499941561014,-89.38488074865967,-89.38476839781251,-89.38466281546586,-89.38456442676257,-89.3844736278792,-89.38439078443085,-89.3843162299988,-89.38425026478748,-89.38419315441547,-89.38414512884611,-89.38410638146142,-89.38407706828343,-89.38405730734596,-89.38404717821933,-89.38404672168997,-89.38405593959615,-89.38407479482062,-89.38410321144006,-89.38414107503075,-89.38418823312938,-89.38424449584694,-89.38430963663332,-89.38438339318957,-89.38446546852404,-89.38455553214837,-89.3846532214081,-89.38475814294307],\"lat\":[43.08372335300937,43.08383108782332,43.08393139644181,43.08402387495742,43.08410815099182,43.08418388519517,43.08425077261254,43.08430854391192,43.08435696646869,43.08439584530228,43.08442502386137,43.08444438465419,43.08445384972166,43.0844533809513,43.08444298023068,43.08442268943983,43.0843925902826,43.08435280395768,43.08430349067055,43.08424484898843,43.08417711504065,43.08410056156793,43.08401549682409,43.08392226333481,43.08382123651846,43.08371282317437,43.08359745984481,43.0834756110572,43.08334776745359,43.08321444381506,43.08307617698883,43.08293352372664,43.0827870584428,43.08263737090132,43.0824850638411,43.08233075054892,43.08217505238994,43.0820185963057,43.08186201228962,43.08170593085028,43.08155098047254,43.08139778508687,43.08124696155704,43.08109911719617,43.08095484732131,43.08081473285633,43.08067933799273,43.08054920791785,43.08042486661955,43.08030681477637,43.08019552774141,43.08009145362828,43.07999501150671,43.07990658971508,43.07982654429673,43.07975519756632,43.07969283681194,43.07963971313835,43.07959604045583,43.07956199461885,43.07953771271799,43.07952329252789,43.07951879211357,43.0795242295966,43.07953958308217,43.0795647907472,43.07959975108933,43.07964432333558,43.07969832800927,43.07976154765264,43.07983372770248,43.07991457751521,43.08000377153719,43.08010095061555,43.08020572344444,43.08031766814068,43.08043633394247,43.0805612430245,43.08069189242201,43.08082775605597,43.08096828685148,43.08111291894063,43.08126106994104,43.08141214330092,43.08156553070117,43.08172061450487,43.08187677024428,43.08203336913534,43.0821897806096,43.08234537485325,43.0824995253432,43.0826516113698,43.08280102053634,43.08294715122481,43.08308941501853,43.08322723907138,43.08336006841456,43.0834873681912,43.08360862581002,43.08372335300937]}]]],null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":1,\"color\":\"red\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"red\",\"fillOpacity\":0.2,\"smoothFactor\":1,\"noClip\":false},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"setView\":[[43.081989,-89.3864442],13,[]],\"limits\":{\"lat\":[43.068056,43.097222],\"lng\":[-89.431944,-89.34230599999999]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbrm_informative_map |> \n  setView(\n    lng = mean_longitude,\n    lat = mean_latitude,\n    zoom = 12\n  ) |>\n  addPolygons(\n    data = prior_ellipse,\n    color = \"green\",\n    stroke = 1\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-83611a6a257b335604a0\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-83611a6a257b335604a0\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addCircleMarkers\",\"args\":[[43.097222,43.096389,43.072722,43.075556,43.068056],[-89.34230599999999,-89.363333,-89.385194,-89.431944,-89.40944399999999],10,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":[\"blue\",\"blue\",\"blue\",\"blue\",\"blue\"],\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":[\"blue\",\"blue\",\"blue\",\"blue\",\"blue\"],\"fillOpacity\":0.2},null,null,null,null,[\"<p>149 Wabesa Street<\\/p>\\n<p>3008 meters from crash<\\/p>\",\"<p>1844 Fordem Avenue<\\/p>\\n<p>1690 meters from crash<\\/p>\",\"<p>122 W. Main Street<\\/p>\\n<p>1490 meters from crash<\\/p>\",\"<p>600 Highland Ave<\\/p>\\n<p>4794 meters from crash<\\/p>\",\"<p>1410 Regent Street<\\/p>\\n<p>3347 meters from crash<\\/p>\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addPolygons\",\"args\":[[[[{\"lng\":[-89.38475814294307,-89.3848698742713,-89.38498796549015,-89.38511194108797,-89.38524130185878,-89.38537552691243,-89.38551407577198,-89.38565639055007,-89.38580189819534,-89.38595001279984,-89.38610013795835,-89.38625166916982,-89.38640399627157,-89.38655650589611,-89.386708583941,-89.38685961804165,-89.38700900003703,-89.38715612841857,-89.38730041075219,-89.38744126606389,-89.38757812717901,-89.38771044300617,-89.38783768075622,-89.38795932808765,-89.38807489516959,-89.3881839166542,-89.38828595355042,-89.3883805949917,-89.38846745989036,-89.3885461984721,-89.38861649368444,-89.38867806247339,-89.38873065692314,-89.38877406525442,-89.3888081126772,-89.38883266209453,-89.38884761465455,-89.3888529101486,-89.38884852725359,-89.38883448361788,-89.38881083579025,-89.38877767899216,-89.38873514673431,-89.38868341027909,-89.38862267795096,-89.38855319429759,-89.38847523910509,-89.38838912627152,-89.38829520254288,-89.38819384611686,-89.38808546512001,-89.38797049596438,-89.38784940159016,-89.38772266960166,-89.38759081030386,-89.38745435464763,-89.38731385209172,-89.38716986839036,-89.38702298331506,-89.3868737883202,-89.38672288416136,-89.38657087847632,-89.38641838333834,-89.38626601279152,-89.38611438037826,-89.38596409666876,-89.38581576680251,-89.3856699880515,-89.38552734741532,-89.38538841925748,-89.3852537629926,-89.38512392083399,-89.38499941561014,-89.38488074865967,-89.38476839781251,-89.38466281546586,-89.38456442676257,-89.3844736278792,-89.38439078443085,-89.3843162299988,-89.38425026478748,-89.38419315441547,-89.38414512884611,-89.38410638146142,-89.38407706828343,-89.38405730734596,-89.38404717821933,-89.38404672168997,-89.38405593959615,-89.38407479482062,-89.38410321144006,-89.38414107503075,-89.38418823312938,-89.38424449584694,-89.38430963663332,-89.38438339318957,-89.38446546852404,-89.38455553214837,-89.3846532214081,-89.38475814294307],\"lat\":[43.08372335300937,43.08383108782332,43.08393139644181,43.08402387495742,43.08410815099182,43.08418388519517,43.08425077261254,43.08430854391192,43.08435696646869,43.08439584530228,43.08442502386137,43.08444438465419,43.08445384972166,43.0844533809513,43.08444298023068,43.08442268943983,43.0843925902826,43.08435280395768,43.08430349067055,43.08424484898843,43.08417711504065,43.08410056156793,43.08401549682409,43.08392226333481,43.08382123651846,43.08371282317437,43.08359745984481,43.0834756110572,43.08334776745359,43.08321444381506,43.08307617698883,43.08293352372664,43.0827870584428,43.08263737090132,43.0824850638411,43.08233075054892,43.08217505238994,43.0820185963057,43.08186201228962,43.08170593085028,43.08155098047254,43.08139778508687,43.08124696155704,43.08109911719617,43.08095484732131,43.08081473285633,43.08067933799273,43.08054920791785,43.08042486661955,43.08030681477637,43.08019552774141,43.08009145362828,43.07999501150671,43.07990658971508,43.07982654429673,43.07975519756632,43.07969283681194,43.07963971313835,43.07959604045583,43.07956199461885,43.07953771271799,43.07952329252789,43.07951879211357,43.0795242295966,43.07953958308217,43.0795647907472,43.07959975108933,43.07964432333558,43.07969832800927,43.07976154765264,43.07983372770248,43.07991457751521,43.08000377153719,43.08010095061555,43.08020572344444,43.08031766814068,43.08043633394247,43.0805612430245,43.08069189242201,43.08082775605597,43.08096828685148,43.08111291894063,43.08126106994104,43.08141214330092,43.08156553070117,43.08172061450487,43.08187677024428,43.08203336913534,43.0821897806096,43.08234537485325,43.0824995253432,43.0826516113698,43.08280102053634,43.08294715122481,43.08308941501853,43.08322723907138,43.08336006841456,43.0834873681912,43.08360862581002,43.08372335300937]}]]],null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":1,\"color\":\"red\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"red\",\"fillOpacity\":0.2,\"smoothFactor\":1,\"noClip\":false},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addPolygons\",\"args\":[[[[{\"lng\":[-89.33171091694888,-89.33529251210219,-89.339080077049,-89.34305836060206,-89.34721134361762,-89.35152230349883,-89.35597388153178,-89.3605481527829,-89.36522669827632,-89.36999067916058,-89.37482091256611,-89.37969794884776,-89.38460214990175,-89.38951376824136,-89.39441302651304,-89.39928019713288,-89.40409568172268,-89.40884009002555,-89.41349431798378,-89.41803962466406,-89.42245770772062,-89.42673077709233,-89.430841626637,-89.43477370341439,-89.43851117433913,-89.44203898993491,-89.44534294493347,-89.44840973547412,-89.45122701267377,-89.45378343235147,-89.45606870070746,-89.45807361577262,-89.45979010446163,-89.46121125508036,-89.46233134515683,-89.46314586448366,-89.46365153327899,-89.46384631539304,-89.46372942650702,-89.46330133729117,-89.46256377150971,-89.4615196990797,-89.46017332411233,-89.4585300679844,-89.45659654750835,-89.45438054828873,-89.45189099337225,-89.44913790731789,-89.44613237583152,-89.44288650112765,-89.43941335319809,-89.43572691718374,-89.43184203706133,-89.42777435587195,-89.42354025273208,-89.4191567768807,-89.4146415790279,-89.41001284028187,-89.40528919893981,-89.40048967543825,-89.39563359576437,-89.39074051363707,-89.38583013177112,-89.3809222225412,-89.37603654836555,-89.37119278212973,-89.36641042797076,-89.36170874274097,-89.35710665846734,-89.35262270611895,-89.34827494098934,-89.34408086999417,-89.34005738117705,-89.33622067570739,-89.33258620264398,-89.32916859672709,-89.32598161944949,-89.3230381036439,-89.32034990180952,-89.31792783838641,-89.31578166616907,-89.31392002703559,-89.31235041714967,-89.31107915677636,-89.31011136483248,-89.30945093827462,-89.30910053640744,-89.30906157017557,-89.30933419648231,-89.30991731755771,-89.31080858537901,-89.31200441112527,-89.31349997962828,-89.31528926876152,-89.31736507368916,-89.31971903587741,-89.32234167675135,-89.32522243586182,-89.32834971340864,-89.33171091694888],\"lat\":[43.13672228305112,43.14008348659136,43.14321076413817,43.14609152324865,43.14871416412259,43.15106812631084,43.15314393123848,43.15493322037172,43.15642878887472,43.15762461462099,43.15851588244229,43.1590990035177,43.15937162982442,43.15933266359256,43.15898226172538,43.15832183516753,43.15735404322365,43.15608278285033,43.15451317296441,43.15265153383092,43.1505053616136,43.14808329819047,43.14539509635611,43.14245158055051,43.13926460327292,43.13584699735602,43.1322125242926,43.12837581882295,43.12435233000583,43.12015825901066,43.11581049388104,43.11132654153266,43.10672445725903,43.10202277202924,43.09724041787027,43.09239665163444,43.08751097745881,43.08260306822888,43.07769268636293,43.07279960423564,43.06794352456176,43.06314400106019,43.05842035971813,43.05379162097209,43.0492764231193,43.04489294726792,43.04065884412805,43.03659116293867,43.03270628281625,43.0290198468019,43.02554669887235,43.02230082416848,43.01929529268211,43.01654220662776,43.01405265171128,43.01183665249165,43.0099031320156,43.00825987588767,43.0069135009203,43.00586942849029,43.00513186270883,43.00470377349299,43.00458688460696,43.00478166672102,43.00528733551634,43.00610185484317,43.00722194491965,43.00864309553837,43.01035958422737,43.01236449929254,43.01464976764853,43.01720618732623,43.02002346452588,43.02309025506653,43.02639421006509,43.02992202566087,43.03365949658561,43.037591573363,43.04170242290766,43.04597549227938,43.05039357533595,43.05493888201622,43.05959310997445,43.06433751827733,43.06915300286711,43.07402017348697,43.07891943175865,43.08383105009825,43.08873525115224,43.09361228743389,43.09844252083942,43.10320650172369,43.1078850472171,43.11245931846822,43.11691089650117,43.12122185638239,43.12537483939794,43.129353122951,43.13314068789781,43.13672228305112]}]]],null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":1,\"color\":\"green\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"green\",\"fillOpacity\":0.2,\"smoothFactor\":1,\"noClip\":false},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"setView\":[[43.081989,-89.3864442],12,[]],\"limits\":{\"lat\":[43.00458688460696,43.15937162982442],\"lng\":[-89.46384631539304,-89.30906157017557]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\ncan you fix this by using an uninformative prior?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrm_uninformative <- brm(\n  bf(\n    dist_meters ~ havdist(longitude, latitude, crashlong, crashlat),\n    crashlong + crashlat ~ 1,\n    nl = TRUE\n  ),\n  data = nls_data,\n  stanvars = stanvar(scode = stan_funs, block = \"functions\"),\n  prior =  uninformative_prior,\n  backend = \"cmdstanr\",\n  chains = 4,\n  cores = 4,\n  seed = 27\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nStart sampling\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRunning MCMC with 4 parallel chains...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 3 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 3 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 4 Iteration:  100 / 2000 [  5%]  (Warmup) \nChain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) \nChain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) \nChain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  600 / 2000 [ 30%]  (Warmup) \nChain 4 Iteration:  700 / 2000 [ 35%]  (Warmup) \nChain 4 Iteration:  800 / 2000 [ 40%]  (Warmup) \nChain 1 finished in 0.1 seconds.\nChain 2 finished in 0.1 seconds.\nChain 3 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 Iteration:  900 / 2000 [ 45%]  (Warmup) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) \nChain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) \nChain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) \nChain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) \nChain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) \nChain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) \nChain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 0.2 seconds.\nChain 4 finished in 0.2 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.2 seconds.\nTotal execution time: 0.4 seconds.\n```\n\n\n:::\n\n```{.r .cell-code}\nbrm_uninformative\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Parts of the model have not converged (some Rhats are > 1.05). Be\ncareful when analysing the results! We recommend running more iterations and/or\nsetting stronger priors.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: dist_meters ~ havdist(longitude, latitude, crashlong, crashlat) \n         crashlong ~ 1\n         crashlat ~ 1\n   Data: nls_data (Number of observations: 5) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n                    Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ncrashlong_Intercept   -90.17      1.36   -92.55   -89.35 1.53        7       31\ncrashlat_Intercept     41.18      2.59    36.79    43.10 2.10        5       29\n\nFurther Distributional Parameters:\n       Estimate Est.Error l-95% CI  u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma 154946.39  59959.51 85560.36 313817.13 1.00     1635     1929\n\nDraws were sampled using sample(hmc). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n\n\n:::\n:::\n\n\n\n\nmy go-to move would be to use brms() to think as little about this problem as possible (i do not want to write out a censored likelihood for this problem, or even commit to a particular distributional family just yet)\n\nand we can do that, but we do need to implement the non-linearity in terms of things that brms can understand. this is a useful trick\n\nBRMS implementation goes here\n\n- try to fit with informative prior\n- try to fit with uninformative prior\n\npresumably both don't work\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrm_uninformative_params <- fixef(brm_uninformative)[, \"Estimate\"] |>\n  set_names(\n    c(\"longitude\", \"latitude\")\n  )\n\nbrm_uninformative_ellipse <- ellipse(vcov(brm_uninformative), center = brm_uninformative_params) |>\n  make_leaflet_polygon()\n\nbrm_uninformative_map <- leaflet() |>\n  addTiles() |>\n  setView(\n    lng = mean_longitude,\n    lat = mean_latitude,\n    zoom = 4\n  ) |>\n  addCircleMarkers(\n    data = leaflet_data,\n    color = leaflet_data$color,\n    label = leaflet_data$label_html\n  ) |>\n  addPolygons(\n    data = brm_uninformative_ellipse,\n    color = \"red\",\n    stroke = 1\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAssuming \"longitude\" and \"latitude\" are longitude and latitude, respectively\n```\n\n\n:::\n\n```{.r .cell-code}\nbrm_uninformative_map\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-779982fe0e3409a029bd\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-779982fe0e3409a029bd\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addCircleMarkers\",\"args\":[[43.097222,43.096389,43.072722,43.075556,43.068056],[-89.34230599999999,-89.363333,-89.385194,-89.431944,-89.40944399999999],10,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":[\"blue\",\"blue\",\"blue\",\"blue\",\"blue\"],\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":[\"blue\",\"blue\",\"blue\",\"blue\",\"blue\"],\"fillOpacity\":0.2},null,null,null,null,[\"<p>149 Wabesa Street<\\/p>\\n<p>3008 meters from crash<\\/p>\",\"<p>1844 Fordem Avenue<\\/p>\\n<p>1690 meters from crash<\\/p>\",\"<p>122 W. Main Street<\\/p>\\n<p>1490 meters from crash<\\/p>\",\"<p>600 Highland Ave<\\/p>\\n<p>4794 meters from crash<\\/p>\",\"<p>1410 Regent Street<\\/p>\\n<p>3347 meters from crash<\\/p>\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addPolygons\",\"args\":[[[[{\"lng\":[-87.9701308614703,-88.13308519704792,-88.30424485613148,-88.48292063918359,-88.6683930818884,-88.85991535218048,-89.05671625747397,-89.25800334998287,-89.46296611762871,-89.6707792476865,-89.88060595002783,-90.09160132657941,-90.30291577342938,-90.51369840188238,-90.72310046468806,-90.93027877364663,-91.13439909483023,-91.33463950774845,-91.53019371493205,-91.72027428860835,-91.90411584139493,-92.08097810824442,-92.25014892723068,-92.41094710717341,-92.56272517055473,-92.70487196068248,-92.83681510260269,-92.95802330785132,-93.06800851376552,-93.16632784873968,-93.25258541551305,-93.32643388530832,-93.38757589640194,-93.43576525149497,-93.47080790906256,-93.49256276469077,-93.50094221925424,-93.49591253164692,-93.47749395464561,-93.44576065335914,-93.40084040659177,-93.34291409232287,-93.27221495937528,-93.18902768820458,-93.09368724459132,-92.98657753085213,-92.86812984000052,-92.73882111908219,-92.59917204867756,-92.44974494630489,-92.29114150216606,-92.12400035635252,-91.94899452726705,-91.76682870161613,-91.5782363968854,-91.38397700772352,-91.18483274812797,-90.98160550174548,-90.77511359296938,-90.56618849183631,-90.35567146598972,-90.14441019319202,-89.9332553480254,-89.72305717652559,-89.51466207254104,-89.30890916960379,-89.10662696203474,-88.90862996888953,-88.71571545417775,-88.52866021656217,-88.34821746146467,-88.17511376817392,-88.01004616416689,-87.85367931842536,-87.70664286504842,-87.56952886793823,-87.4428894367676,-87.32723450382927,-87.2230297707185,-87.13069483311709,-87.05060149122976,-86.9830722526758,-86.92837903386487,-86.8867420650855,-86.85832900371543,-86.84325425912461,-86.84157853198893,-86.85330856987018,-86.87839714004581,-86.9167432196986,-86.96819240269981,-87.03253752134813,-87.109519480561,-87.19882830115897,-87.30010436804247,-87.41293987823492,-87.53688048296137,-87.67142711715064,-87.81603800899427,-87.9701308614703,-87.9701308614703],\"lat\":[45.35866952469623,45.65150947766723,45.92632979597609,46.18202387519709,46.41756212551883,46.63199611753905,46.824462401255,46.99418598287195,47.1404834454296,47.26276570068099,47.36054036114302,47.43341372276694,47.4810923502457,47.50338425857431,47.50019968610573,47.47155145598931,47.41755492453651,47.33842751672177,47.23448785068881,47.1061544547879,46.95394408230985,46.77846963070295,46.58043767365119,46.36064561595147,46.11997848264592,45.85940535533838,45.57997547004488,45.28281399229044,44.96911748646469,44.64014909767937,44.29723346552876,43.94175139023362,43.57513427264595,43.19885835050307,42.81443875413921,42.42342340559041,42.02738678565886,41.62792359403434,41.22664232800152,40.82515880558896,40.42508965924031,40.02804582620602,39.63562606186756,39.24941050211381,38.87095430069154,38.50178136715009,38.14337823059557,37.79718805396271,37.46460482290718,37.14696773271722,36.84555579584701,36.56158269178488,36.29619187999432,36.05045199560639,35.82535254640317,35.62179992841914,35.4406137762043,35.28252366244509,35.1481661602327,35.0380822798079,34.95271529010374,34.892408933858,34.85740604348255,34.84784756326286,34.86377198182518,34.90511517715638,34.97171067480069,35.06329031819355,35.1794853484335,35.31982788914405,35.48375283044681,35.67060010445943,35.87961734315603,36.10996290788773,36.36070927836438,36.63084678745144,36.91928768674316,37.22487052654152,37.5463648326042,37.88247606083011,38.23185080993154,38.59308227110351,38.96471589274626,39.34525523743122,39.73316800752631,40.12689221521778,40.52484247208374,40.92541637289387,41.32700094792966,41.72797915784422,42.12673640490898,42.52166703442891,42.91118080014721,43.29370926760582,43.6677121296773,44.03168340883808,44.38415752120837,44.72371517794119,45.04898910019766,45.35866952469623,45.35866952469623]}]]],null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":1,\"color\":\"red\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"red\",\"fillOpacity\":0.2,\"smoothFactor\":1,\"noClip\":false},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"setView\":[[43.081989,-89.3864442],4,[]],\"limits\":{\"lat\":[34.84784756326286,47.50338425857431],\"lng\":[-93.50094221925424,-86.84157853198893]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n## is it possible for bayesians to do multilaterion?\n\ncite the false confidence theorem paper multilaterion in the satelite context, this is just  a simpler and easier to visualize version of the same phenomenon\n\naside about representations of a priori uncertainty\n\nbayesian multilateration paper with very silly prior\n\n\nconclusions:\n\n- nls is cool\n- a lot of trick can be ported to brms (non-linearity in either R or stan C++)\n- not sure if there's a nice way to do this estimation as a bayesian, would love to hear if there is\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"../../site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"../../site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"../../site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/leaflet-binding-2.2.2/leaflet.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}